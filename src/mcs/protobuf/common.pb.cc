// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mcs {
namespace rpc {
constexpr NodeAffinitySchedulingStrategy::NodeAffinitySchedulingStrategy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , soft_(false){}
struct NodeAffinitySchedulingStrategyDefaultTypeInternal {
  constexpr NodeAffinitySchedulingStrategyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeAffinitySchedulingStrategyDefaultTypeInternal() {}
  union {
    NodeAffinitySchedulingStrategy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeAffinitySchedulingStrategyDefaultTypeInternal _NodeAffinitySchedulingStrategy_default_instance_;
constexpr PlacementGroupSchedulingStrategy::PlacementGroupSchedulingStrategy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : placement_group_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , placement_group_bundle_index_(int64_t{0})
  , placement_group_capture_child_tasks_(false){}
struct PlacementGroupSchedulingStrategyDefaultTypeInternal {
  constexpr PlacementGroupSchedulingStrategyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlacementGroupSchedulingStrategyDefaultTypeInternal() {}
  union {
    PlacementGroupSchedulingStrategy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlacementGroupSchedulingStrategyDefaultTypeInternal _PlacementGroupSchedulingStrategy_default_instance_;
constexpr DefaultSchedulingStrategy::DefaultSchedulingStrategy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DefaultSchedulingStrategyDefaultTypeInternal {
  constexpr DefaultSchedulingStrategyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DefaultSchedulingStrategyDefaultTypeInternal() {}
  union {
    DefaultSchedulingStrategy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DefaultSchedulingStrategyDefaultTypeInternal _DefaultSchedulingStrategy_default_instance_;
constexpr SpreadSchedulingStrategy::SpreadSchedulingStrategy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SpreadSchedulingStrategyDefaultTypeInternal {
  constexpr SpreadSchedulingStrategyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpreadSchedulingStrategyDefaultTypeInternal() {}
  union {
    SpreadSchedulingStrategy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpreadSchedulingStrategyDefaultTypeInternal _SpreadSchedulingStrategy_default_instance_;
constexpr SchedulingStrategy::SchedulingStrategy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SchedulingStrategyDefaultTypeInternal {
  constexpr SchedulingStrategyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchedulingStrategyDefaultTypeInternal() {}
  union {
    SchedulingStrategy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchedulingStrategyDefaultTypeInternal _SchedulingStrategy_default_instance_;
constexpr Address::Address(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mcslet_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , worker_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_(0){}
struct AddressDefaultTypeInternal {
  constexpr AddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddressDefaultTypeInternal() {}
  union {
    Address _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddressDefaultTypeInternal _Address_default_instance_;
constexpr JavaFunctionDescriptor::JavaFunctionDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : class_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , function_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct JavaFunctionDescriptorDefaultTypeInternal {
  constexpr JavaFunctionDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JavaFunctionDescriptorDefaultTypeInternal() {}
  union {
    JavaFunctionDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JavaFunctionDescriptorDefaultTypeInternal _JavaFunctionDescriptor_default_instance_;
constexpr PythonFunctionDescriptor::PythonFunctionDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : module_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , class_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , function_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , function_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PythonFunctionDescriptorDefaultTypeInternal {
  constexpr PythonFunctionDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PythonFunctionDescriptorDefaultTypeInternal() {}
  union {
    PythonFunctionDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PythonFunctionDescriptorDefaultTypeInternal _PythonFunctionDescriptor_default_instance_;
constexpr CppFunctionDescriptor::CppFunctionDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : function_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , caller_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , class_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CppFunctionDescriptorDefaultTypeInternal {
  constexpr CppFunctionDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CppFunctionDescriptorDefaultTypeInternal() {}
  union {
    CppFunctionDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CppFunctionDescriptorDefaultTypeInternal _CppFunctionDescriptor_default_instance_;
constexpr FunctionDescriptor::FunctionDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct FunctionDescriptorDefaultTypeInternal {
  constexpr FunctionDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionDescriptorDefaultTypeInternal() {}
  union {
    FunctionDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionDescriptorDefaultTypeInternal _FunctionDescriptor_default_instance_;
constexpr ConcurrencyGroup::ConcurrencyGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : function_descriptors_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , max_concurrency_(0){}
struct ConcurrencyGroupDefaultTypeInternal {
  constexpr ConcurrencyGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConcurrencyGroupDefaultTypeInternal() {}
  union {
    ConcurrencyGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConcurrencyGroupDefaultTypeInternal _ConcurrencyGroup_default_instance_;
constexpr McsErrorInfo::McsErrorInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_type_(0)

  , _oneof_case_{}{}
struct McsErrorInfoDefaultTypeInternal {
  constexpr McsErrorInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~McsErrorInfoDefaultTypeInternal() {}
  union {
    McsErrorInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT McsErrorInfoDefaultTypeInternal _McsErrorInfo_default_instance_;
constexpr OutOfMemoryErrorContext::OutOfMemoryErrorContext(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , task_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_ip_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , memory_used_bytes_(uint64_t{0u})
  , memory_total_bytes_(uint64_t{0u})
  , memory_usage_fraction_(0)
  , memory_threshold_(0){}
struct OutOfMemoryErrorContextDefaultTypeInternal {
  constexpr OutOfMemoryErrorContextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutOfMemoryErrorContextDefaultTypeInternal() {}
  union {
    OutOfMemoryErrorContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutOfMemoryErrorContextDefaultTypeInternal _OutOfMemoryErrorContext_default_instance_;
constexpr NodeDiedErrorContext::NodeDiedErrorContext(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_ip_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct NodeDiedErrorContextDefaultTypeInternal {
  constexpr NodeDiedErrorContextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeDiedErrorContextDefaultTypeInternal() {}
  union {
    NodeDiedErrorContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeDiedErrorContextDefaultTypeInternal _NodeDiedErrorContext_default_instance_;
constexpr McsException::McsException(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serialized_exception_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , formatted_exception_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_(0)
{}
struct McsExceptionDefaultTypeInternal {
  constexpr McsExceptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~McsExceptionDefaultTypeInternal() {}
  union {
    McsException _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT McsExceptionDefaultTypeInternal _McsException_default_instance_;
constexpr ActorDeathCause::ActorDeathCause(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ActorDeathCauseDefaultTypeInternal {
  constexpr ActorDeathCauseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActorDeathCauseDefaultTypeInternal() {}
  union {
    ActorDeathCause _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActorDeathCauseDefaultTypeInternal _ActorDeathCause_default_instance_;
constexpr RuntimeEnvFailedContext::RuntimeEnvFailedContext(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RuntimeEnvFailedContextDefaultTypeInternal {
  constexpr RuntimeEnvFailedContextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RuntimeEnvFailedContextDefaultTypeInternal() {}
  union {
    RuntimeEnvFailedContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RuntimeEnvFailedContextDefaultTypeInternal _RuntimeEnvFailedContext_default_instance_;
constexpr ActorUnschedulableContext::ActorUnschedulableContext(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ActorUnschedulableContextDefaultTypeInternal {
  constexpr ActorUnschedulableContextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActorUnschedulableContextDefaultTypeInternal() {}
  union {
    ActorUnschedulableContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActorUnschedulableContextDefaultTypeInternal _ActorUnschedulableContext_default_instance_;
constexpr ActorDiedErrorContext::ActorDiedErrorContext(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_ip_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_ip_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mcs_namespace_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , class_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , actor_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pid_(0u)
  , never_started_(false){}
struct ActorDiedErrorContextDefaultTypeInternal {
  constexpr ActorDiedErrorContextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActorDiedErrorContextDefaultTypeInternal() {}
  union {
    ActorDiedErrorContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActorDiedErrorContextDefaultTypeInternal _ActorDiedErrorContext_default_instance_;
constexpr TaskSpec_RequiredResourcesEntry_DoNotUse::TaskSpec_RequiredResourcesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TaskSpec_RequiredResourcesEntry_DoNotUseDefaultTypeInternal {
  constexpr TaskSpec_RequiredResourcesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskSpec_RequiredResourcesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TaskSpec_RequiredResourcesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskSpec_RequiredResourcesEntry_DoNotUseDefaultTypeInternal _TaskSpec_RequiredResourcesEntry_DoNotUse_default_instance_;
constexpr TaskSpec_RequiredPlacementResourcesEntry_DoNotUse::TaskSpec_RequiredPlacementResourcesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TaskSpec_RequiredPlacementResourcesEntry_DoNotUseDefaultTypeInternal {
  constexpr TaskSpec_RequiredPlacementResourcesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskSpec_RequiredPlacementResourcesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TaskSpec_RequiredPlacementResourcesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskSpec_RequiredPlacementResourcesEntry_DoNotUseDefaultTypeInternal _TaskSpec_RequiredPlacementResourcesEntry_DoNotUse_default_instance_;
constexpr TaskSpec::TaskSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_()
  , required_resources_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , required_placement_resources_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , dynamic_return_ids_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , job_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , task_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_task_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , caller_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , debugger_breakpoint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , concurrency_group_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serialized_retry_exception_allowlist_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , function_descriptor_(nullptr)
  , caller_address_(nullptr)
  , actor_creation_task_spec_(nullptr)
  , actor_task_spec_(nullptr)
  , runtime_env_info_(nullptr)
  , scheduling_strategy_(nullptr)
  , type_(0)

  , language_(0)

  , parent_counter_(uint64_t{0u})
  , num_returns_(uint64_t{0u})
  , max_retries_(0)
  , skip_execution_(false)
  , retry_exceptions_(false)
  , returns_dynamic_(false)
  , depth_(int64_t{0})
  , attempt_number_(uint64_t{0u}){}
struct TaskSpecDefaultTypeInternal {
  constexpr TaskSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskSpecDefaultTypeInternal() {}
  union {
    TaskSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskSpecDefaultTypeInternal _TaskSpec_default_instance_;
constexpr TaskInfoEntry_RequiredResourcesEntry_DoNotUse::TaskInfoEntry_RequiredResourcesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TaskInfoEntry_RequiredResourcesEntry_DoNotUseDefaultTypeInternal {
  constexpr TaskInfoEntry_RequiredResourcesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskInfoEntry_RequiredResourcesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TaskInfoEntry_RequiredResourcesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskInfoEntry_RequiredResourcesEntry_DoNotUseDefaultTypeInternal _TaskInfoEntry_RequiredResourcesEntry_DoNotUse_default_instance_;
constexpr TaskInfoEntry::TaskInfoEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : required_resources_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , func_or_class_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , job_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , task_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_task_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , actor_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , runtime_env_info_(nullptr)
  , type_(0)

  , language_(0)

  , scheduling_state_(0)
{}
struct TaskInfoEntryDefaultTypeInternal {
  constexpr TaskInfoEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskInfoEntryDefaultTypeInternal() {}
  union {
    TaskInfoEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskInfoEntryDefaultTypeInternal _TaskInfoEntry_default_instance_;
constexpr Bundle_BundleIdentifier::Bundle_BundleIdentifier(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : placement_group_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bundle_index_(0){}
struct Bundle_BundleIdentifierDefaultTypeInternal {
  constexpr Bundle_BundleIdentifierDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Bundle_BundleIdentifierDefaultTypeInternal() {}
  union {
    Bundle_BundleIdentifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Bundle_BundleIdentifierDefaultTypeInternal _Bundle_BundleIdentifier_default_instance_;
constexpr Bundle_UnitResourcesEntry_DoNotUse::Bundle_UnitResourcesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Bundle_UnitResourcesEntry_DoNotUseDefaultTypeInternal {
  constexpr Bundle_UnitResourcesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Bundle_UnitResourcesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Bundle_UnitResourcesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Bundle_UnitResourcesEntry_DoNotUseDefaultTypeInternal _Bundle_UnitResourcesEntry_DoNotUse_default_instance_;
constexpr Bundle::Bundle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unit_resources_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bundle_id_(nullptr){}
struct BundleDefaultTypeInternal {
  constexpr BundleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BundleDefaultTypeInternal() {}
  union {
    Bundle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BundleDefaultTypeInternal _Bundle_default_instance_;
constexpr PlacementGroupSpec::PlacementGroupSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bundles_()
  , placement_group_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , creator_job_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , creator_actor_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , strategy_(0)

  , creator_job_dead_(false)
  , creator_actor_dead_(false)
  , is_detached_(false)
  , max_cpu_fraction_per_node_(0){}
struct PlacementGroupSpecDefaultTypeInternal {
  constexpr PlacementGroupSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlacementGroupSpecDefaultTypeInternal() {}
  union {
    PlacementGroupSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlacementGroupSpecDefaultTypeInternal _PlacementGroupSpec_default_instance_;
constexpr ObjectReference::ObjectReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , call_site_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_address_(nullptr){}
struct ObjectReferenceDefaultTypeInternal {
  constexpr ObjectReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectReferenceDefaultTypeInternal() {}
  union {
    ObjectReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectReferenceDefaultTypeInternal _ObjectReference_default_instance_;
constexpr ObjectReferenceCount::ObjectReferenceCount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : borrowers_()
  , stored_in_objects_()
  , contained_in_borrowed_ids_()
  , contains_()
  , reference_(nullptr)
  , has_local_ref_(false){}
struct ObjectReferenceCountDefaultTypeInternal {
  constexpr ObjectReferenceCountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectReferenceCountDefaultTypeInternal() {}
  union {
    ObjectReferenceCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectReferenceCountDefaultTypeInternal _ObjectReferenceCount_default_instance_;
constexpr TaskArg::TaskArg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nested_inlined_refs_()
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , object_ref_(nullptr){}
struct TaskArgDefaultTypeInternal {
  constexpr TaskArgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskArgDefaultTypeInternal() {}
  union {
    TaskArg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskArgDefaultTypeInternal _TaskArg_default_instance_;
constexpr ActorCreationTaskSpec::ActorCreationTaskSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dynamic_worker_options_()
  , concurrency_groups_()
  , actor_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mcs_namespace_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , extension_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serialized_actor_handle_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , max_actor_restarts_(int64_t{0})
  , max_task_retries_(int64_t{0})
  , max_concurrency_(0)
  , is_detached_(false)
  , is_asyncio_(false)
  , execute_out_of_order_(false)
  , max_pending_calls_(0){}
struct ActorCreationTaskSpecDefaultTypeInternal {
  constexpr ActorCreationTaskSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActorCreationTaskSpecDefaultTypeInternal() {}
  union {
    ActorCreationTaskSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActorCreationTaskSpecDefaultTypeInternal _ActorCreationTaskSpec_default_instance_;
constexpr ActorTaskSpec::ActorTaskSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actor_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , actor_creation_dummy_object_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , previous_actor_task_dummy_object_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , actor_counter_(uint64_t{0u}){}
struct ActorTaskSpecDefaultTypeInternal {
  constexpr ActorTaskSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActorTaskSpecDefaultTypeInternal() {}
  union {
    ActorTaskSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActorTaskSpecDefaultTypeInternal _ActorTaskSpec_default_instance_;
constexpr Task::Task(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_spec_(nullptr){}
struct TaskDefaultTypeInternal {
  constexpr TaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskDefaultTypeInternal() {}
  union {
    Task _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskDefaultTypeInternal _Task_default_instance_;
constexpr ResourceId::ResourceId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : index_(int64_t{0})
  , quantity_(0){}
struct ResourceIdDefaultTypeInternal {
  constexpr ResourceIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourceIdDefaultTypeInternal() {}
  union {
    ResourceId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourceIdDefaultTypeInternal _ResourceId_default_instance_;
constexpr ResourceMapEntry::ResourceMapEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resource_ids_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ResourceMapEntryDefaultTypeInternal {
  constexpr ResourceMapEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourceMapEntryDefaultTypeInternal() {}
  union {
    ResourceMapEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourceMapEntryDefaultTypeInternal _ResourceMapEntry_default_instance_;
constexpr ViewData_Measure::ViewData_Measure(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : distribution_bucket_boundaries_()
  , distribution_bucket_counts_()
  , tags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , int_value_(int64_t{0})
  , double_value_(0)
  , distribution_min_(0)
  , distribution_mean_(0)
  , distribution_max_(0)
  , distribution_count_(0){}
struct ViewData_MeasureDefaultTypeInternal {
  constexpr ViewData_MeasureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ViewData_MeasureDefaultTypeInternal() {}
  union {
    ViewData_Measure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ViewData_MeasureDefaultTypeInternal _ViewData_Measure_default_instance_;
constexpr ViewData::ViewData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : measures_()
  , view_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ViewDataDefaultTypeInternal {
  constexpr ViewDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ViewDataDefaultTypeInternal() {}
  union {
    ViewData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ViewDataDefaultTypeInternal _ViewData_default_instance_;
constexpr ObjectRefInfo::ObjectRefInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contained_in_owned_()
  , object_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , call_site_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , object_size_(int64_t{0})
  , local_ref_count_(int64_t{0})
  , submitted_task_ref_count_(int64_t{0})
  , pinned_in_memory_(false)
  , task_status_(0)

  , attempt_number_(uint64_t{0u}){}
struct ObjectRefInfoDefaultTypeInternal {
  constexpr ObjectRefInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectRefInfoDefaultTypeInternal() {}
  union {
    ObjectRefInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectRefInfoDefaultTypeInternal _ObjectRefInfo_default_instance_;
constexpr ResourceAllocations_ResourceSlot::ResourceAllocations_ResourceSlot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slot_(int64_t{0})
  , allocation_(0){}
struct ResourceAllocations_ResourceSlotDefaultTypeInternal {
  constexpr ResourceAllocations_ResourceSlotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourceAllocations_ResourceSlotDefaultTypeInternal() {}
  union {
    ResourceAllocations_ResourceSlot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourceAllocations_ResourceSlotDefaultTypeInternal _ResourceAllocations_ResourceSlot_default_instance_;
constexpr ResourceAllocations::ResourceAllocations(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resource_slots_(){}
struct ResourceAllocationsDefaultTypeInternal {
  constexpr ResourceAllocationsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourceAllocationsDefaultTypeInternal() {}
  union {
    ResourceAllocations _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourceAllocationsDefaultTypeInternal _ResourceAllocations_default_instance_;
constexpr CoreWorkerStats_UsedResourcesEntry_DoNotUse::CoreWorkerStats_UsedResourcesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CoreWorkerStats_UsedResourcesEntry_DoNotUseDefaultTypeInternal {
  constexpr CoreWorkerStats_UsedResourcesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CoreWorkerStats_UsedResourcesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CoreWorkerStats_UsedResourcesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CoreWorkerStats_UsedResourcesEntry_DoNotUseDefaultTypeInternal _CoreWorkerStats_UsedResourcesEntry_DoNotUse_default_instance_;
constexpr CoreWorkerStats_WebuiDisplayEntry_DoNotUse::CoreWorkerStats_WebuiDisplayEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CoreWorkerStats_WebuiDisplayEntry_DoNotUseDefaultTypeInternal {
  constexpr CoreWorkerStats_WebuiDisplayEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CoreWorkerStats_WebuiDisplayEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CoreWorkerStats_WebuiDisplayEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CoreWorkerStats_WebuiDisplayEntry_DoNotUseDefaultTypeInternal _CoreWorkerStats_WebuiDisplayEntry_DoNotUse_default_instance_;
constexpr CoreWorkerStats::CoreWorkerStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : used_resources_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , webui_display_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , object_refs_()
  , current_task_desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , actor_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , actor_title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , job_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , worker_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , num_pending_tasks_(0)
  , num_object_refs_in_scope_(0)
  , port_(int64_t{0})
  , num_in_plasma_(0)
  , num_local_objects_(0)
  , used_object_store_memory_(int64_t{0})
  , task_queue_length_(0)
  , num_executed_tasks_(0)
  , language_(0)

  , pid_(0u)
  , worker_type_(0)

  , objects_total_(int64_t{0}){}
struct CoreWorkerStatsDefaultTypeInternal {
  constexpr CoreWorkerStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CoreWorkerStatsDefaultTypeInternal() {}
  union {
    CoreWorkerStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CoreWorkerStatsDefaultTypeInternal _CoreWorkerStats_default_instance_;
constexpr MetricPoint_TagsEntry_DoNotUse::MetricPoint_TagsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MetricPoint_TagsEntry_DoNotUseDefaultTypeInternal {
  constexpr MetricPoint_TagsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricPoint_TagsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MetricPoint_TagsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricPoint_TagsEntry_DoNotUseDefaultTypeInternal _MetricPoint_TagsEntry_DoNotUse_default_instance_;
constexpr MetricPoint::MetricPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , metric_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , units_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(int64_t{0})
  , value_(0){}
struct MetricPointDefaultTypeInternal {
  constexpr MetricPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetricPointDefaultTypeInternal() {}
  union {
    MetricPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetricPointDefaultTypeInternal _MetricPoint_default_instance_;
constexpr NamedActorInfo::NamedActorInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mcs_namespace_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct NamedActorInfoDefaultTypeInternal {
  constexpr NamedActorInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NamedActorInfoDefaultTypeInternal() {}
  union {
    NamedActorInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NamedActorInfoDefaultTypeInternal _NamedActorInfo_default_instance_;
}  // namespace rpc
}  // namespace mcs
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2eproto[47];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_common_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::NodeAffinitySchedulingStrategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::NodeAffinitySchedulingStrategy, node_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::NodeAffinitySchedulingStrategy, soft_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupSchedulingStrategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupSchedulingStrategy, placement_group_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupSchedulingStrategy, placement_group_bundle_index_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupSchedulingStrategy, placement_group_capture_child_tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::DefaultSchedulingStrategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::SpreadSchedulingStrategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::SchedulingStrategy, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::SchedulingStrategy, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::SchedulingStrategy, scheduling_strategy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::Address, mcslet_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::Address, ip_address_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::Address, port_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::Address, worker_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::JavaFunctionDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::JavaFunctionDescriptor, class_name_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::JavaFunctionDescriptor, function_name_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::JavaFunctionDescriptor, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PythonFunctionDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PythonFunctionDescriptor, module_name_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PythonFunctionDescriptor, class_name_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PythonFunctionDescriptor, function_name_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PythonFunctionDescriptor, function_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CppFunctionDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CppFunctionDescriptor, function_name_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CppFunctionDescriptor, caller_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CppFunctionDescriptor, class_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::FunctionDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::FunctionDescriptor, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::FunctionDescriptor, function_descriptor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ConcurrencyGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ConcurrencyGroup, name_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ConcurrencyGroup, max_concurrency_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ConcurrencyGroup, function_descriptors_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::McsErrorInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::McsErrorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::McsErrorInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::McsErrorInfo, error_type_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::McsErrorInfo, error_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::OutOfMemoryErrorContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::OutOfMemoryErrorContext, task_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::OutOfMemoryErrorContext, task_name_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::OutOfMemoryErrorContext, node_ip_address_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::OutOfMemoryErrorContext, memory_used_bytes_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::OutOfMemoryErrorContext, memory_total_bytes_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::OutOfMemoryErrorContext, memory_usage_fraction_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::OutOfMemoryErrorContext, memory_threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::NodeDiedErrorContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::NodeDiedErrorContext, node_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::NodeDiedErrorContext, node_ip_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::McsException, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::McsException, language_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::McsException, serialized_exception_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::McsException, formatted_exception_string_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorDeathCause, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorDeathCause, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorDeathCause, context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::RuntimeEnvFailedContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::RuntimeEnvFailedContext, error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorUnschedulableContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorUnschedulableContext, error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorDiedErrorContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorDiedErrorContext, error_message_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorDiedErrorContext, owner_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorDiedErrorContext, owner_ip_address_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorDiedErrorContext, node_ip_address_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorDiedErrorContext, pid_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorDiedErrorContext, name_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorDiedErrorContext, mcs_namespace_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorDiedErrorContext, class_name_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorDiedErrorContext, actor_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorDiedErrorContext, never_started_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec_RequiredResourcesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec_RequiredResourcesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec_RequiredResourcesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec_RequiredResourcesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec_RequiredPlacementResourcesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec_RequiredPlacementResourcesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec_RequiredPlacementResourcesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec_RequiredPlacementResourcesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, type_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, name_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, language_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, function_descriptor_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, job_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, task_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, parent_task_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, parent_counter_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, caller_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, caller_address_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, args_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, num_returns_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, required_resources_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, required_placement_resources_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, actor_creation_task_spec_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, actor_task_spec_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, max_retries_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, skip_execution_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, debugger_breakpoint_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, runtime_env_info_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, concurrency_group_name_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, retry_exceptions_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, serialized_retry_exception_allowlist_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, depth_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, scheduling_strategy_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, attempt_number_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, returns_dynamic_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskSpec, dynamic_return_ids_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskInfoEntry_RequiredResourcesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskInfoEntry_RequiredResourcesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskInfoEntry_RequiredResourcesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskInfoEntry_RequiredResourcesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskInfoEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskInfoEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskInfoEntry, type_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskInfoEntry, name_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskInfoEntry, language_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskInfoEntry, func_or_class_name_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskInfoEntry, scheduling_state_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskInfoEntry, job_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskInfoEntry, task_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskInfoEntry, parent_task_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskInfoEntry, required_resources_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskInfoEntry, runtime_env_info_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskInfoEntry, node_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskInfoEntry, actor_id_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::Bundle_BundleIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::Bundle_BundleIdentifier, placement_group_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::Bundle_BundleIdentifier, bundle_index_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::Bundle_UnitResourcesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::Bundle_UnitResourcesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::Bundle_UnitResourcesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::Bundle_UnitResourcesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::Bundle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::Bundle, bundle_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::Bundle, unit_resources_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::Bundle, node_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupSpec, placement_group_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupSpec, name_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupSpec, bundles_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupSpec, strategy_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupSpec, creator_job_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupSpec, creator_actor_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupSpec, creator_job_dead_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupSpec, creator_actor_dead_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupSpec, is_detached_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupSpec, max_cpu_fraction_per_node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ObjectReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ObjectReference, object_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ObjectReference, owner_address_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ObjectReference, call_site_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ObjectReferenceCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ObjectReferenceCount, reference_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ObjectReferenceCount, has_local_ref_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ObjectReferenceCount, borrowers_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ObjectReferenceCount, stored_in_objects_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ObjectReferenceCount, contained_in_borrowed_ids_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ObjectReferenceCount, contains_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskArg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskArg, object_ref_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskArg, data_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskArg, metadata_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskArg, nested_inlined_refs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorCreationTaskSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorCreationTaskSpec, actor_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorCreationTaskSpec, max_actor_restarts_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorCreationTaskSpec, max_task_retries_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorCreationTaskSpec, dynamic_worker_options_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorCreationTaskSpec, max_concurrency_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorCreationTaskSpec, is_detached_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorCreationTaskSpec, name_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorCreationTaskSpec, mcs_namespace_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorCreationTaskSpec, is_asyncio_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorCreationTaskSpec, extension_data_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorCreationTaskSpec, serialized_actor_handle_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorCreationTaskSpec, concurrency_groups_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorCreationTaskSpec, execute_out_of_order_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorCreationTaskSpec, max_pending_calls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTaskSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTaskSpec, actor_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTaskSpec, actor_creation_dummy_object_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTaskSpec, actor_counter_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTaskSpec, previous_actor_task_dummy_object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::Task, task_spec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceId, index_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceId, quantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceMapEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceMapEntry, name_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceMapEntry, resource_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ViewData_Measure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ViewData_Measure, tags_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ViewData_Measure, int_value_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ViewData_Measure, double_value_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ViewData_Measure, distribution_min_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ViewData_Measure, distribution_mean_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ViewData_Measure, distribution_max_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ViewData_Measure, distribution_count_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ViewData_Measure, distribution_bucket_boundaries_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ViewData_Measure, distribution_bucket_counts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ViewData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ViewData, view_name_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ViewData, measures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ObjectRefInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ObjectRefInfo, object_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ObjectRefInfo, call_site_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ObjectRefInfo, object_size_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ObjectRefInfo, local_ref_count_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ObjectRefInfo, submitted_task_ref_count_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ObjectRefInfo, contained_in_owned_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ObjectRefInfo, pinned_in_memory_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ObjectRefInfo, task_status_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ObjectRefInfo, attempt_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceAllocations_ResourceSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceAllocations_ResourceSlot, slot_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceAllocations_ResourceSlot, allocation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceAllocations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceAllocations, resource_slots_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats_UsedResourcesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats_UsedResourcesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats_UsedResourcesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats_UsedResourcesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats_WebuiDisplayEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats_WebuiDisplayEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats_WebuiDisplayEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats_WebuiDisplayEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats, current_task_desc_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats, num_pending_tasks_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats, num_object_refs_in_scope_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats, ip_address_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats, port_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats, actor_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats, used_resources_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats, webui_display_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats, num_in_plasma_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats, num_local_objects_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats, used_object_store_memory_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats, task_queue_length_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats, num_executed_tasks_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats, actor_title_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats, object_refs_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats, job_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats, worker_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats, language_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats, pid_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats, worker_type_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::CoreWorkerStats, objects_total_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::MetricPoint_TagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::MetricPoint_TagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::MetricPoint_TagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::MetricPoint_TagsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::MetricPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::MetricPoint, metric_name_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::MetricPoint, timestamp_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::MetricPoint, value_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::MetricPoint, tags_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::MetricPoint, description_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::MetricPoint, units_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::NamedActorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::NamedActorInfo, mcs_namespace_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::NamedActorInfo, name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mcs::rpc::NodeAffinitySchedulingStrategy)},
  { 7, -1, sizeof(::mcs::rpc::PlacementGroupSchedulingStrategy)},
  { 15, -1, sizeof(::mcs::rpc::DefaultSchedulingStrategy)},
  { 20, -1, sizeof(::mcs::rpc::SpreadSchedulingStrategy)},
  { 25, -1, sizeof(::mcs::rpc::SchedulingStrategy)},
  { 35, -1, sizeof(::mcs::rpc::Address)},
  { 44, -1, sizeof(::mcs::rpc::JavaFunctionDescriptor)},
  { 52, -1, sizeof(::mcs::rpc::PythonFunctionDescriptor)},
  { 61, -1, sizeof(::mcs::rpc::CppFunctionDescriptor)},
  { 69, -1, sizeof(::mcs::rpc::FunctionDescriptor)},
  { 78, -1, sizeof(::mcs::rpc::ConcurrencyGroup)},
  { 86, 96, sizeof(::mcs::rpc::McsErrorInfo)},
  { 100, -1, sizeof(::mcs::rpc::OutOfMemoryErrorContext)},
  { 112, -1, sizeof(::mcs::rpc::NodeDiedErrorContext)},
  { 119, -1, sizeof(::mcs::rpc::McsException)},
  { 127, -1, sizeof(::mcs::rpc::ActorDeathCause)},
  { 137, -1, sizeof(::mcs::rpc::RuntimeEnvFailedContext)},
  { 143, -1, sizeof(::mcs::rpc::ActorUnschedulableContext)},
  { 149, -1, sizeof(::mcs::rpc::ActorDiedErrorContext)},
  { 164, 171, sizeof(::mcs::rpc::TaskSpec_RequiredResourcesEntry_DoNotUse)},
  { 173, 180, sizeof(::mcs::rpc::TaskSpec_RequiredPlacementResourcesEntry_DoNotUse)},
  { 182, -1, sizeof(::mcs::rpc::TaskSpec)},
  { 215, 222, sizeof(::mcs::rpc::TaskInfoEntry_RequiredResourcesEntry_DoNotUse)},
  { 224, 241, sizeof(::mcs::rpc::TaskInfoEntry)},
  { 253, -1, sizeof(::mcs::rpc::Bundle_BundleIdentifier)},
  { 260, 267, sizeof(::mcs::rpc::Bundle_UnitResourcesEntry_DoNotUse)},
  { 269, -1, sizeof(::mcs::rpc::Bundle)},
  { 277, -1, sizeof(::mcs::rpc::PlacementGroupSpec)},
  { 292, -1, sizeof(::mcs::rpc::ObjectReference)},
  { 300, -1, sizeof(::mcs::rpc::ObjectReferenceCount)},
  { 311, -1, sizeof(::mcs::rpc::TaskArg)},
  { 320, -1, sizeof(::mcs::rpc::ActorCreationTaskSpec)},
  { 339, -1, sizeof(::mcs::rpc::ActorTaskSpec)},
  { 348, -1, sizeof(::mcs::rpc::Task)},
  { 354, -1, sizeof(::mcs::rpc::ResourceId)},
  { 361, -1, sizeof(::mcs::rpc::ResourceMapEntry)},
  { 368, -1, sizeof(::mcs::rpc::ViewData_Measure)},
  { 382, -1, sizeof(::mcs::rpc::ViewData)},
  { 389, -1, sizeof(::mcs::rpc::ObjectRefInfo)},
  { 403, -1, sizeof(::mcs::rpc::ResourceAllocations_ResourceSlot)},
  { 410, -1, sizeof(::mcs::rpc::ResourceAllocations)},
  { 416, 423, sizeof(::mcs::rpc::CoreWorkerStats_UsedResourcesEntry_DoNotUse)},
  { 425, 432, sizeof(::mcs::rpc::CoreWorkerStats_WebuiDisplayEntry_DoNotUse)},
  { 434, -1, sizeof(::mcs::rpc::CoreWorkerStats)},
  { 460, 467, sizeof(::mcs::rpc::MetricPoint_TagsEntry_DoNotUse)},
  { 469, -1, sizeof(::mcs::rpc::MetricPoint)},
  { 480, -1, sizeof(::mcs::rpc::NamedActorInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_NodeAffinitySchedulingStrategy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_PlacementGroupSchedulingStrategy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_DefaultSchedulingStrategy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_SpreadSchedulingStrategy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_SchedulingStrategy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_Address_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_JavaFunctionDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_PythonFunctionDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_CppFunctionDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_FunctionDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ConcurrencyGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_McsErrorInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_OutOfMemoryErrorContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_NodeDiedErrorContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_McsException_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ActorDeathCause_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_RuntimeEnvFailedContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ActorUnschedulableContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ActorDiedErrorContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_TaskSpec_RequiredResourcesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_TaskSpec_RequiredPlacementResourcesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_TaskSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_TaskInfoEntry_RequiredResourcesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_TaskInfoEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_Bundle_BundleIdentifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_Bundle_UnitResourcesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_Bundle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_PlacementGroupSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ObjectReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ObjectReferenceCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_TaskArg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ActorCreationTaskSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ActorTaskSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_Task_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ResourceId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ResourceMapEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ViewData_Measure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ViewData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ObjectRefInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ResourceAllocations_ResourceSlot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ResourceAllocations_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_CoreWorkerStats_UsedResourcesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_CoreWorkerStats_WebuiDisplayEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_CoreWorkerStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_MetricPoint_TagsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_MetricPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_NamedActorInfo_default_instance_),
};

const char descriptor_table_protodef_common_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014common.proto\022\007mcs.rpc\032\030runtime_env_com"
  "mon.proto\"\?\n\036NodeAffinitySchedulingStrat"
  "egy\022\017\n\007node_id\030\001 \001(\014\022\014\n\004soft\030\002 \001(\010\"\221\001\n P"
  "lacementGroupSchedulingStrategy\022\032\n\022place"
  "ment_group_id\030\001 \001(\014\022$\n\034placement_group_b"
  "undle_index\030\002 \001(\003\022+\n#placement_group_cap"
  "ture_child_tasks\030\003 \001(\010\"\033\n\031DefaultSchedul"
  "ingStrategy\"\032\n\030SpreadSchedulingStrategy\""
  "\357\002\n\022SchedulingStrategy\022I\n\033default_schedu"
  "ling_strategy\030\001 \001(\0132\".mcs.rpc.DefaultSch"
  "edulingStrategyH\000\022X\n#placement_group_sch"
  "eduling_strategy\030\002 \001(\0132).mcs.rpc.Placeme"
  "ntGroupSchedulingStrategyH\000\022G\n\032spread_sc"
  "heduling_strategy\030\003 \001(\0132!.mcs.rpc.Spread"
  "SchedulingStrategyH\000\022T\n!node_affinity_sc"
  "heduling_strategy\030\004 \001(\0132\'.mcs.rpc.NodeAf"
  "finitySchedulingStrategyH\000B\025\n\023scheduling"
  "_strategy\"Q\n\007Address\022\021\n\tmcslet_id\030\001 \001(\014\022"
  "\022\n\nip_address\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\022\021\n\twor"
  "ker_id\030\004 \001(\014\"V\n\026JavaFunctionDescriptor\022\022"
  "\n\nclass_name\030\001 \001(\t\022\025\n\rfunction_name\030\002 \001("
  "\t\022\021\n\tsignature\030\003 \001(\t\"q\n\030PythonFunctionDe"
  "scriptor\022\023\n\013module_name\030\001 \001(\t\022\022\n\nclass_n"
  "ame\030\002 \001(\t\022\025\n\rfunction_name\030\003 \001(\t\022\025\n\rfunc"
  "tion_hash\030\004 \001(\t\"R\n\025CppFunctionDescriptor"
  "\022\025\n\rfunction_name\030\001 \001(\t\022\016\n\006caller\030\002 \001(\t\022"
  "\022\n\nclass_name\030\003 \001(\t\"\374\001\n\022FunctionDescript"
  "or\022C\n\030java_function_descriptor\030\001 \001(\0132\037.m"
  "cs.rpc.JavaFunctionDescriptorH\000\022G\n\032pytho"
  "n_function_descriptor\030\002 \001(\0132!.mcs.rpc.Py"
  "thonFunctionDescriptorH\000\022A\n\027cpp_function"
  "_descriptor\030\003 \001(\0132\036.mcs.rpc.CppFunctionD"
  "escriptorH\000B\025\n\023function_descriptor\"t\n\020Co"
  "ncurrencyGroup\022\014\n\004name\030\001 \001(\t\022\027\n\017max_conc"
  "urrency\030\002 \001(\005\0229\n\024function_descriptors\030\003 "
  "\003(\0132\033.mcs.rpc.FunctionDescriptor\"\356\001\n\014Mcs"
  "ErrorInfo\0224\n\020actor_died_error\030\002 \001(\0132\030.mc"
  "s.rpc.ActorDeathCauseH\000\022J\n\036runtime_env_s"
  "etup_failed_error\030\003 \001(\0132 .mcs.rpc.Runtim"
  "eEnvFailedContextH\000\022\027\n\rerror_message\030\004 \001"
  "(\tH\000\022+\n\nerror_type\030\013 \001(\0162\022.mcs.rpc.Error"
  "TypeH\001\210\001\001B\007\n\005errorB\r\n\013_error_type\"\306\001\n\027Ou"
  "tOfMemoryErrorContext\022\017\n\007task_id\030\001 \001(\014\022\021"
  "\n\ttask_name\030\002 \001(\t\022\027\n\017node_ip_address\030\003 \001"
  "(\t\022\031\n\021memory_used_bytes\030\004 \001(\004\022\032\n\022memory_"
  "total_bytes\030\005 \001(\004\022\035\n\025memory_usage_fracti"
  "on\030\006 \001(\001\022\030\n\020memory_threshold\030\007 \001(\001\"@\n\024No"
  "deDiedErrorContext\022\017\n\007node_id\030\001 \001(\014\022\027\n\017n"
  "ode_ip_address\030\002 \001(\t\"u\n\014McsException\022#\n\010"
  "language\030\001 \001(\0162\021.mcs.rpc.Language\022\034\n\024ser"
  "ialized_exception\030\002 \001(\014\022\"\n\032formatted_exc"
  "eption_string\030\003 \001(\t\"\263\002\n\017ActorDeathCause\022"
  ">\n\035creation_task_failure_context\030\001 \001(\0132\025"
  ".mcs.rpc.McsExceptionH\000\022F\n\032runtime_env_f"
  "ailed_context\030\002 \001(\0132 .mcs.rpc.RuntimeEnv"
  "FailedContextH\000\022B\n\030actor_died_error_cont"
  "ext\030\003 \001(\0132\036.mcs.rpc.ActorDiedErrorContex"
  "tH\000\022I\n\033actor_unschedulable_context\030\004 \001(\013"
  "2\".mcs.rpc.ActorUnschedulableContextH\000B\t"
  "\n\007context\"0\n\027RuntimeEnvFailedContext\022\025\n\r"
  "error_message\030\001 \001(\t\"2\n\031ActorUnschedulabl"
  "eContext\022\025\n\rerror_message\030\001 \001(\t\"\342\001\n\025Acto"
  "rDiedErrorContext\022\025\n\rerror_message\030\001 \001(\t"
  "\022\020\n\010owner_id\030\002 \001(\014\022\030\n\020owner_ip_address\030\003"
  " \001(\t\022\027\n\017node_ip_address\030\004 \001(\t\022\013\n\003pid\030\005 \001"
  "(\r\022\014\n\004name\030\006 \001(\t\022\025\n\rmcs_namespace\030\007 \001(\t\022"
  "\022\n\nclass_name\030\010 \001(\t\022\020\n\010actor_id\030\t \001(\014\022\025\n"
  "\rnever_started\030\n \001(\010\"\345\010\n\010TaskSpec\022\037\n\004typ"
  "e\030\001 \001(\0162\021.mcs.rpc.TaskType\022\014\n\004name\030\002 \001(\t"
  "\022#\n\010language\030\003 \001(\0162\021.mcs.rpc.Language\0228\n"
  "\023function_descriptor\030\004 \001(\0132\033.mcs.rpc.Fun"
  "ctionDescriptor\022\016\n\006job_id\030\005 \001(\014\022\017\n\007task_"
  "id\030\006 \001(\014\022\026\n\016parent_task_id\030\007 \001(\014\022\026\n\016pare"
  "nt_counter\030\010 \001(\004\022\021\n\tcaller_id\030\t \001(\014\022(\n\016c"
  "aller_address\030\n \001(\0132\020.mcs.rpc.Address\022\036\n"
  "\004args\030\013 \003(\0132\020.mcs.rpc.TaskArg\022\023\n\013num_ret"
  "urns\030\014 \001(\004\022D\n\022required_resources\030\r \003(\0132("
  ".mcs.rpc.TaskSpec.RequiredResourcesEntry"
  "\022W\n\034required_placement_resources\030\016 \003(\01321"
  ".mcs.rpc.TaskSpec.RequiredPlacementResou"
  "rcesEntry\022@\n\030actor_creation_task_spec\030\017 "
  "\001(\0132\036.mcs.rpc.ActorCreationTaskSpec\022/\n\017a"
  "ctor_task_spec\030\020 \001(\0132\026.mcs.rpc.ActorTask"
  "Spec\022\023\n\013max_retries\030\021 \001(\005\022\026\n\016skip_execut"
  "ion\030\025 \001(\010\022\033\n\023debugger_breakpoint\030\026 \001(\014\0221"
  "\n\020runtime_env_info\030\027 \001(\0132\027.mcs.rpc.Runti"
  "meEnvInfo\022\036\n\026concurrency_group_name\030\030 \001("
  "\t\022\030\n\020retry_exceptions\030\031 \001(\010\022,\n$serialize"
  "d_retry_exception_allowlist\030\032 \001(\014\022\r\n\005dep"
  "th\030\033 \001(\003\0228\n\023scheduling_strategy\030\034 \001(\0132\033."
  "mcs.rpc.SchedulingStrategy\022\026\n\016attempt_nu"
  "mber\030\035 \001(\004\022\027\n\017returns_dynamic\030\036 \001(\010\022\032\n\022d"
  "ynamic_return_ids\030\037 \003(\014\0328\n\026RequiredResou"
  "rcesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028"
  "\001\032A\n\037RequiredPlacementResourcesEntry\022\013\n\003"
  "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\"\345\003\n\rTaskInf"
  "oEntry\022\037\n\004type\030\001 \001(\0162\021.mcs.rpc.TaskType\022"
  "\014\n\004name\030\002 \001(\t\022#\n\010language\030\003 \001(\0162\021.mcs.rp"
  "c.Language\022\032\n\022func_or_class_name\030\004 \001(\t\022-"
  "\n\020scheduling_state\030\005 \001(\0162\023.mcs.rpc.TaskS"
  "tatus\022\016\n\006job_id\030\006 \001(\014\022\017\n\007task_id\030\007 \001(\014\022\026"
  "\n\016parent_task_id\030\010 \001(\014\022I\n\022required_resou"
  "rces\030\r \003(\0132-.mcs.rpc.TaskInfoEntry.Requi"
  "redResourcesEntry\0221\n\020runtime_env_info\030\027 "
  "\001(\0132\027.mcs.rpc.RuntimeEnvInfo\022\024\n\007node_id\030"
  "\030 \001(\014H\000\210\001\001\022\025\n\010actor_id\030\031 \001(\014H\001\210\001\001\0328\n\026Req"
  "uiredResourcesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
  "e\030\002 \001(\001:\0028\001B\n\n\010_node_idB\013\n\t_actor_id\"\206\002\n"
  "\006Bundle\0223\n\tbundle_id\030\001 \001(\0132 .mcs.rpc.Bun"
  "dle.BundleIdentifier\022:\n\016unit_resources\030\002"
  " \003(\0132\".mcs.rpc.Bundle.UnitResourcesEntry"
  "\022\017\n\007node_id\030\003 \001(\014\032D\n\020BundleIdentifier\022\032\n"
  "\022placement_group_id\030\001 \001(\014\022\024\n\014bundle_inde"
  "x\030\002 \001(\005\0324\n\022UnitResourcesEntry\022\013\n\003key\030\001 \001"
  "(\t\022\r\n\005value\030\002 \001(\001:\0028\001\"\256\002\n\022PlacementGroup"
  "Spec\022\032\n\022placement_group_id\030\001 \001(\014\022\014\n\004name"
  "\030\002 \001(\t\022 \n\007bundles\030\003 \003(\0132\017.mcs.rpc.Bundle"
  "\022,\n\010strategy\030\004 \001(\0162\032.mcs.rpc.PlacementSt"
  "rategy\022\026\n\016creator_job_id\030\005 \001(\014\022\030\n\020creato"
  "r_actor_id\030\006 \001(\014\022\030\n\020creator_job_dead\030\007 \001"
  "(\010\022\032\n\022creator_actor_dead\030\010 \001(\010\022\023\n\013is_det"
  "ached\030\t \001(\010\022!\n\031max_cpu_fraction_per_node"
  "\030\n \001(\001\"`\n\017ObjectReference\022\021\n\tobject_id\030\001"
  " \001(\014\022\'\n\rowner_address\030\002 \001(\0132\020.mcs.rpc.Ad"
  "dress\022\021\n\tcall_site\030\003 \001(\t\"\351\001\n\024ObjectRefer"
  "enceCount\022+\n\treference\030\001 \001(\0132\030.mcs.rpc.O"
  "bjectReference\022\025\n\rhas_local_ref\030\002 \001(\010\022#\n"
  "\tborrowers\030\003 \003(\0132\020.mcs.rpc.Address\0223\n\021st"
  "ored_in_objects\030\004 \003(\0132\030.mcs.rpc.ObjectRe"
  "ference\022!\n\031contained_in_borrowed_ids\030\005 \003"
  "(\014\022\020\n\010contains\030\006 \003(\014\"\216\001\n\007TaskArg\022,\n\nobje"
  "ct_ref\030\001 \001(\0132\030.mcs.rpc.ObjectReference\022\014"
  "\n\004data\030\002 \001(\014\022\020\n\010metadata\030\003 \001(\014\0225\n\023nested"
  "_inlined_refs\030\004 \003(\0132\030.mcs.rpc.ObjectRefe"
  "rence\"\217\003\n\025ActorCreationTaskSpec\022\020\n\010actor"
  "_id\030\002 \001(\014\022\032\n\022max_actor_restarts\030\003 \001(\003\022\030\n"
  "\020max_task_retries\030\004 \001(\003\022\036\n\026dynamic_worke"
  "r_options\030\005 \003(\t\022\027\n\017max_concurrency\030\006 \001(\005"
  "\022\023\n\013is_detached\030\007 \001(\010\022\014\n\004name\030\010 \001(\t\022\025\n\rm"
  "cs_namespace\030\t \001(\t\022\022\n\nis_asyncio\030\n \001(\010\022\026"
  "\n\016extension_data\030\013 \001(\t\022\037\n\027serialized_act"
  "or_handle\030\014 \001(\014\0225\n\022concurrency_groups\030\r "
  "\003(\0132\031.mcs.rpc.ConcurrencyGroup\022\034\n\024execut"
  "e_out_of_order\030\016 \001(\010\022\031\n\021max_pending_call"
  "s\030\017 \001(\005\"\215\001\n\rActorTaskSpec\022\020\n\010actor_id\030\002 "
  "\001(\014\022&\n\036actor_creation_dummy_object_id\030\004 "
  "\001(\014\022\025\n\ractor_counter\030\005 \001(\004\022+\n#previous_a"
  "ctor_task_dummy_object_id\030\007 \001(\014\",\n\004Task\022"
  "$\n\ttask_spec\030\001 \001(\0132\021.mcs.rpc.TaskSpec\"-\n"
  "\nResourceId\022\r\n\005index\030\001 \001(\003\022\020\n\010quantity\030\002"
  " \001(\001\"K\n\020ResourceMapEntry\022\014\n\004name\030\001 \001(\t\022)"
  "\n\014resource_ids\030\002 \003(\0132\023.mcs.rpc.ResourceI"
  "d\"\304\002\n\010ViewData\022\021\n\tview_name\030\001 \001(\t\022+\n\010mea"
  "sures\030\002 \003(\0132\031.mcs.rpc.ViewData.Measure\032\367"
  "\001\n\007Measure\022\014\n\004tags\030\001 \001(\t\022\021\n\tint_value\030\002 "
  "\001(\003\022\024\n\014double_value\030\003 \001(\001\022\030\n\020distributio"
  "n_min\030\004 \001(\001\022\031\n\021distribution_mean\030\005 \001(\001\022\030"
  "\n\020distribution_max\030\006 \001(\001\022\032\n\022distribution"
  "_count\030\007 \001(\001\022&\n\036distribution_bucket_boun"
  "daries\030\010 \003(\001\022\"\n\032distribution_bucket_coun"
  "ts\030\t \003(\001\"\375\001\n\rObjectRefInfo\022\021\n\tobject_id\030"
  "\001 \001(\014\022\021\n\tcall_site\030\002 \001(\t\022\023\n\013object_size\030"
  "\003 \001(\003\022\027\n\017local_ref_count\030\004 \001(\003\022 \n\030submit"
  "ted_task_ref_count\030\005 \001(\003\022\032\n\022contained_in"
  "_owned\030\006 \003(\014\022\030\n\020pinned_in_memory\030\007 \001(\010\022("
  "\n\013task_status\030\010 \001(\0162\023.mcs.rpc.TaskStatus"
  "\022\026\n\016attempt_number\030\t \001(\004\"\212\001\n\023ResourceAll"
  "ocations\022A\n\016resource_slots\030\001 \003(\0132).mcs.r"
  "pc.ResourceAllocations.ResourceSlot\0320\n\014R"
  "esourceSlot\022\014\n\004slot\030\001 \001(\003\022\022\n\nallocation\030"
  "\002 \001(\001\"\221\006\n\017CoreWorkerStats\022\031\n\021current_tas"
  "k_desc\030\001 \001(\t\022\031\n\021num_pending_tasks\030\002 \001(\005\022"
  " \n\030num_object_refs_in_scope\030\003 \001(\005\022\022\n\nip_"
  "address\030\007 \001(\t\022\014\n\004port\030\010 \001(\003\022\020\n\010actor_id\030"
  "\t \001(\014\022C\n\016used_resources\030\n \003(\0132+.mcs.rpc."
  "CoreWorkerStats.UsedResourcesEntry\022A\n\rwe"
  "bui_display\030\013 \003(\0132*.mcs.rpc.CoreWorkerSt"
  "ats.WebuiDisplayEntry\022\025\n\rnum_in_plasma\030\014"
  " \001(\005\022\031\n\021num_local_objects\030\r \001(\005\022 \n\030used_"
  "object_store_memory\030\016 \001(\003\022\031\n\021task_queue_"
  "length\030\017 \001(\005\022\032\n\022num_executed_tasks\030\020 \001(\005"
  "\022\023\n\013actor_title\030\021 \001(\t\022+\n\013object_refs\030\022 \003"
  "(\0132\026.mcs.rpc.ObjectRefInfo\022\016\n\006job_id\030\023 \001"
  "(\014\022\021\n\tworker_id\030\024 \001(\014\022#\n\010language\030\025 \001(\0162"
  "\021.mcs.rpc.Language\022\013\n\003pid\030\026 \001(\r\022(\n\013worke"
  "r_type\030\027 \001(\0162\023.mcs.rpc.WorkerType\022\025\n\robj"
  "ects_total\030\030 \001(\003\032R\n\022UsedResourcesEntry\022\013"
  "\n\003key\030\001 \001(\t\022+\n\005value\030\002 \001(\0132\034.mcs.rpc.Res"
  "ourceAllocations:\0028\001\0323\n\021WebuiDisplayEntr"
  "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\303\001\n\013Me"
  "tricPoint\022\023\n\013metric_name\030\001 \001(\t\022\021\n\ttimest"
  "amp\030\002 \001(\003\022\r\n\005value\030\003 \001(\001\022,\n\004tags\030\004 \003(\0132\036"
  ".mcs.rpc.MetricPoint.TagsEntry\022\023\n\013descri"
  "ption\030\005 \001(\t\022\r\n\005units\030\006 \001(\t\032+\n\tTagsEntry\022"
  "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"5\n\016Named"
  "ActorInfo\022\025\n\rmcs_namespace\030\001 \001(\t\022\014\n\004name"
  "\030\002 \001(\t*)\n\010Language\022\n\n\006PYTHON\020\000\022\010\n\004JAVA\020\001"
  "\022\007\n\003CPP\020\002*J\n\nWorkerType\022\n\n\006WORKER\020\000\022\n\n\006D"
  "RIVER\020\001\022\020\n\014SPILL_WORKER\020\002\022\022\n\016RESTORE_WOR"
  "KER\020\003*U\n\010TaskType\022\017\n\013NORMAL_TASK\020\000\022\027\n\023AC"
  "TOR_CREATION_TASK\020\001\022\016\n\nACTOR_TASK\020\002\022\017\n\013D"
  "RIVER_TASK\020\003*\204\005\n\tErrorType\022\017\n\013WORKER_DIE"
  "D\020\000\022\016\n\nACTOR_DIED\020\001\022\034\n\030OBJECT_UNRECONSTR"
  "UCTABLE\020\002\022\034\n\030TASK_EXECUTION_EXCEPTION\020\003\022"
  "\024\n\020OBJECT_IN_PLASMA\020\004\022\022\n\016TASK_CANCELLED\020"
  "\005\022\031\n\025ACTOR_CREATION_FAILED\020\006\022\034\n\030RUNTIME_"
  "ENV_SETUP_FAILED\020\007\022\017\n\013OBJECT_LOST\020\010\022\016\n\nO"
  "WNER_DIED\020\t\022\022\n\016OBJECT_DELETED\020\n\022 \n\034DEPEN"
  "DENCY_RESOLUTION_FAILED\020\013\0222\n.OBJECT_UNRE"
  "CONSTRUCTABLE_MAX_ATTEMPTS_EXCEEDED\020\014\022,\n"
  "(OBJECT_UNRECONSTRUCTABLE_LINEAGE_EVICTE"
  "D\020\r\022\032\n\026OBJECT_FETCH_TIMED_OUT\020\016\022\025\n\021LOCAL"
  "_MCSLET_DIED\020\017\022 \n\034TASK_PLACEMENT_GROUP_R"
  "EMOVED\020\020\022!\n\035ACTOR_PLACEMENT_GROUP_REMOVE"
  "D\020\021\022\034\n\030TASK_UNSCHEDULABLE_ERROR\020\022\022\035\n\031ACT"
  "OR_UNSCHEDULABLE_ERROR\020\023\022\025\n\021OUT_OF_DISK_"
  "ERROR\020\024\022\020\n\014OBJECT_FREED\020\025\022\021\n\rOUT_OF_MEMO"
  "RY\020\026\022\r\n\tNODE_DIED\020\027*\364\001\n\nTaskStatus\022\007\n\003NI"
  "L\020\000\022\026\n\022PENDING_ARGS_AVAIL\020\001\022\033\n\027PENDING_N"
  "ODE_ASSIGNMENT\020\002\022\037\n\033PENDING_OBJ_STORE_ME"
  "M_AVAIL\020\003\022\026\n\022PENDING_ARGS_FETCH\020\004\022\027\n\023SUB"
  "MITTED_TO_WORKER\020\005\022\013\n\007RUNNING\020\006\022\026\n\022RUNNI"
  "NG_IN_MCS_GET\020\007\022\027\n\023RUNNING_IN_MCS_WAIT\020\010"
  "\022\014\n\010FINISHED\020\t\022\n\n\006FAILED\020\n*|\n\016WorkerExit"
  "Type\022\020\n\014SYSTEM_ERROR\020\000\022\030\n\024INTENDED_SYSTE"
  "M_EXIT\020\001\022\016\n\nUSER_ERROR\020\002\022\026\n\022INTENDED_USE"
  "R_EXIT\020\003\022\026\n\022NODE_OUT_OF_MEMORY\020\004*M\n\021Plac"
  "ementStrategy\022\010\n\004PACK\020\000\022\n\n\006SPREAD\020\001\022\017\n\013S"
  "TRICT_PACK\020\002\022\021\n\rSTRICT_SPREAD\020\003B\035\n\030io.mc"
  "s.runtime.generated\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2eproto_deps[1] = {
  &::descriptor_table_runtime_5fenv_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto = {
  false, false, 9190, descriptor_table_protodef_common_2eproto, "common.proto", 
  &descriptor_table_common_2eproto_once, descriptor_table_common_2eproto_deps, 1, 47,
  schemas, file_default_instances, TableStruct_common_2eproto::offsets,
  file_level_metadata_common_2eproto, file_level_enum_descriptors_common_2eproto, file_level_service_descriptors_common_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_common_2eproto_getter() {
  return &descriptor_table_common_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_common_2eproto(&descriptor_table_common_2eproto);
namespace mcs {
namespace rpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Language_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[0];
}
bool Language_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[1];
}
bool WorkerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[2];
}
bool TaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[3];
}
bool ErrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[4];
}
bool TaskStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkerExitType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[5];
}
bool WorkerExitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlacementStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[6];
}
bool PlacementStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class NodeAffinitySchedulingStrategy::_Internal {
 public:
};

NodeAffinitySchedulingStrategy::NodeAffinitySchedulingStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.NodeAffinitySchedulingStrategy)
}
NodeAffinitySchedulingStrategy::NodeAffinitySchedulingStrategy(const NodeAffinitySchedulingStrategy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(), 
      GetArenaForAllocation());
  }
  soft_ = from.soft_;
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.NodeAffinitySchedulingStrategy)
}

inline void NodeAffinitySchedulingStrategy::SharedCtor() {
node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
soft_ = false;
}

NodeAffinitySchedulingStrategy::~NodeAffinitySchedulingStrategy() {
  // @@protoc_insertion_point(destructor:mcs.rpc.NodeAffinitySchedulingStrategy)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeAffinitySchedulingStrategy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeAffinitySchedulingStrategy::ArenaDtor(void* object) {
  NodeAffinitySchedulingStrategy* _this = reinterpret_cast< NodeAffinitySchedulingStrategy* >(object);
  (void)_this;
}
void NodeAffinitySchedulingStrategy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeAffinitySchedulingStrategy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeAffinitySchedulingStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.NodeAffinitySchedulingStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmpty();
  soft_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeAffinitySchedulingStrategy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool soft = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          soft_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeAffinitySchedulingStrategy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.NodeAffinitySchedulingStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes node_id = 1;
  if (!this->_internal_node_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_node_id(), target);
  }

  // bool soft = 2;
  if (this->_internal_soft() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_soft(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.NodeAffinitySchedulingStrategy)
  return target;
}

size_t NodeAffinitySchedulingStrategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.NodeAffinitySchedulingStrategy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes node_id = 1;
  if (!this->_internal_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_node_id());
  }

  // bool soft = 2;
  if (this->_internal_soft() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeAffinitySchedulingStrategy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NodeAffinitySchedulingStrategy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeAffinitySchedulingStrategy::GetClassData() const { return &_class_data_; }

void NodeAffinitySchedulingStrategy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NodeAffinitySchedulingStrategy *>(to)->MergeFrom(
      static_cast<const NodeAffinitySchedulingStrategy &>(from));
}


void NodeAffinitySchedulingStrategy::MergeFrom(const NodeAffinitySchedulingStrategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.NodeAffinitySchedulingStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_id().empty()) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from._internal_soft() != 0) {
    _internal_set_soft(from._internal_soft());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeAffinitySchedulingStrategy::CopyFrom(const NodeAffinitySchedulingStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.NodeAffinitySchedulingStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeAffinitySchedulingStrategy::IsInitialized() const {
  return true;
}

void NodeAffinitySchedulingStrategy::InternalSwap(NodeAffinitySchedulingStrategy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_id_, GetArenaForAllocation(),
      &other->node_id_, other->GetArenaForAllocation()
  );
  swap(soft_, other->soft_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeAffinitySchedulingStrategy::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[0]);
}

// ===================================================================

class PlacementGroupSchedulingStrategy::_Internal {
 public:
};

PlacementGroupSchedulingStrategy::PlacementGroupSchedulingStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.PlacementGroupSchedulingStrategy)
}
PlacementGroupSchedulingStrategy::PlacementGroupSchedulingStrategy(const PlacementGroupSchedulingStrategy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  placement_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_placement_group_id().empty()) {
    placement_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_placement_group_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&placement_group_bundle_index_, &from.placement_group_bundle_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&placement_group_capture_child_tasks_) -
    reinterpret_cast<char*>(&placement_group_bundle_index_)) + sizeof(placement_group_capture_child_tasks_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.PlacementGroupSchedulingStrategy)
}

inline void PlacementGroupSchedulingStrategy::SharedCtor() {
placement_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&placement_group_bundle_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&placement_group_capture_child_tasks_) -
    reinterpret_cast<char*>(&placement_group_bundle_index_)) + sizeof(placement_group_capture_child_tasks_));
}

PlacementGroupSchedulingStrategy::~PlacementGroupSchedulingStrategy() {
  // @@protoc_insertion_point(destructor:mcs.rpc.PlacementGroupSchedulingStrategy)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlacementGroupSchedulingStrategy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  placement_group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlacementGroupSchedulingStrategy::ArenaDtor(void* object) {
  PlacementGroupSchedulingStrategy* _this = reinterpret_cast< PlacementGroupSchedulingStrategy* >(object);
  (void)_this;
}
void PlacementGroupSchedulingStrategy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlacementGroupSchedulingStrategy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlacementGroupSchedulingStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.PlacementGroupSchedulingStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  placement_group_id_.ClearToEmpty();
  ::memset(&placement_group_bundle_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&placement_group_capture_child_tasks_) -
      reinterpret_cast<char*>(&placement_group_bundle_index_)) + sizeof(placement_group_capture_child_tasks_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlacementGroupSchedulingStrategy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes placement_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_placement_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 placement_group_bundle_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          placement_group_bundle_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool placement_group_capture_child_tasks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          placement_group_capture_child_tasks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlacementGroupSchedulingStrategy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.PlacementGroupSchedulingStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes placement_group_id = 1;
  if (!this->_internal_placement_group_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_placement_group_id(), target);
  }

  // int64 placement_group_bundle_index = 2;
  if (this->_internal_placement_group_bundle_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_placement_group_bundle_index(), target);
  }

  // bool placement_group_capture_child_tasks = 3;
  if (this->_internal_placement_group_capture_child_tasks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_placement_group_capture_child_tasks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.PlacementGroupSchedulingStrategy)
  return target;
}

size_t PlacementGroupSchedulingStrategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.PlacementGroupSchedulingStrategy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes placement_group_id = 1;
  if (!this->_internal_placement_group_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_placement_group_id());
  }

  // int64 placement_group_bundle_index = 2;
  if (this->_internal_placement_group_bundle_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_placement_group_bundle_index());
  }

  // bool placement_group_capture_child_tasks = 3;
  if (this->_internal_placement_group_capture_child_tasks() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlacementGroupSchedulingStrategy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlacementGroupSchedulingStrategy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlacementGroupSchedulingStrategy::GetClassData() const { return &_class_data_; }

void PlacementGroupSchedulingStrategy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PlacementGroupSchedulingStrategy *>(to)->MergeFrom(
      static_cast<const PlacementGroupSchedulingStrategy &>(from));
}


void PlacementGroupSchedulingStrategy::MergeFrom(const PlacementGroupSchedulingStrategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.PlacementGroupSchedulingStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_placement_group_id().empty()) {
    _internal_set_placement_group_id(from._internal_placement_group_id());
  }
  if (from._internal_placement_group_bundle_index() != 0) {
    _internal_set_placement_group_bundle_index(from._internal_placement_group_bundle_index());
  }
  if (from._internal_placement_group_capture_child_tasks() != 0) {
    _internal_set_placement_group_capture_child_tasks(from._internal_placement_group_capture_child_tasks());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlacementGroupSchedulingStrategy::CopyFrom(const PlacementGroupSchedulingStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.PlacementGroupSchedulingStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlacementGroupSchedulingStrategy::IsInitialized() const {
  return true;
}

void PlacementGroupSchedulingStrategy::InternalSwap(PlacementGroupSchedulingStrategy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &placement_group_id_, GetArenaForAllocation(),
      &other->placement_group_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlacementGroupSchedulingStrategy, placement_group_capture_child_tasks_)
      + sizeof(PlacementGroupSchedulingStrategy::placement_group_capture_child_tasks_)
      - PROTOBUF_FIELD_OFFSET(PlacementGroupSchedulingStrategy, placement_group_bundle_index_)>(
          reinterpret_cast<char*>(&placement_group_bundle_index_),
          reinterpret_cast<char*>(&other->placement_group_bundle_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlacementGroupSchedulingStrategy::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[1]);
}

// ===================================================================

class DefaultSchedulingStrategy::_Internal {
 public:
};

DefaultSchedulingStrategy::DefaultSchedulingStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.DefaultSchedulingStrategy)
}
DefaultSchedulingStrategy::DefaultSchedulingStrategy(const DefaultSchedulingStrategy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.DefaultSchedulingStrategy)
}

inline void DefaultSchedulingStrategy::SharedCtor() {
}

DefaultSchedulingStrategy::~DefaultSchedulingStrategy() {
  // @@protoc_insertion_point(destructor:mcs.rpc.DefaultSchedulingStrategy)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DefaultSchedulingStrategy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DefaultSchedulingStrategy::ArenaDtor(void* object) {
  DefaultSchedulingStrategy* _this = reinterpret_cast< DefaultSchedulingStrategy* >(object);
  (void)_this;
}
void DefaultSchedulingStrategy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DefaultSchedulingStrategy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DefaultSchedulingStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.DefaultSchedulingStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DefaultSchedulingStrategy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DefaultSchedulingStrategy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.DefaultSchedulingStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.DefaultSchedulingStrategy)
  return target;
}

size_t DefaultSchedulingStrategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.DefaultSchedulingStrategy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DefaultSchedulingStrategy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DefaultSchedulingStrategy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DefaultSchedulingStrategy::GetClassData() const { return &_class_data_; }

void DefaultSchedulingStrategy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DefaultSchedulingStrategy *>(to)->MergeFrom(
      static_cast<const DefaultSchedulingStrategy &>(from));
}


void DefaultSchedulingStrategy::MergeFrom(const DefaultSchedulingStrategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.DefaultSchedulingStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DefaultSchedulingStrategy::CopyFrom(const DefaultSchedulingStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.DefaultSchedulingStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultSchedulingStrategy::IsInitialized() const {
  return true;
}

void DefaultSchedulingStrategy::InternalSwap(DefaultSchedulingStrategy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DefaultSchedulingStrategy::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[2]);
}

// ===================================================================

class SpreadSchedulingStrategy::_Internal {
 public:
};

SpreadSchedulingStrategy::SpreadSchedulingStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.SpreadSchedulingStrategy)
}
SpreadSchedulingStrategy::SpreadSchedulingStrategy(const SpreadSchedulingStrategy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.SpreadSchedulingStrategy)
}

inline void SpreadSchedulingStrategy::SharedCtor() {
}

SpreadSchedulingStrategy::~SpreadSchedulingStrategy() {
  // @@protoc_insertion_point(destructor:mcs.rpc.SpreadSchedulingStrategy)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpreadSchedulingStrategy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpreadSchedulingStrategy::ArenaDtor(void* object) {
  SpreadSchedulingStrategy* _this = reinterpret_cast< SpreadSchedulingStrategy* >(object);
  (void)_this;
}
void SpreadSchedulingStrategy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpreadSchedulingStrategy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpreadSchedulingStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.SpreadSchedulingStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpreadSchedulingStrategy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpreadSchedulingStrategy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.SpreadSchedulingStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.SpreadSchedulingStrategy)
  return target;
}

size_t SpreadSchedulingStrategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.SpreadSchedulingStrategy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpreadSchedulingStrategy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpreadSchedulingStrategy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpreadSchedulingStrategy::GetClassData() const { return &_class_data_; }

void SpreadSchedulingStrategy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SpreadSchedulingStrategy *>(to)->MergeFrom(
      static_cast<const SpreadSchedulingStrategy &>(from));
}


void SpreadSchedulingStrategy::MergeFrom(const SpreadSchedulingStrategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.SpreadSchedulingStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpreadSchedulingStrategy::CopyFrom(const SpreadSchedulingStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.SpreadSchedulingStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpreadSchedulingStrategy::IsInitialized() const {
  return true;
}

void SpreadSchedulingStrategy::InternalSwap(SpreadSchedulingStrategy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpreadSchedulingStrategy::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[3]);
}

// ===================================================================

class SchedulingStrategy::_Internal {
 public:
  static const ::mcs::rpc::DefaultSchedulingStrategy& default_scheduling_strategy(const SchedulingStrategy* msg);
  static const ::mcs::rpc::PlacementGroupSchedulingStrategy& placement_group_scheduling_strategy(const SchedulingStrategy* msg);
  static const ::mcs::rpc::SpreadSchedulingStrategy& spread_scheduling_strategy(const SchedulingStrategy* msg);
  static const ::mcs::rpc::NodeAffinitySchedulingStrategy& node_affinity_scheduling_strategy(const SchedulingStrategy* msg);
};

const ::mcs::rpc::DefaultSchedulingStrategy&
SchedulingStrategy::_Internal::default_scheduling_strategy(const SchedulingStrategy* msg) {
  return *msg->scheduling_strategy_.default_scheduling_strategy_;
}
const ::mcs::rpc::PlacementGroupSchedulingStrategy&
SchedulingStrategy::_Internal::placement_group_scheduling_strategy(const SchedulingStrategy* msg) {
  return *msg->scheduling_strategy_.placement_group_scheduling_strategy_;
}
const ::mcs::rpc::SpreadSchedulingStrategy&
SchedulingStrategy::_Internal::spread_scheduling_strategy(const SchedulingStrategy* msg) {
  return *msg->scheduling_strategy_.spread_scheduling_strategy_;
}
const ::mcs::rpc::NodeAffinitySchedulingStrategy&
SchedulingStrategy::_Internal::node_affinity_scheduling_strategy(const SchedulingStrategy* msg) {
  return *msg->scheduling_strategy_.node_affinity_scheduling_strategy_;
}
void SchedulingStrategy::set_allocated_default_scheduling_strategy(::mcs::rpc::DefaultSchedulingStrategy* default_scheduling_strategy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_scheduling_strategy();
  if (default_scheduling_strategy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mcs::rpc::DefaultSchedulingStrategy>::GetOwningArena(default_scheduling_strategy);
    if (message_arena != submessage_arena) {
      default_scheduling_strategy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_scheduling_strategy, submessage_arena);
    }
    set_has_default_scheduling_strategy();
    scheduling_strategy_.default_scheduling_strategy_ = default_scheduling_strategy;
  }
  // @@protoc_insertion_point(field_set_allocated:mcs.rpc.SchedulingStrategy.default_scheduling_strategy)
}
void SchedulingStrategy::set_allocated_placement_group_scheduling_strategy(::mcs::rpc::PlacementGroupSchedulingStrategy* placement_group_scheduling_strategy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_scheduling_strategy();
  if (placement_group_scheduling_strategy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mcs::rpc::PlacementGroupSchedulingStrategy>::GetOwningArena(placement_group_scheduling_strategy);
    if (message_arena != submessage_arena) {
      placement_group_scheduling_strategy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, placement_group_scheduling_strategy, submessage_arena);
    }
    set_has_placement_group_scheduling_strategy();
    scheduling_strategy_.placement_group_scheduling_strategy_ = placement_group_scheduling_strategy;
  }
  // @@protoc_insertion_point(field_set_allocated:mcs.rpc.SchedulingStrategy.placement_group_scheduling_strategy)
}
void SchedulingStrategy::set_allocated_spread_scheduling_strategy(::mcs::rpc::SpreadSchedulingStrategy* spread_scheduling_strategy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_scheduling_strategy();
  if (spread_scheduling_strategy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mcs::rpc::SpreadSchedulingStrategy>::GetOwningArena(spread_scheduling_strategy);
    if (message_arena != submessage_arena) {
      spread_scheduling_strategy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spread_scheduling_strategy, submessage_arena);
    }
    set_has_spread_scheduling_strategy();
    scheduling_strategy_.spread_scheduling_strategy_ = spread_scheduling_strategy;
  }
  // @@protoc_insertion_point(field_set_allocated:mcs.rpc.SchedulingStrategy.spread_scheduling_strategy)
}
void SchedulingStrategy::set_allocated_node_affinity_scheduling_strategy(::mcs::rpc::NodeAffinitySchedulingStrategy* node_affinity_scheduling_strategy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_scheduling_strategy();
  if (node_affinity_scheduling_strategy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mcs::rpc::NodeAffinitySchedulingStrategy>::GetOwningArena(node_affinity_scheduling_strategy);
    if (message_arena != submessage_arena) {
      node_affinity_scheduling_strategy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_affinity_scheduling_strategy, submessage_arena);
    }
    set_has_node_affinity_scheduling_strategy();
    scheduling_strategy_.node_affinity_scheduling_strategy_ = node_affinity_scheduling_strategy;
  }
  // @@protoc_insertion_point(field_set_allocated:mcs.rpc.SchedulingStrategy.node_affinity_scheduling_strategy)
}
SchedulingStrategy::SchedulingStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.SchedulingStrategy)
}
SchedulingStrategy::SchedulingStrategy(const SchedulingStrategy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_scheduling_strategy();
  switch (from.scheduling_strategy_case()) {
    case kDefaultSchedulingStrategy: {
      _internal_mutable_default_scheduling_strategy()->::mcs::rpc::DefaultSchedulingStrategy::MergeFrom(from._internal_default_scheduling_strategy());
      break;
    }
    case kPlacementGroupSchedulingStrategy: {
      _internal_mutable_placement_group_scheduling_strategy()->::mcs::rpc::PlacementGroupSchedulingStrategy::MergeFrom(from._internal_placement_group_scheduling_strategy());
      break;
    }
    case kSpreadSchedulingStrategy: {
      _internal_mutable_spread_scheduling_strategy()->::mcs::rpc::SpreadSchedulingStrategy::MergeFrom(from._internal_spread_scheduling_strategy());
      break;
    }
    case kNodeAffinitySchedulingStrategy: {
      _internal_mutable_node_affinity_scheduling_strategy()->::mcs::rpc::NodeAffinitySchedulingStrategy::MergeFrom(from._internal_node_affinity_scheduling_strategy());
      break;
    }
    case SCHEDULING_STRATEGY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.SchedulingStrategy)
}

inline void SchedulingStrategy::SharedCtor() {
clear_has_scheduling_strategy();
}

SchedulingStrategy::~SchedulingStrategy() {
  // @@protoc_insertion_point(destructor:mcs.rpc.SchedulingStrategy)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SchedulingStrategy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_scheduling_strategy()) {
    clear_scheduling_strategy();
  }
}

void SchedulingStrategy::ArenaDtor(void* object) {
  SchedulingStrategy* _this = reinterpret_cast< SchedulingStrategy* >(object);
  (void)_this;
}
void SchedulingStrategy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchedulingStrategy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchedulingStrategy::clear_scheduling_strategy() {
// @@protoc_insertion_point(one_of_clear_start:mcs.rpc.SchedulingStrategy)
  switch (scheduling_strategy_case()) {
    case kDefaultSchedulingStrategy: {
      if (GetArenaForAllocation() == nullptr) {
        delete scheduling_strategy_.default_scheduling_strategy_;
      }
      break;
    }
    case kPlacementGroupSchedulingStrategy: {
      if (GetArenaForAllocation() == nullptr) {
        delete scheduling_strategy_.placement_group_scheduling_strategy_;
      }
      break;
    }
    case kSpreadSchedulingStrategy: {
      if (GetArenaForAllocation() == nullptr) {
        delete scheduling_strategy_.spread_scheduling_strategy_;
      }
      break;
    }
    case kNodeAffinitySchedulingStrategy: {
      if (GetArenaForAllocation() == nullptr) {
        delete scheduling_strategy_.node_affinity_scheduling_strategy_;
      }
      break;
    }
    case SCHEDULING_STRATEGY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SCHEDULING_STRATEGY_NOT_SET;
}


void SchedulingStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.SchedulingStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_scheduling_strategy();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchedulingStrategy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mcs.rpc.DefaultSchedulingStrategy default_scheduling_strategy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_scheduling_strategy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.PlacementGroupSchedulingStrategy placement_group_scheduling_strategy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_placement_group_scheduling_strategy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.SpreadSchedulingStrategy spread_scheduling_strategy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spread_scheduling_strategy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.NodeAffinitySchedulingStrategy node_affinity_scheduling_strategy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_affinity_scheduling_strategy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchedulingStrategy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.SchedulingStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mcs.rpc.DefaultSchedulingStrategy default_scheduling_strategy = 1;
  if (_internal_has_default_scheduling_strategy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::default_scheduling_strategy(this), target, stream);
  }

  // .mcs.rpc.PlacementGroupSchedulingStrategy placement_group_scheduling_strategy = 2;
  if (_internal_has_placement_group_scheduling_strategy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::placement_group_scheduling_strategy(this), target, stream);
  }

  // .mcs.rpc.SpreadSchedulingStrategy spread_scheduling_strategy = 3;
  if (_internal_has_spread_scheduling_strategy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::spread_scheduling_strategy(this), target, stream);
  }

  // .mcs.rpc.NodeAffinitySchedulingStrategy node_affinity_scheduling_strategy = 4;
  if (_internal_has_node_affinity_scheduling_strategy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::node_affinity_scheduling_strategy(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.SchedulingStrategy)
  return target;
}

size_t SchedulingStrategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.SchedulingStrategy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (scheduling_strategy_case()) {
    // .mcs.rpc.DefaultSchedulingStrategy default_scheduling_strategy = 1;
    case kDefaultSchedulingStrategy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scheduling_strategy_.default_scheduling_strategy_);
      break;
    }
    // .mcs.rpc.PlacementGroupSchedulingStrategy placement_group_scheduling_strategy = 2;
    case kPlacementGroupSchedulingStrategy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scheduling_strategy_.placement_group_scheduling_strategy_);
      break;
    }
    // .mcs.rpc.SpreadSchedulingStrategy spread_scheduling_strategy = 3;
    case kSpreadSchedulingStrategy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scheduling_strategy_.spread_scheduling_strategy_);
      break;
    }
    // .mcs.rpc.NodeAffinitySchedulingStrategy node_affinity_scheduling_strategy = 4;
    case kNodeAffinitySchedulingStrategy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scheduling_strategy_.node_affinity_scheduling_strategy_);
      break;
    }
    case SCHEDULING_STRATEGY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SchedulingStrategy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SchedulingStrategy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SchedulingStrategy::GetClassData() const { return &_class_data_; }

void SchedulingStrategy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SchedulingStrategy *>(to)->MergeFrom(
      static_cast<const SchedulingStrategy &>(from));
}


void SchedulingStrategy::MergeFrom(const SchedulingStrategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.SchedulingStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.scheduling_strategy_case()) {
    case kDefaultSchedulingStrategy: {
      _internal_mutable_default_scheduling_strategy()->::mcs::rpc::DefaultSchedulingStrategy::MergeFrom(from._internal_default_scheduling_strategy());
      break;
    }
    case kPlacementGroupSchedulingStrategy: {
      _internal_mutable_placement_group_scheduling_strategy()->::mcs::rpc::PlacementGroupSchedulingStrategy::MergeFrom(from._internal_placement_group_scheduling_strategy());
      break;
    }
    case kSpreadSchedulingStrategy: {
      _internal_mutable_spread_scheduling_strategy()->::mcs::rpc::SpreadSchedulingStrategy::MergeFrom(from._internal_spread_scheduling_strategy());
      break;
    }
    case kNodeAffinitySchedulingStrategy: {
      _internal_mutable_node_affinity_scheduling_strategy()->::mcs::rpc::NodeAffinitySchedulingStrategy::MergeFrom(from._internal_node_affinity_scheduling_strategy());
      break;
    }
    case SCHEDULING_STRATEGY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SchedulingStrategy::CopyFrom(const SchedulingStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.SchedulingStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchedulingStrategy::IsInitialized() const {
  return true;
}

void SchedulingStrategy::InternalSwap(SchedulingStrategy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(scheduling_strategy_, other->scheduling_strategy_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchedulingStrategy::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[4]);
}

// ===================================================================

class Address::_Internal {
 public:
};

Address::Address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.Address)
}
Address::Address(const Address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mcslet_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mcslet_id().empty()) {
    mcslet_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mcslet_id(), 
      GetArenaForAllocation());
  }
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_address().empty()) {
    ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip_address(), 
      GetArenaForAllocation());
  }
  worker_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_worker_id().empty()) {
    worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_worker_id(), 
      GetArenaForAllocation());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.Address)
}

inline void Address::SharedCtor() {
mcslet_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
worker_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
port_ = 0;
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:mcs.rpc.Address)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Address::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mcslet_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  worker_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Address::ArenaDtor(void* object) {
  Address* _this = reinterpret_cast< Address* >(object);
  (void)_this;
}
void Address::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mcslet_id_.ClearToEmpty();
  ip_address_.ClearToEmpty();
  worker_id_.ClearToEmpty();
  port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Address::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes mcslet_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mcslet_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.Address.ip_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes worker_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_worker_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Address::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes mcslet_id = 1;
  if (!this->_internal_mcslet_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_mcslet_id(), target);
  }

  // string ip_address = 2;
  if (!this->_internal_ip_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.Address.ip_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip_address(), target);
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  // bytes worker_id = 4;
  if (!this->_internal_worker_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_worker_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.Address)
  return target;
}

size_t Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.Address)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes mcslet_id = 1;
  if (!this->_internal_mcslet_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mcslet_id());
  }

  // string ip_address = 2;
  if (!this->_internal_ip_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // bytes worker_id = 4;
  if (!this->_internal_worker_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_worker_id());
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Address::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Address::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Address::GetClassData() const { return &_class_data_; }

void Address::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Address *>(to)->MergeFrom(
      static_cast<const Address &>(from));
}


void Address::MergeFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.Address)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mcslet_id().empty()) {
    _internal_set_mcslet_id(from._internal_mcslet_id());
  }
  if (!from._internal_ip_address().empty()) {
    _internal_set_ip_address(from._internal_ip_address());
  }
  if (!from._internal_worker_id().empty()) {
    _internal_set_worker_id(from._internal_worker_id());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  return true;
}

void Address::InternalSwap(Address* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mcslet_id_, GetArenaForAllocation(),
      &other->mcslet_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_address_, GetArenaForAllocation(),
      &other->ip_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &worker_id_, GetArenaForAllocation(),
      &other->worker_id_, other->GetArenaForAllocation()
  );
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Address::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[5]);
}

// ===================================================================

class JavaFunctionDescriptor::_Internal {
 public:
};

JavaFunctionDescriptor::JavaFunctionDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.JavaFunctionDescriptor)
}
JavaFunctionDescriptor::JavaFunctionDescriptor(const JavaFunctionDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_class_name().empty()) {
    class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_class_name(), 
      GetArenaForAllocation());
  }
  function_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_function_name().empty()) {
    function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_function_name(), 
      GetArenaForAllocation());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.JavaFunctionDescriptor)
}

inline void JavaFunctionDescriptor::SharedCtor() {
class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
function_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

JavaFunctionDescriptor::~JavaFunctionDescriptor() {
  // @@protoc_insertion_point(destructor:mcs.rpc.JavaFunctionDescriptor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JavaFunctionDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  function_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JavaFunctionDescriptor::ArenaDtor(void* object) {
  JavaFunctionDescriptor* _this = reinterpret_cast< JavaFunctionDescriptor* >(object);
  (void)_this;
}
void JavaFunctionDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JavaFunctionDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JavaFunctionDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.JavaFunctionDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  class_name_.ClearToEmpty();
  function_name_.ClearToEmpty();
  signature_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JavaFunctionDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string class_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_class_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.JavaFunctionDescriptor.class_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string function_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_function_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.JavaFunctionDescriptor.function_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.JavaFunctionDescriptor.signature"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JavaFunctionDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.JavaFunctionDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_name = 1;
  if (!this->_internal_class_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_name().data(), static_cast<int>(this->_internal_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.JavaFunctionDescriptor.class_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_class_name(), target);
  }

  // string function_name = 2;
  if (!this->_internal_function_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_function_name().data(), static_cast<int>(this->_internal_function_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.JavaFunctionDescriptor.function_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_function_name(), target);
  }

  // string signature = 3;
  if (!this->_internal_signature().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.JavaFunctionDescriptor.signature");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.JavaFunctionDescriptor)
  return target;
}

size_t JavaFunctionDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.JavaFunctionDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string class_name = 1;
  if (!this->_internal_class_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_name());
  }

  // string function_name = 2;
  if (!this->_internal_function_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_function_name());
  }

  // string signature = 3;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signature());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JavaFunctionDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JavaFunctionDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JavaFunctionDescriptor::GetClassData() const { return &_class_data_; }

void JavaFunctionDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<JavaFunctionDescriptor *>(to)->MergeFrom(
      static_cast<const JavaFunctionDescriptor &>(from));
}


void JavaFunctionDescriptor::MergeFrom(const JavaFunctionDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.JavaFunctionDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_class_name().empty()) {
    _internal_set_class_name(from._internal_class_name());
  }
  if (!from._internal_function_name().empty()) {
    _internal_set_function_name(from._internal_function_name());
  }
  if (!from._internal_signature().empty()) {
    _internal_set_signature(from._internal_signature());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JavaFunctionDescriptor::CopyFrom(const JavaFunctionDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.JavaFunctionDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JavaFunctionDescriptor::IsInitialized() const {
  return true;
}

void JavaFunctionDescriptor::InternalSwap(JavaFunctionDescriptor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &class_name_, GetArenaForAllocation(),
      &other->class_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &function_name_, GetArenaForAllocation(),
      &other->function_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, GetArenaForAllocation(),
      &other->signature_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata JavaFunctionDescriptor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[6]);
}

// ===================================================================

class PythonFunctionDescriptor::_Internal {
 public:
};

PythonFunctionDescriptor::PythonFunctionDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.PythonFunctionDescriptor)
}
PythonFunctionDescriptor::PythonFunctionDescriptor(const PythonFunctionDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  module_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_module_name().empty()) {
    module_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_module_name(), 
      GetArenaForAllocation());
  }
  class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_class_name().empty()) {
    class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_class_name(), 
      GetArenaForAllocation());
  }
  function_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_function_name().empty()) {
    function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_function_name(), 
      GetArenaForAllocation());
  }
  function_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_function_hash().empty()) {
    function_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_function_hash(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.PythonFunctionDescriptor)
}

inline void PythonFunctionDescriptor::SharedCtor() {
module_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
function_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
function_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PythonFunctionDescriptor::~PythonFunctionDescriptor() {
  // @@protoc_insertion_point(destructor:mcs.rpc.PythonFunctionDescriptor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PythonFunctionDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  module_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  function_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  function_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PythonFunctionDescriptor::ArenaDtor(void* object) {
  PythonFunctionDescriptor* _this = reinterpret_cast< PythonFunctionDescriptor* >(object);
  (void)_this;
}
void PythonFunctionDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PythonFunctionDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PythonFunctionDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.PythonFunctionDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  module_name_.ClearToEmpty();
  class_name_.ClearToEmpty();
  function_name_.ClearToEmpty();
  function_hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PythonFunctionDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string module_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_module_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.PythonFunctionDescriptor.module_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string class_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_class_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.PythonFunctionDescriptor.class_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string function_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_function_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.PythonFunctionDescriptor.function_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string function_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_function_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.PythonFunctionDescriptor.function_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PythonFunctionDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.PythonFunctionDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string module_name = 1;
  if (!this->_internal_module_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_module_name().data(), static_cast<int>(this->_internal_module_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.PythonFunctionDescriptor.module_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_module_name(), target);
  }

  // string class_name = 2;
  if (!this->_internal_class_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_name().data(), static_cast<int>(this->_internal_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.PythonFunctionDescriptor.class_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_class_name(), target);
  }

  // string function_name = 3;
  if (!this->_internal_function_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_function_name().data(), static_cast<int>(this->_internal_function_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.PythonFunctionDescriptor.function_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_function_name(), target);
  }

  // string function_hash = 4;
  if (!this->_internal_function_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_function_hash().data(), static_cast<int>(this->_internal_function_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.PythonFunctionDescriptor.function_hash");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_function_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.PythonFunctionDescriptor)
  return target;
}

size_t PythonFunctionDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.PythonFunctionDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string module_name = 1;
  if (!this->_internal_module_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_module_name());
  }

  // string class_name = 2;
  if (!this->_internal_class_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_name());
  }

  // string function_name = 3;
  if (!this->_internal_function_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_function_name());
  }

  // string function_hash = 4;
  if (!this->_internal_function_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_function_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PythonFunctionDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PythonFunctionDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PythonFunctionDescriptor::GetClassData() const { return &_class_data_; }

void PythonFunctionDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PythonFunctionDescriptor *>(to)->MergeFrom(
      static_cast<const PythonFunctionDescriptor &>(from));
}


void PythonFunctionDescriptor::MergeFrom(const PythonFunctionDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.PythonFunctionDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_module_name().empty()) {
    _internal_set_module_name(from._internal_module_name());
  }
  if (!from._internal_class_name().empty()) {
    _internal_set_class_name(from._internal_class_name());
  }
  if (!from._internal_function_name().empty()) {
    _internal_set_function_name(from._internal_function_name());
  }
  if (!from._internal_function_hash().empty()) {
    _internal_set_function_hash(from._internal_function_hash());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PythonFunctionDescriptor::CopyFrom(const PythonFunctionDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.PythonFunctionDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PythonFunctionDescriptor::IsInitialized() const {
  return true;
}

void PythonFunctionDescriptor::InternalSwap(PythonFunctionDescriptor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &module_name_, GetArenaForAllocation(),
      &other->module_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &class_name_, GetArenaForAllocation(),
      &other->class_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &function_name_, GetArenaForAllocation(),
      &other->function_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &function_hash_, GetArenaForAllocation(),
      &other->function_hash_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PythonFunctionDescriptor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[7]);
}

// ===================================================================

class CppFunctionDescriptor::_Internal {
 public:
};

CppFunctionDescriptor::CppFunctionDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.CppFunctionDescriptor)
}
CppFunctionDescriptor::CppFunctionDescriptor(const CppFunctionDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  function_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_function_name().empty()) {
    function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_function_name(), 
      GetArenaForAllocation());
  }
  caller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_caller().empty()) {
    caller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_caller(), 
      GetArenaForAllocation());
  }
  class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_class_name().empty()) {
    class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_class_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.CppFunctionDescriptor)
}

inline void CppFunctionDescriptor::SharedCtor() {
function_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
caller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CppFunctionDescriptor::~CppFunctionDescriptor() {
  // @@protoc_insertion_point(destructor:mcs.rpc.CppFunctionDescriptor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CppFunctionDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  function_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  caller_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CppFunctionDescriptor::ArenaDtor(void* object) {
  CppFunctionDescriptor* _this = reinterpret_cast< CppFunctionDescriptor* >(object);
  (void)_this;
}
void CppFunctionDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CppFunctionDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CppFunctionDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.CppFunctionDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  function_name_.ClearToEmpty();
  caller_.ClearToEmpty();
  class_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CppFunctionDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string function_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_function_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.CppFunctionDescriptor.function_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string caller = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_caller();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.CppFunctionDescriptor.caller"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string class_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_class_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.CppFunctionDescriptor.class_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CppFunctionDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.CppFunctionDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string function_name = 1;
  if (!this->_internal_function_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_function_name().data(), static_cast<int>(this->_internal_function_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.CppFunctionDescriptor.function_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_function_name(), target);
  }

  // string caller = 2;
  if (!this->_internal_caller().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_caller().data(), static_cast<int>(this->_internal_caller().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.CppFunctionDescriptor.caller");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_caller(), target);
  }

  // string class_name = 3;
  if (!this->_internal_class_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_name().data(), static_cast<int>(this->_internal_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.CppFunctionDescriptor.class_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_class_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.CppFunctionDescriptor)
  return target;
}

size_t CppFunctionDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.CppFunctionDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string function_name = 1;
  if (!this->_internal_function_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_function_name());
  }

  // string caller = 2;
  if (!this->_internal_caller().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_caller());
  }

  // string class_name = 3;
  if (!this->_internal_class_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CppFunctionDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CppFunctionDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CppFunctionDescriptor::GetClassData() const { return &_class_data_; }

void CppFunctionDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CppFunctionDescriptor *>(to)->MergeFrom(
      static_cast<const CppFunctionDescriptor &>(from));
}


void CppFunctionDescriptor::MergeFrom(const CppFunctionDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.CppFunctionDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_function_name().empty()) {
    _internal_set_function_name(from._internal_function_name());
  }
  if (!from._internal_caller().empty()) {
    _internal_set_caller(from._internal_caller());
  }
  if (!from._internal_class_name().empty()) {
    _internal_set_class_name(from._internal_class_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CppFunctionDescriptor::CopyFrom(const CppFunctionDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.CppFunctionDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CppFunctionDescriptor::IsInitialized() const {
  return true;
}

void CppFunctionDescriptor::InternalSwap(CppFunctionDescriptor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &function_name_, GetArenaForAllocation(),
      &other->function_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &caller_, GetArenaForAllocation(),
      &other->caller_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &class_name_, GetArenaForAllocation(),
      &other->class_name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CppFunctionDescriptor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[8]);
}

// ===================================================================

class FunctionDescriptor::_Internal {
 public:
  static const ::mcs::rpc::JavaFunctionDescriptor& java_function_descriptor(const FunctionDescriptor* msg);
  static const ::mcs::rpc::PythonFunctionDescriptor& python_function_descriptor(const FunctionDescriptor* msg);
  static const ::mcs::rpc::CppFunctionDescriptor& cpp_function_descriptor(const FunctionDescriptor* msg);
};

const ::mcs::rpc::JavaFunctionDescriptor&
FunctionDescriptor::_Internal::java_function_descriptor(const FunctionDescriptor* msg) {
  return *msg->function_descriptor_.java_function_descriptor_;
}
const ::mcs::rpc::PythonFunctionDescriptor&
FunctionDescriptor::_Internal::python_function_descriptor(const FunctionDescriptor* msg) {
  return *msg->function_descriptor_.python_function_descriptor_;
}
const ::mcs::rpc::CppFunctionDescriptor&
FunctionDescriptor::_Internal::cpp_function_descriptor(const FunctionDescriptor* msg) {
  return *msg->function_descriptor_.cpp_function_descriptor_;
}
void FunctionDescriptor::set_allocated_java_function_descriptor(::mcs::rpc::JavaFunctionDescriptor* java_function_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_function_descriptor();
  if (java_function_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mcs::rpc::JavaFunctionDescriptor>::GetOwningArena(java_function_descriptor);
    if (message_arena != submessage_arena) {
      java_function_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, java_function_descriptor, submessage_arena);
    }
    set_has_java_function_descriptor();
    function_descriptor_.java_function_descriptor_ = java_function_descriptor;
  }
  // @@protoc_insertion_point(field_set_allocated:mcs.rpc.FunctionDescriptor.java_function_descriptor)
}
void FunctionDescriptor::set_allocated_python_function_descriptor(::mcs::rpc::PythonFunctionDescriptor* python_function_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_function_descriptor();
  if (python_function_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mcs::rpc::PythonFunctionDescriptor>::GetOwningArena(python_function_descriptor);
    if (message_arena != submessage_arena) {
      python_function_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, python_function_descriptor, submessage_arena);
    }
    set_has_python_function_descriptor();
    function_descriptor_.python_function_descriptor_ = python_function_descriptor;
  }
  // @@protoc_insertion_point(field_set_allocated:mcs.rpc.FunctionDescriptor.python_function_descriptor)
}
void FunctionDescriptor::set_allocated_cpp_function_descriptor(::mcs::rpc::CppFunctionDescriptor* cpp_function_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_function_descriptor();
  if (cpp_function_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mcs::rpc::CppFunctionDescriptor>::GetOwningArena(cpp_function_descriptor);
    if (message_arena != submessage_arena) {
      cpp_function_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpp_function_descriptor, submessage_arena);
    }
    set_has_cpp_function_descriptor();
    function_descriptor_.cpp_function_descriptor_ = cpp_function_descriptor;
  }
  // @@protoc_insertion_point(field_set_allocated:mcs.rpc.FunctionDescriptor.cpp_function_descriptor)
}
FunctionDescriptor::FunctionDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.FunctionDescriptor)
}
FunctionDescriptor::FunctionDescriptor(const FunctionDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_function_descriptor();
  switch (from.function_descriptor_case()) {
    case kJavaFunctionDescriptor: {
      _internal_mutable_java_function_descriptor()->::mcs::rpc::JavaFunctionDescriptor::MergeFrom(from._internal_java_function_descriptor());
      break;
    }
    case kPythonFunctionDescriptor: {
      _internal_mutable_python_function_descriptor()->::mcs::rpc::PythonFunctionDescriptor::MergeFrom(from._internal_python_function_descriptor());
      break;
    }
    case kCppFunctionDescriptor: {
      _internal_mutable_cpp_function_descriptor()->::mcs::rpc::CppFunctionDescriptor::MergeFrom(from._internal_cpp_function_descriptor());
      break;
    }
    case FUNCTION_DESCRIPTOR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.FunctionDescriptor)
}

inline void FunctionDescriptor::SharedCtor() {
clear_has_function_descriptor();
}

FunctionDescriptor::~FunctionDescriptor() {
  // @@protoc_insertion_point(destructor:mcs.rpc.FunctionDescriptor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_function_descriptor()) {
    clear_function_descriptor();
  }
}

void FunctionDescriptor::ArenaDtor(void* object) {
  FunctionDescriptor* _this = reinterpret_cast< FunctionDescriptor* >(object);
  (void)_this;
}
void FunctionDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionDescriptor::clear_function_descriptor() {
// @@protoc_insertion_point(one_of_clear_start:mcs.rpc.FunctionDescriptor)
  switch (function_descriptor_case()) {
    case kJavaFunctionDescriptor: {
      if (GetArenaForAllocation() == nullptr) {
        delete function_descriptor_.java_function_descriptor_;
      }
      break;
    }
    case kPythonFunctionDescriptor: {
      if (GetArenaForAllocation() == nullptr) {
        delete function_descriptor_.python_function_descriptor_;
      }
      break;
    }
    case kCppFunctionDescriptor: {
      if (GetArenaForAllocation() == nullptr) {
        delete function_descriptor_.cpp_function_descriptor_;
      }
      break;
    }
    case FUNCTION_DESCRIPTOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FUNCTION_DESCRIPTOR_NOT_SET;
}


void FunctionDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.FunctionDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_function_descriptor();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mcs.rpc.JavaFunctionDescriptor java_function_descriptor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_java_function_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.PythonFunctionDescriptor python_function_descriptor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_python_function_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.CppFunctionDescriptor cpp_function_descriptor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpp_function_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FunctionDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.FunctionDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mcs.rpc.JavaFunctionDescriptor java_function_descriptor = 1;
  if (_internal_has_java_function_descriptor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::java_function_descriptor(this), target, stream);
  }

  // .mcs.rpc.PythonFunctionDescriptor python_function_descriptor = 2;
  if (_internal_has_python_function_descriptor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::python_function_descriptor(this), target, stream);
  }

  // .mcs.rpc.CppFunctionDescriptor cpp_function_descriptor = 3;
  if (_internal_has_cpp_function_descriptor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cpp_function_descriptor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.FunctionDescriptor)
  return target;
}

size_t FunctionDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.FunctionDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (function_descriptor_case()) {
    // .mcs.rpc.JavaFunctionDescriptor java_function_descriptor = 1;
    case kJavaFunctionDescriptor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_descriptor_.java_function_descriptor_);
      break;
    }
    // .mcs.rpc.PythonFunctionDescriptor python_function_descriptor = 2;
    case kPythonFunctionDescriptor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_descriptor_.python_function_descriptor_);
      break;
    }
    // .mcs.rpc.CppFunctionDescriptor cpp_function_descriptor = 3;
    case kCppFunctionDescriptor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_descriptor_.cpp_function_descriptor_);
      break;
    }
    case FUNCTION_DESCRIPTOR_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionDescriptor::GetClassData() const { return &_class_data_; }

void FunctionDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FunctionDescriptor *>(to)->MergeFrom(
      static_cast<const FunctionDescriptor &>(from));
}


void FunctionDescriptor::MergeFrom(const FunctionDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.FunctionDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.function_descriptor_case()) {
    case kJavaFunctionDescriptor: {
      _internal_mutable_java_function_descriptor()->::mcs::rpc::JavaFunctionDescriptor::MergeFrom(from._internal_java_function_descriptor());
      break;
    }
    case kPythonFunctionDescriptor: {
      _internal_mutable_python_function_descriptor()->::mcs::rpc::PythonFunctionDescriptor::MergeFrom(from._internal_python_function_descriptor());
      break;
    }
    case kCppFunctionDescriptor: {
      _internal_mutable_cpp_function_descriptor()->::mcs::rpc::CppFunctionDescriptor::MergeFrom(from._internal_cpp_function_descriptor());
      break;
    }
    case FUNCTION_DESCRIPTOR_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionDescriptor::CopyFrom(const FunctionDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.FunctionDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionDescriptor::IsInitialized() const {
  return true;
}

void FunctionDescriptor::InternalSwap(FunctionDescriptor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(function_descriptor_, other->function_descriptor_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionDescriptor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[9]);
}

// ===================================================================

class ConcurrencyGroup::_Internal {
 public:
};

ConcurrencyGroup::ConcurrencyGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  function_descriptors_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ConcurrencyGroup)
}
ConcurrencyGroup::ConcurrencyGroup(const ConcurrencyGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      function_descriptors_(from.function_descriptors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  max_concurrency_ = from.max_concurrency_;
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ConcurrencyGroup)
}

inline void ConcurrencyGroup::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
max_concurrency_ = 0;
}

ConcurrencyGroup::~ConcurrencyGroup() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ConcurrencyGroup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConcurrencyGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConcurrencyGroup::ArenaDtor(void* object) {
  ConcurrencyGroup* _this = reinterpret_cast< ConcurrencyGroup* >(object);
  (void)_this;
}
void ConcurrencyGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConcurrencyGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConcurrencyGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ConcurrencyGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  function_descriptors_.Clear();
  name_.ClearToEmpty();
  max_concurrency_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConcurrencyGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ConcurrencyGroup.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_concurrency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_concurrency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mcs.rpc.FunctionDescriptor function_descriptors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_function_descriptors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConcurrencyGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ConcurrencyGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ConcurrencyGroup.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 max_concurrency = 2;
  if (this->_internal_max_concurrency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_concurrency(), target);
  }

  // repeated .mcs.rpc.FunctionDescriptor function_descriptors = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_function_descriptors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_function_descriptors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ConcurrencyGroup)
  return target;
}

size_t ConcurrencyGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ConcurrencyGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mcs.rpc.FunctionDescriptor function_descriptors = 3;
  total_size += 1UL * this->_internal_function_descriptors_size();
  for (const auto& msg : this->function_descriptors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 max_concurrency = 2;
  if (this->_internal_max_concurrency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_concurrency());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConcurrencyGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConcurrencyGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConcurrencyGroup::GetClassData() const { return &_class_data_; }

void ConcurrencyGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ConcurrencyGroup *>(to)->MergeFrom(
      static_cast<const ConcurrencyGroup &>(from));
}


void ConcurrencyGroup::MergeFrom(const ConcurrencyGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ConcurrencyGroup)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  function_descriptors_.MergeFrom(from.function_descriptors_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_max_concurrency() != 0) {
    _internal_set_max_concurrency(from._internal_max_concurrency());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConcurrencyGroup::CopyFrom(const ConcurrencyGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ConcurrencyGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcurrencyGroup::IsInitialized() const {
  return true;
}

void ConcurrencyGroup::InternalSwap(ConcurrencyGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  function_descriptors_.InternalSwap(&other->function_descriptors_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(max_concurrency_, other->max_concurrency_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConcurrencyGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[10]);
}

// ===================================================================

class McsErrorInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<McsErrorInfo>()._has_bits_);
  static const ::mcs::rpc::ActorDeathCause& actor_died_error(const McsErrorInfo* msg);
  static const ::mcs::rpc::RuntimeEnvFailedContext& runtime_env_setup_failed_error(const McsErrorInfo* msg);
  static void set_has_error_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mcs::rpc::ActorDeathCause&
McsErrorInfo::_Internal::actor_died_error(const McsErrorInfo* msg) {
  return *msg->error_.actor_died_error_;
}
const ::mcs::rpc::RuntimeEnvFailedContext&
McsErrorInfo::_Internal::runtime_env_setup_failed_error(const McsErrorInfo* msg) {
  return *msg->error_.runtime_env_setup_failed_error_;
}
void McsErrorInfo::set_allocated_actor_died_error(::mcs::rpc::ActorDeathCause* actor_died_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_error();
  if (actor_died_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mcs::rpc::ActorDeathCause>::GetOwningArena(actor_died_error);
    if (message_arena != submessage_arena) {
      actor_died_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actor_died_error, submessage_arena);
    }
    set_has_actor_died_error();
    error_.actor_died_error_ = actor_died_error;
  }
  // @@protoc_insertion_point(field_set_allocated:mcs.rpc.McsErrorInfo.actor_died_error)
}
void McsErrorInfo::set_allocated_runtime_env_setup_failed_error(::mcs::rpc::RuntimeEnvFailedContext* runtime_env_setup_failed_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_error();
  if (runtime_env_setup_failed_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mcs::rpc::RuntimeEnvFailedContext>::GetOwningArena(runtime_env_setup_failed_error);
    if (message_arena != submessage_arena) {
      runtime_env_setup_failed_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime_env_setup_failed_error, submessage_arena);
    }
    set_has_runtime_env_setup_failed_error();
    error_.runtime_env_setup_failed_error_ = runtime_env_setup_failed_error;
  }
  // @@protoc_insertion_point(field_set_allocated:mcs.rpc.McsErrorInfo.runtime_env_setup_failed_error)
}
McsErrorInfo::McsErrorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.McsErrorInfo)
}
McsErrorInfo::McsErrorInfo(const McsErrorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_type_ = from.error_type_;
  clear_has_error();
  switch (from.error_case()) {
    case kActorDiedError: {
      _internal_mutable_actor_died_error()->::mcs::rpc::ActorDeathCause::MergeFrom(from._internal_actor_died_error());
      break;
    }
    case kRuntimeEnvSetupFailedError: {
      _internal_mutable_runtime_env_setup_failed_error()->::mcs::rpc::RuntimeEnvFailedContext::MergeFrom(from._internal_runtime_env_setup_failed_error());
      break;
    }
    case kErrorMessage: {
      _internal_set_error_message(from._internal_error_message());
      break;
    }
    case ERROR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.McsErrorInfo)
}

inline void McsErrorInfo::SharedCtor() {
error_type_ = 0;
clear_has_error();
}

McsErrorInfo::~McsErrorInfo() {
  // @@protoc_insertion_point(destructor:mcs.rpc.McsErrorInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void McsErrorInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_error()) {
    clear_error();
  }
}

void McsErrorInfo::ArenaDtor(void* object) {
  McsErrorInfo* _this = reinterpret_cast< McsErrorInfo* >(object);
  (void)_this;
}
void McsErrorInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void McsErrorInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void McsErrorInfo::clear_error() {
// @@protoc_insertion_point(one_of_clear_start:mcs.rpc.McsErrorInfo)
  switch (error_case()) {
    case kActorDiedError: {
      if (GetArenaForAllocation() == nullptr) {
        delete error_.actor_died_error_;
      }
      break;
    }
    case kRuntimeEnvSetupFailedError: {
      if (GetArenaForAllocation() == nullptr) {
        delete error_.runtime_env_setup_failed_error_;
      }
      break;
    }
    case kErrorMessage: {
      error_.error_message_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case ERROR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ERROR_NOT_SET;
}


void McsErrorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.McsErrorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_type_ = 0;
  clear_error();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* McsErrorInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mcs.rpc.ActorDeathCause actor_died_error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_actor_died_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.RuntimeEnvFailedContext runtime_env_setup_failed_error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_runtime_env_setup_failed_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.McsErrorInfo.error_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mcs.rpc.ErrorType error_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error_type(static_cast<::mcs::rpc::ErrorType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* McsErrorInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.McsErrorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mcs.rpc.ActorDeathCause actor_died_error = 2;
  if (_internal_has_actor_died_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::actor_died_error(this), target, stream);
  }

  // .mcs.rpc.RuntimeEnvFailedContext runtime_env_setup_failed_error = 3;
  if (_internal_has_runtime_env_setup_failed_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::runtime_env_setup_failed_error(this), target, stream);
  }

  // string error_message = 4;
  if (_internal_has_error_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.McsErrorInfo.error_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_message(), target);
  }

  // optional .mcs.rpc.ErrorType error_type = 11;
  if (_internal_has_error_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_error_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.McsErrorInfo)
  return target;
}

size_t McsErrorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.McsErrorInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .mcs.rpc.ErrorType error_type = 11;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error_type());
  }

  switch (error_case()) {
    // .mcs.rpc.ActorDeathCause actor_died_error = 2;
    case kActorDiedError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *error_.actor_died_error_);
      break;
    }
    // .mcs.rpc.RuntimeEnvFailedContext runtime_env_setup_failed_error = 3;
    case kRuntimeEnvSetupFailedError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *error_.runtime_env_setup_failed_error_);
      break;
    }
    // string error_message = 4;
    case kErrorMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_message());
      break;
    }
    case ERROR_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData McsErrorInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    McsErrorInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*McsErrorInfo::GetClassData() const { return &_class_data_; }

void McsErrorInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<McsErrorInfo *>(to)->MergeFrom(
      static_cast<const McsErrorInfo &>(from));
}


void McsErrorInfo::MergeFrom(const McsErrorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.McsErrorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error_type()) {
    _internal_set_error_type(from._internal_error_type());
  }
  switch (from.error_case()) {
    case kActorDiedError: {
      _internal_mutable_actor_died_error()->::mcs::rpc::ActorDeathCause::MergeFrom(from._internal_actor_died_error());
      break;
    }
    case kRuntimeEnvSetupFailedError: {
      _internal_mutable_runtime_env_setup_failed_error()->::mcs::rpc::RuntimeEnvFailedContext::MergeFrom(from._internal_runtime_env_setup_failed_error());
      break;
    }
    case kErrorMessage: {
      _internal_set_error_message(from._internal_error_message());
      break;
    }
    case ERROR_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void McsErrorInfo::CopyFrom(const McsErrorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.McsErrorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool McsErrorInfo::IsInitialized() const {
  return true;
}

void McsErrorInfo::InternalSwap(McsErrorInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(error_type_, other->error_type_);
  swap(error_, other->error_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata McsErrorInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[11]);
}

// ===================================================================

class OutOfMemoryErrorContext::_Internal {
 public:
};

OutOfMemoryErrorContext::OutOfMemoryErrorContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.OutOfMemoryErrorContext)
}
OutOfMemoryErrorContext::OutOfMemoryErrorContext(const OutOfMemoryErrorContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_id().empty()) {
    task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_id(), 
      GetArenaForAllocation());
  }
  task_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_name().empty()) {
    task_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_name(), 
      GetArenaForAllocation());
  }
  node_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_ip_address().empty()) {
    node_ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_ip_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&memory_used_bytes_, &from.memory_used_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&memory_threshold_) -
    reinterpret_cast<char*>(&memory_used_bytes_)) + sizeof(memory_threshold_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.OutOfMemoryErrorContext)
}

inline void OutOfMemoryErrorContext::SharedCtor() {
task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
task_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
node_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&memory_used_bytes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&memory_threshold_) -
    reinterpret_cast<char*>(&memory_used_bytes_)) + sizeof(memory_threshold_));
}

OutOfMemoryErrorContext::~OutOfMemoryErrorContext() {
  // @@protoc_insertion_point(destructor:mcs.rpc.OutOfMemoryErrorContext)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OutOfMemoryErrorContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OutOfMemoryErrorContext::ArenaDtor(void* object) {
  OutOfMemoryErrorContext* _this = reinterpret_cast< OutOfMemoryErrorContext* >(object);
  (void)_this;
}
void OutOfMemoryErrorContext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutOfMemoryErrorContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OutOfMemoryErrorContext::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.OutOfMemoryErrorContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_id_.ClearToEmpty();
  task_name_.ClearToEmpty();
  node_ip_address_.ClearToEmpty();
  ::memset(&memory_used_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memory_threshold_) -
      reinterpret_cast<char*>(&memory_used_bytes_)) + sizeof(memory_threshold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutOfMemoryErrorContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string task_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_task_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.OutOfMemoryErrorContext.task_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_ip_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_node_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.OutOfMemoryErrorContext.node_ip_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 memory_used_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          memory_used_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 memory_total_bytes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          memory_total_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double memory_usage_fraction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          memory_usage_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double memory_threshold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          memory_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutOfMemoryErrorContext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.OutOfMemoryErrorContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes task_id = 1;
  if (!this->_internal_task_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_task_id(), target);
  }

  // string task_name = 2;
  if (!this->_internal_task_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_name().data(), static_cast<int>(this->_internal_task_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.OutOfMemoryErrorContext.task_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_task_name(), target);
  }

  // string node_ip_address = 3;
  if (!this->_internal_node_ip_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_ip_address().data(), static_cast<int>(this->_internal_node_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.OutOfMemoryErrorContext.node_ip_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_node_ip_address(), target);
  }

  // uint64 memory_used_bytes = 4;
  if (this->_internal_memory_used_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_memory_used_bytes(), target);
  }

  // uint64 memory_total_bytes = 5;
  if (this->_internal_memory_total_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_memory_total_bytes(), target);
  }

  // double memory_usage_fraction = 6;
  if (!(this->_internal_memory_usage_fraction() <= 0 && this->_internal_memory_usage_fraction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_memory_usage_fraction(), target);
  }

  // double memory_threshold = 7;
  if (!(this->_internal_memory_threshold() <= 0 && this->_internal_memory_threshold() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_memory_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.OutOfMemoryErrorContext)
  return target;
}

size_t OutOfMemoryErrorContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.OutOfMemoryErrorContext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes task_id = 1;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_task_id());
  }

  // string task_name = 2;
  if (!this->_internal_task_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_name());
  }

  // string node_ip_address = 3;
  if (!this->_internal_node_ip_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_ip_address());
  }

  // uint64 memory_used_bytes = 4;
  if (this->_internal_memory_used_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_memory_used_bytes());
  }

  // uint64 memory_total_bytes = 5;
  if (this->_internal_memory_total_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_memory_total_bytes());
  }

  // double memory_usage_fraction = 6;
  if (!(this->_internal_memory_usage_fraction() <= 0 && this->_internal_memory_usage_fraction() >= 0)) {
    total_size += 1 + 8;
  }

  // double memory_threshold = 7;
  if (!(this->_internal_memory_threshold() <= 0 && this->_internal_memory_threshold() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutOfMemoryErrorContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OutOfMemoryErrorContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutOfMemoryErrorContext::GetClassData() const { return &_class_data_; }

void OutOfMemoryErrorContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OutOfMemoryErrorContext *>(to)->MergeFrom(
      static_cast<const OutOfMemoryErrorContext &>(from));
}


void OutOfMemoryErrorContext::MergeFrom(const OutOfMemoryErrorContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.OutOfMemoryErrorContext)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_task_id().empty()) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (!from._internal_task_name().empty()) {
    _internal_set_task_name(from._internal_task_name());
  }
  if (!from._internal_node_ip_address().empty()) {
    _internal_set_node_ip_address(from._internal_node_ip_address());
  }
  if (from._internal_memory_used_bytes() != 0) {
    _internal_set_memory_used_bytes(from._internal_memory_used_bytes());
  }
  if (from._internal_memory_total_bytes() != 0) {
    _internal_set_memory_total_bytes(from._internal_memory_total_bytes());
  }
  if (!(from._internal_memory_usage_fraction() <= 0 && from._internal_memory_usage_fraction() >= 0)) {
    _internal_set_memory_usage_fraction(from._internal_memory_usage_fraction());
  }
  if (!(from._internal_memory_threshold() <= 0 && from._internal_memory_threshold() >= 0)) {
    _internal_set_memory_threshold(from._internal_memory_threshold());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutOfMemoryErrorContext::CopyFrom(const OutOfMemoryErrorContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.OutOfMemoryErrorContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutOfMemoryErrorContext::IsInitialized() const {
  return true;
}

void OutOfMemoryErrorContext::InternalSwap(OutOfMemoryErrorContext* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &task_id_, GetArenaForAllocation(),
      &other->task_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &task_name_, GetArenaForAllocation(),
      &other->task_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_ip_address_, GetArenaForAllocation(),
      &other->node_ip_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutOfMemoryErrorContext, memory_threshold_)
      + sizeof(OutOfMemoryErrorContext::memory_threshold_)
      - PROTOBUF_FIELD_OFFSET(OutOfMemoryErrorContext, memory_used_bytes_)>(
          reinterpret_cast<char*>(&memory_used_bytes_),
          reinterpret_cast<char*>(&other->memory_used_bytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutOfMemoryErrorContext::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[12]);
}

// ===================================================================

class NodeDiedErrorContext::_Internal {
 public:
};

NodeDiedErrorContext::NodeDiedErrorContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.NodeDiedErrorContext)
}
NodeDiedErrorContext::NodeDiedErrorContext(const NodeDiedErrorContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(), 
      GetArenaForAllocation());
  }
  node_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_ip_address().empty()) {
    node_ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_ip_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.NodeDiedErrorContext)
}

inline void NodeDiedErrorContext::SharedCtor() {
node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
node_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NodeDiedErrorContext::~NodeDiedErrorContext() {
  // @@protoc_insertion_point(destructor:mcs.rpc.NodeDiedErrorContext)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeDiedErrorContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeDiedErrorContext::ArenaDtor(void* object) {
  NodeDiedErrorContext* _this = reinterpret_cast< NodeDiedErrorContext* >(object);
  (void)_this;
}
void NodeDiedErrorContext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeDiedErrorContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeDiedErrorContext::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.NodeDiedErrorContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmpty();
  node_ip_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeDiedErrorContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_ip_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_node_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.NodeDiedErrorContext.node_ip_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeDiedErrorContext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.NodeDiedErrorContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes node_id = 1;
  if (!this->_internal_node_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_node_id(), target);
  }

  // string node_ip_address = 2;
  if (!this->_internal_node_ip_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_ip_address().data(), static_cast<int>(this->_internal_node_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.NodeDiedErrorContext.node_ip_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_ip_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.NodeDiedErrorContext)
  return target;
}

size_t NodeDiedErrorContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.NodeDiedErrorContext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes node_id = 1;
  if (!this->_internal_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_node_id());
  }

  // string node_ip_address = 2;
  if (!this->_internal_node_ip_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_ip_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeDiedErrorContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NodeDiedErrorContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeDiedErrorContext::GetClassData() const { return &_class_data_; }

void NodeDiedErrorContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NodeDiedErrorContext *>(to)->MergeFrom(
      static_cast<const NodeDiedErrorContext &>(from));
}


void NodeDiedErrorContext::MergeFrom(const NodeDiedErrorContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.NodeDiedErrorContext)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_id().empty()) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (!from._internal_node_ip_address().empty()) {
    _internal_set_node_ip_address(from._internal_node_ip_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeDiedErrorContext::CopyFrom(const NodeDiedErrorContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.NodeDiedErrorContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeDiedErrorContext::IsInitialized() const {
  return true;
}

void NodeDiedErrorContext::InternalSwap(NodeDiedErrorContext* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_id_, GetArenaForAllocation(),
      &other->node_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_ip_address_, GetArenaForAllocation(),
      &other->node_ip_address_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeDiedErrorContext::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[13]);
}

// ===================================================================

class McsException::_Internal {
 public:
};

McsException::McsException(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.McsException)
}
McsException::McsException(const McsException& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serialized_exception_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serialized_exception().empty()) {
    serialized_exception_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serialized_exception(), 
      GetArenaForAllocation());
  }
  formatted_exception_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_formatted_exception_string().empty()) {
    formatted_exception_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_formatted_exception_string(), 
      GetArenaForAllocation());
  }
  language_ = from.language_;
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.McsException)
}

inline void McsException::SharedCtor() {
serialized_exception_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
formatted_exception_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
language_ = 0;
}

McsException::~McsException() {
  // @@protoc_insertion_point(destructor:mcs.rpc.McsException)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void McsException::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  serialized_exception_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  formatted_exception_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void McsException::ArenaDtor(void* object) {
  McsException* _this = reinterpret_cast< McsException* >(object);
  (void)_this;
}
void McsException::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void McsException::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void McsException::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.McsException)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serialized_exception_.ClearToEmpty();
  formatted_exception_string_.ClearToEmpty();
  language_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* McsException::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mcs.rpc.Language language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language(static_cast<::mcs::rpc::Language>(val));
        } else goto handle_unusual;
        continue;
      // bytes serialized_exception = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_serialized_exception();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string formatted_exception_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_formatted_exception_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.McsException.formatted_exception_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* McsException::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.McsException)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mcs.rpc.Language language = 1;
  if (this->_internal_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_language(), target);
  }

  // bytes serialized_exception = 2;
  if (!this->_internal_serialized_exception().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_serialized_exception(), target);
  }

  // string formatted_exception_string = 3;
  if (!this->_internal_formatted_exception_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_formatted_exception_string().data(), static_cast<int>(this->_internal_formatted_exception_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.McsException.formatted_exception_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_formatted_exception_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.McsException)
  return target;
}

size_t McsException::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.McsException)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes serialized_exception = 2;
  if (!this->_internal_serialized_exception().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_serialized_exception());
  }

  // string formatted_exception_string = 3;
  if (!this->_internal_formatted_exception_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_formatted_exception_string());
  }

  // .mcs.rpc.Language language = 1;
  if (this->_internal_language() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_language());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData McsException::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    McsException::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*McsException::GetClassData() const { return &_class_data_; }

void McsException::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<McsException *>(to)->MergeFrom(
      static_cast<const McsException &>(from));
}


void McsException::MergeFrom(const McsException& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.McsException)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_serialized_exception().empty()) {
    _internal_set_serialized_exception(from._internal_serialized_exception());
  }
  if (!from._internal_formatted_exception_string().empty()) {
    _internal_set_formatted_exception_string(from._internal_formatted_exception_string());
  }
  if (from._internal_language() != 0) {
    _internal_set_language(from._internal_language());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void McsException::CopyFrom(const McsException& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.McsException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool McsException::IsInitialized() const {
  return true;
}

void McsException::InternalSwap(McsException* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serialized_exception_, GetArenaForAllocation(),
      &other->serialized_exception_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &formatted_exception_string_, GetArenaForAllocation(),
      &other->formatted_exception_string_, other->GetArenaForAllocation()
  );
  swap(language_, other->language_);
}

::PROTOBUF_NAMESPACE_ID::Metadata McsException::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[14]);
}

// ===================================================================

class ActorDeathCause::_Internal {
 public:
  static const ::mcs::rpc::McsException& creation_task_failure_context(const ActorDeathCause* msg);
  static const ::mcs::rpc::RuntimeEnvFailedContext& runtime_env_failed_context(const ActorDeathCause* msg);
  static const ::mcs::rpc::ActorDiedErrorContext& actor_died_error_context(const ActorDeathCause* msg);
  static const ::mcs::rpc::ActorUnschedulableContext& actor_unschedulable_context(const ActorDeathCause* msg);
};

const ::mcs::rpc::McsException&
ActorDeathCause::_Internal::creation_task_failure_context(const ActorDeathCause* msg) {
  return *msg->context_.creation_task_failure_context_;
}
const ::mcs::rpc::RuntimeEnvFailedContext&
ActorDeathCause::_Internal::runtime_env_failed_context(const ActorDeathCause* msg) {
  return *msg->context_.runtime_env_failed_context_;
}
const ::mcs::rpc::ActorDiedErrorContext&
ActorDeathCause::_Internal::actor_died_error_context(const ActorDeathCause* msg) {
  return *msg->context_.actor_died_error_context_;
}
const ::mcs::rpc::ActorUnschedulableContext&
ActorDeathCause::_Internal::actor_unschedulable_context(const ActorDeathCause* msg) {
  return *msg->context_.actor_unschedulable_context_;
}
void ActorDeathCause::set_allocated_creation_task_failure_context(::mcs::rpc::McsException* creation_task_failure_context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_context();
  if (creation_task_failure_context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mcs::rpc::McsException>::GetOwningArena(creation_task_failure_context);
    if (message_arena != submessage_arena) {
      creation_task_failure_context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, creation_task_failure_context, submessage_arena);
    }
    set_has_creation_task_failure_context();
    context_.creation_task_failure_context_ = creation_task_failure_context;
  }
  // @@protoc_insertion_point(field_set_allocated:mcs.rpc.ActorDeathCause.creation_task_failure_context)
}
void ActorDeathCause::set_allocated_runtime_env_failed_context(::mcs::rpc::RuntimeEnvFailedContext* runtime_env_failed_context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_context();
  if (runtime_env_failed_context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mcs::rpc::RuntimeEnvFailedContext>::GetOwningArena(runtime_env_failed_context);
    if (message_arena != submessage_arena) {
      runtime_env_failed_context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime_env_failed_context, submessage_arena);
    }
    set_has_runtime_env_failed_context();
    context_.runtime_env_failed_context_ = runtime_env_failed_context;
  }
  // @@protoc_insertion_point(field_set_allocated:mcs.rpc.ActorDeathCause.runtime_env_failed_context)
}
void ActorDeathCause::set_allocated_actor_died_error_context(::mcs::rpc::ActorDiedErrorContext* actor_died_error_context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_context();
  if (actor_died_error_context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mcs::rpc::ActorDiedErrorContext>::GetOwningArena(actor_died_error_context);
    if (message_arena != submessage_arena) {
      actor_died_error_context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actor_died_error_context, submessage_arena);
    }
    set_has_actor_died_error_context();
    context_.actor_died_error_context_ = actor_died_error_context;
  }
  // @@protoc_insertion_point(field_set_allocated:mcs.rpc.ActorDeathCause.actor_died_error_context)
}
void ActorDeathCause::set_allocated_actor_unschedulable_context(::mcs::rpc::ActorUnschedulableContext* actor_unschedulable_context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_context();
  if (actor_unschedulable_context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mcs::rpc::ActorUnschedulableContext>::GetOwningArena(actor_unschedulable_context);
    if (message_arena != submessage_arena) {
      actor_unschedulable_context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actor_unschedulable_context, submessage_arena);
    }
    set_has_actor_unschedulable_context();
    context_.actor_unschedulable_context_ = actor_unschedulable_context;
  }
  // @@protoc_insertion_point(field_set_allocated:mcs.rpc.ActorDeathCause.actor_unschedulable_context)
}
ActorDeathCause::ActorDeathCause(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ActorDeathCause)
}
ActorDeathCause::ActorDeathCause(const ActorDeathCause& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_context();
  switch (from.context_case()) {
    case kCreationTaskFailureContext: {
      _internal_mutable_creation_task_failure_context()->::mcs::rpc::McsException::MergeFrom(from._internal_creation_task_failure_context());
      break;
    }
    case kRuntimeEnvFailedContext: {
      _internal_mutable_runtime_env_failed_context()->::mcs::rpc::RuntimeEnvFailedContext::MergeFrom(from._internal_runtime_env_failed_context());
      break;
    }
    case kActorDiedErrorContext: {
      _internal_mutable_actor_died_error_context()->::mcs::rpc::ActorDiedErrorContext::MergeFrom(from._internal_actor_died_error_context());
      break;
    }
    case kActorUnschedulableContext: {
      _internal_mutable_actor_unschedulable_context()->::mcs::rpc::ActorUnschedulableContext::MergeFrom(from._internal_actor_unschedulable_context());
      break;
    }
    case CONTEXT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ActorDeathCause)
}

inline void ActorDeathCause::SharedCtor() {
clear_has_context();
}

ActorDeathCause::~ActorDeathCause() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ActorDeathCause)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActorDeathCause::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_context()) {
    clear_context();
  }
}

void ActorDeathCause::ArenaDtor(void* object) {
  ActorDeathCause* _this = reinterpret_cast< ActorDeathCause* >(object);
  (void)_this;
}
void ActorDeathCause::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActorDeathCause::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActorDeathCause::clear_context() {
// @@protoc_insertion_point(one_of_clear_start:mcs.rpc.ActorDeathCause)
  switch (context_case()) {
    case kCreationTaskFailureContext: {
      if (GetArenaForAllocation() == nullptr) {
        delete context_.creation_task_failure_context_;
      }
      break;
    }
    case kRuntimeEnvFailedContext: {
      if (GetArenaForAllocation() == nullptr) {
        delete context_.runtime_env_failed_context_;
      }
      break;
    }
    case kActorDiedErrorContext: {
      if (GetArenaForAllocation() == nullptr) {
        delete context_.actor_died_error_context_;
      }
      break;
    }
    case kActorUnschedulableContext: {
      if (GetArenaForAllocation() == nullptr) {
        delete context_.actor_unschedulable_context_;
      }
      break;
    }
    case CONTEXT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTEXT_NOT_SET;
}


void ActorDeathCause::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ActorDeathCause)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_context();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActorDeathCause::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mcs.rpc.McsException creation_task_failure_context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_creation_task_failure_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.RuntimeEnvFailedContext runtime_env_failed_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_runtime_env_failed_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.ActorDiedErrorContext actor_died_error_context = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_actor_died_error_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.ActorUnschedulableContext actor_unschedulable_context = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_actor_unschedulable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActorDeathCause::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ActorDeathCause)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mcs.rpc.McsException creation_task_failure_context = 1;
  if (_internal_has_creation_task_failure_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::creation_task_failure_context(this), target, stream);
  }

  // .mcs.rpc.RuntimeEnvFailedContext runtime_env_failed_context = 2;
  if (_internal_has_runtime_env_failed_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::runtime_env_failed_context(this), target, stream);
  }

  // .mcs.rpc.ActorDiedErrorContext actor_died_error_context = 3;
  if (_internal_has_actor_died_error_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::actor_died_error_context(this), target, stream);
  }

  // .mcs.rpc.ActorUnschedulableContext actor_unschedulable_context = 4;
  if (_internal_has_actor_unschedulable_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::actor_unschedulable_context(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ActorDeathCause)
  return target;
}

size_t ActorDeathCause::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ActorDeathCause)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (context_case()) {
    // .mcs.rpc.McsException creation_task_failure_context = 1;
    case kCreationTaskFailureContext: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *context_.creation_task_failure_context_);
      break;
    }
    // .mcs.rpc.RuntimeEnvFailedContext runtime_env_failed_context = 2;
    case kRuntimeEnvFailedContext: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *context_.runtime_env_failed_context_);
      break;
    }
    // .mcs.rpc.ActorDiedErrorContext actor_died_error_context = 3;
    case kActorDiedErrorContext: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *context_.actor_died_error_context_);
      break;
    }
    // .mcs.rpc.ActorUnschedulableContext actor_unschedulable_context = 4;
    case kActorUnschedulableContext: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *context_.actor_unschedulable_context_);
      break;
    }
    case CONTEXT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActorDeathCause::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActorDeathCause::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActorDeathCause::GetClassData() const { return &_class_data_; }

void ActorDeathCause::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ActorDeathCause *>(to)->MergeFrom(
      static_cast<const ActorDeathCause &>(from));
}


void ActorDeathCause::MergeFrom(const ActorDeathCause& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ActorDeathCause)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.context_case()) {
    case kCreationTaskFailureContext: {
      _internal_mutable_creation_task_failure_context()->::mcs::rpc::McsException::MergeFrom(from._internal_creation_task_failure_context());
      break;
    }
    case kRuntimeEnvFailedContext: {
      _internal_mutable_runtime_env_failed_context()->::mcs::rpc::RuntimeEnvFailedContext::MergeFrom(from._internal_runtime_env_failed_context());
      break;
    }
    case kActorDiedErrorContext: {
      _internal_mutable_actor_died_error_context()->::mcs::rpc::ActorDiedErrorContext::MergeFrom(from._internal_actor_died_error_context());
      break;
    }
    case kActorUnschedulableContext: {
      _internal_mutable_actor_unschedulable_context()->::mcs::rpc::ActorUnschedulableContext::MergeFrom(from._internal_actor_unschedulable_context());
      break;
    }
    case CONTEXT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActorDeathCause::CopyFrom(const ActorDeathCause& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ActorDeathCause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorDeathCause::IsInitialized() const {
  return true;
}

void ActorDeathCause::InternalSwap(ActorDeathCause* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(context_, other->context_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorDeathCause::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[15]);
}

// ===================================================================

class RuntimeEnvFailedContext::_Internal {
 public:
};

RuntimeEnvFailedContext::RuntimeEnvFailedContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.RuntimeEnvFailedContext)
}
RuntimeEnvFailedContext::RuntimeEnvFailedContext(const RuntimeEnvFailedContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.RuntimeEnvFailedContext)
}

inline void RuntimeEnvFailedContext::SharedCtor() {
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RuntimeEnvFailedContext::~RuntimeEnvFailedContext() {
  // @@protoc_insertion_point(destructor:mcs.rpc.RuntimeEnvFailedContext)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RuntimeEnvFailedContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RuntimeEnvFailedContext::ArenaDtor(void* object) {
  RuntimeEnvFailedContext* _this = reinterpret_cast< RuntimeEnvFailedContext* >(object);
  (void)_this;
}
void RuntimeEnvFailedContext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuntimeEnvFailedContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RuntimeEnvFailedContext::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.RuntimeEnvFailedContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuntimeEnvFailedContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string error_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.RuntimeEnvFailedContext.error_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuntimeEnvFailedContext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.RuntimeEnvFailedContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error_message = 1;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.RuntimeEnvFailedContext.error_message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.RuntimeEnvFailedContext)
  return target;
}

size_t RuntimeEnvFailedContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.RuntimeEnvFailedContext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 1;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RuntimeEnvFailedContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RuntimeEnvFailedContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RuntimeEnvFailedContext::GetClassData() const { return &_class_data_; }

void RuntimeEnvFailedContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RuntimeEnvFailedContext *>(to)->MergeFrom(
      static_cast<const RuntimeEnvFailedContext &>(from));
}


void RuntimeEnvFailedContext::MergeFrom(const RuntimeEnvFailedContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.RuntimeEnvFailedContext)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _internal_set_error_message(from._internal_error_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RuntimeEnvFailedContext::CopyFrom(const RuntimeEnvFailedContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.RuntimeEnvFailedContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeEnvFailedContext::IsInitialized() const {
  return true;
}

void RuntimeEnvFailedContext::InternalSwap(RuntimeEnvFailedContext* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, GetArenaForAllocation(),
      &other->error_message_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RuntimeEnvFailedContext::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[16]);
}

// ===================================================================

class ActorUnschedulableContext::_Internal {
 public:
};

ActorUnschedulableContext::ActorUnschedulableContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ActorUnschedulableContext)
}
ActorUnschedulableContext::ActorUnschedulableContext(const ActorUnschedulableContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ActorUnschedulableContext)
}

inline void ActorUnschedulableContext::SharedCtor() {
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ActorUnschedulableContext::~ActorUnschedulableContext() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ActorUnschedulableContext)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActorUnschedulableContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActorUnschedulableContext::ArenaDtor(void* object) {
  ActorUnschedulableContext* _this = reinterpret_cast< ActorUnschedulableContext* >(object);
  (void)_this;
}
void ActorUnschedulableContext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActorUnschedulableContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActorUnschedulableContext::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ActorUnschedulableContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActorUnschedulableContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string error_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ActorUnschedulableContext.error_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActorUnschedulableContext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ActorUnschedulableContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error_message = 1;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ActorUnschedulableContext.error_message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ActorUnschedulableContext)
  return target;
}

size_t ActorUnschedulableContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ActorUnschedulableContext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 1;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActorUnschedulableContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActorUnschedulableContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActorUnschedulableContext::GetClassData() const { return &_class_data_; }

void ActorUnschedulableContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ActorUnschedulableContext *>(to)->MergeFrom(
      static_cast<const ActorUnschedulableContext &>(from));
}


void ActorUnschedulableContext::MergeFrom(const ActorUnschedulableContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ActorUnschedulableContext)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _internal_set_error_message(from._internal_error_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActorUnschedulableContext::CopyFrom(const ActorUnschedulableContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ActorUnschedulableContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorUnschedulableContext::IsInitialized() const {
  return true;
}

void ActorUnschedulableContext::InternalSwap(ActorUnschedulableContext* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, GetArenaForAllocation(),
      &other->error_message_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorUnschedulableContext::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[17]);
}

// ===================================================================

class ActorDiedErrorContext::_Internal {
 public:
};

ActorDiedErrorContext::ActorDiedErrorContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ActorDiedErrorContext)
}
ActorDiedErrorContext::ActorDiedErrorContext(const ActorDiedErrorContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_id().empty()) {
    owner_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_id(), 
      GetArenaForAllocation());
  }
  owner_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_ip_address().empty()) {
    owner_ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_ip_address(), 
      GetArenaForAllocation());
  }
  node_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_ip_address().empty()) {
    node_ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_ip_address(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  mcs_namespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mcs_namespace().empty()) {
    mcs_namespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mcs_namespace(), 
      GetArenaForAllocation());
  }
  class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_class_name().empty()) {
    class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_class_name(), 
      GetArenaForAllocation());
  }
  actor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_actor_id().empty()) {
    actor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_actor_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&never_started_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(never_started_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ActorDiedErrorContext)
}

inline void ActorDiedErrorContext::SharedCtor() {
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
owner_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
node_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mcs_namespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
actor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&never_started_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(never_started_));
}

ActorDiedErrorContext::~ActorDiedErrorContext() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ActorDiedErrorContext)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActorDiedErrorContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mcs_namespace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActorDiedErrorContext::ArenaDtor(void* object) {
  ActorDiedErrorContext* _this = reinterpret_cast< ActorDiedErrorContext* >(object);
  (void)_this;
}
void ActorDiedErrorContext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActorDiedErrorContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActorDiedErrorContext::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ActorDiedErrorContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmpty();
  owner_id_.ClearToEmpty();
  owner_ip_address_.ClearToEmpty();
  node_ip_address_.ClearToEmpty();
  name_.ClearToEmpty();
  mcs_namespace_.ClearToEmpty();
  class_name_.ClearToEmpty();
  actor_id_.ClearToEmpty();
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&never_started_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(never_started_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActorDiedErrorContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string error_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ActorDiedErrorContext.error_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes owner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_owner_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner_ip_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_owner_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ActorDiedErrorContext.owner_ip_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_ip_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_node_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ActorDiedErrorContext.node_ip_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ActorDiedErrorContext.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mcs_namespace = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_mcs_namespace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ActorDiedErrorContext.mcs_namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string class_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_class_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ActorDiedErrorContext.class_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes actor_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_actor_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool never_started = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          never_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActorDiedErrorContext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ActorDiedErrorContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error_message = 1;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ActorDiedErrorContext.error_message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error_message(), target);
  }

  // bytes owner_id = 2;
  if (!this->_internal_owner_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_owner_id(), target);
  }

  // string owner_ip_address = 3;
  if (!this->_internal_owner_ip_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_ip_address().data(), static_cast<int>(this->_internal_owner_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ActorDiedErrorContext.owner_ip_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_owner_ip_address(), target);
  }

  // string node_ip_address = 4;
  if (!this->_internal_node_ip_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_ip_address().data(), static_cast<int>(this->_internal_node_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ActorDiedErrorContext.node_ip_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_node_ip_address(), target);
  }

  // uint32 pid = 5;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_pid(), target);
  }

  // string name = 6;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ActorDiedErrorContext.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  // string mcs_namespace = 7;
  if (!this->_internal_mcs_namespace().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mcs_namespace().data(), static_cast<int>(this->_internal_mcs_namespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ActorDiedErrorContext.mcs_namespace");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_mcs_namespace(), target);
  }

  // string class_name = 8;
  if (!this->_internal_class_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_name().data(), static_cast<int>(this->_internal_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ActorDiedErrorContext.class_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_class_name(), target);
  }

  // bytes actor_id = 9;
  if (!this->_internal_actor_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_actor_id(), target);
  }

  // bool never_started = 10;
  if (this->_internal_never_started() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_never_started(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ActorDiedErrorContext)
  return target;
}

size_t ActorDiedErrorContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ActorDiedErrorContext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 1;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // bytes owner_id = 2;
  if (!this->_internal_owner_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_id());
  }

  // string owner_ip_address = 3;
  if (!this->_internal_owner_ip_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_ip_address());
  }

  // string node_ip_address = 4;
  if (!this->_internal_node_ip_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_ip_address());
  }

  // string name = 6;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string mcs_namespace = 7;
  if (!this->_internal_mcs_namespace().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mcs_namespace());
  }

  // string class_name = 8;
  if (!this->_internal_class_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_name());
  }

  // bytes actor_id = 9;
  if (!this->_internal_actor_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_actor_id());
  }

  // uint32 pid = 5;
  if (this->_internal_pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pid());
  }

  // bool never_started = 10;
  if (this->_internal_never_started() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActorDiedErrorContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActorDiedErrorContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActorDiedErrorContext::GetClassData() const { return &_class_data_; }

void ActorDiedErrorContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ActorDiedErrorContext *>(to)->MergeFrom(
      static_cast<const ActorDiedErrorContext &>(from));
}


void ActorDiedErrorContext::MergeFrom(const ActorDiedErrorContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ActorDiedErrorContext)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (!from._internal_owner_id().empty()) {
    _internal_set_owner_id(from._internal_owner_id());
  }
  if (!from._internal_owner_ip_address().empty()) {
    _internal_set_owner_ip_address(from._internal_owner_ip_address());
  }
  if (!from._internal_node_ip_address().empty()) {
    _internal_set_node_ip_address(from._internal_node_ip_address());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_mcs_namespace().empty()) {
    _internal_set_mcs_namespace(from._internal_mcs_namespace());
  }
  if (!from._internal_class_name().empty()) {
    _internal_set_class_name(from._internal_class_name());
  }
  if (!from._internal_actor_id().empty()) {
    _internal_set_actor_id(from._internal_actor_id());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_never_started() != 0) {
    _internal_set_never_started(from._internal_never_started());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActorDiedErrorContext::CopyFrom(const ActorDiedErrorContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ActorDiedErrorContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorDiedErrorContext::IsInitialized() const {
  return true;
}

void ActorDiedErrorContext::InternalSwap(ActorDiedErrorContext* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, GetArenaForAllocation(),
      &other->error_message_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_id_, GetArenaForAllocation(),
      &other->owner_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_ip_address_, GetArenaForAllocation(),
      &other->owner_ip_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_ip_address_, GetArenaForAllocation(),
      &other->node_ip_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mcs_namespace_, GetArenaForAllocation(),
      &other->mcs_namespace_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &class_name_, GetArenaForAllocation(),
      &other->class_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &actor_id_, GetArenaForAllocation(),
      &other->actor_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActorDiedErrorContext, never_started_)
      + sizeof(ActorDiedErrorContext::never_started_)
      - PROTOBUF_FIELD_OFFSET(ActorDiedErrorContext, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorDiedErrorContext::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[18]);
}

// ===================================================================

TaskSpec_RequiredResourcesEntry_DoNotUse::TaskSpec_RequiredResourcesEntry_DoNotUse() {}
TaskSpec_RequiredResourcesEntry_DoNotUse::TaskSpec_RequiredResourcesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TaskSpec_RequiredResourcesEntry_DoNotUse::MergeFrom(const TaskSpec_RequiredResourcesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TaskSpec_RequiredResourcesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[19]);
}

// ===================================================================

TaskSpec_RequiredPlacementResourcesEntry_DoNotUse::TaskSpec_RequiredPlacementResourcesEntry_DoNotUse() {}
TaskSpec_RequiredPlacementResourcesEntry_DoNotUse::TaskSpec_RequiredPlacementResourcesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TaskSpec_RequiredPlacementResourcesEntry_DoNotUse::MergeFrom(const TaskSpec_RequiredPlacementResourcesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TaskSpec_RequiredPlacementResourcesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[20]);
}

// ===================================================================

class TaskSpec::_Internal {
 public:
  static const ::mcs::rpc::FunctionDescriptor& function_descriptor(const TaskSpec* msg);
  static const ::mcs::rpc::Address& caller_address(const TaskSpec* msg);
  static const ::mcs::rpc::ActorCreationTaskSpec& actor_creation_task_spec(const TaskSpec* msg);
  static const ::mcs::rpc::ActorTaskSpec& actor_task_spec(const TaskSpec* msg);
  static const ::mcs::rpc::RuntimeEnvInfo& runtime_env_info(const TaskSpec* msg);
  static const ::mcs::rpc::SchedulingStrategy& scheduling_strategy(const TaskSpec* msg);
};

const ::mcs::rpc::FunctionDescriptor&
TaskSpec::_Internal::function_descriptor(const TaskSpec* msg) {
  return *msg->function_descriptor_;
}
const ::mcs::rpc::Address&
TaskSpec::_Internal::caller_address(const TaskSpec* msg) {
  return *msg->caller_address_;
}
const ::mcs::rpc::ActorCreationTaskSpec&
TaskSpec::_Internal::actor_creation_task_spec(const TaskSpec* msg) {
  return *msg->actor_creation_task_spec_;
}
const ::mcs::rpc::ActorTaskSpec&
TaskSpec::_Internal::actor_task_spec(const TaskSpec* msg) {
  return *msg->actor_task_spec_;
}
const ::mcs::rpc::RuntimeEnvInfo&
TaskSpec::_Internal::runtime_env_info(const TaskSpec* msg) {
  return *msg->runtime_env_info_;
}
const ::mcs::rpc::SchedulingStrategy&
TaskSpec::_Internal::scheduling_strategy(const TaskSpec* msg) {
  return *msg->scheduling_strategy_;
}
void TaskSpec::clear_runtime_env_info() {
  if (GetArenaForAllocation() == nullptr && runtime_env_info_ != nullptr) {
    delete runtime_env_info_;
  }
  runtime_env_info_ = nullptr;
}
TaskSpec::TaskSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  args_(arena),
  required_resources_(arena),
  required_placement_resources_(arena),
  dynamic_return_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.TaskSpec)
}
TaskSpec::TaskSpec(const TaskSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      args_(from.args_),
      dynamic_return_ids_(from.dynamic_return_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  required_resources_.MergeFrom(from.required_resources_);
  required_placement_resources_.MergeFrom(from.required_placement_resources_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_job_id().empty()) {
    job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_job_id(), 
      GetArenaForAllocation());
  }
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_id().empty()) {
    task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_id(), 
      GetArenaForAllocation());
  }
  parent_task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent_task_id().empty()) {
    parent_task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent_task_id(), 
      GetArenaForAllocation());
  }
  caller_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_caller_id().empty()) {
    caller_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_caller_id(), 
      GetArenaForAllocation());
  }
  debugger_breakpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_debugger_breakpoint().empty()) {
    debugger_breakpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_debugger_breakpoint(), 
      GetArenaForAllocation());
  }
  concurrency_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_concurrency_group_name().empty()) {
    concurrency_group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_concurrency_group_name(), 
      GetArenaForAllocation());
  }
  serialized_retry_exception_allowlist_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serialized_retry_exception_allowlist().empty()) {
    serialized_retry_exception_allowlist_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serialized_retry_exception_allowlist(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_function_descriptor()) {
    function_descriptor_ = new ::mcs::rpc::FunctionDescriptor(*from.function_descriptor_);
  } else {
    function_descriptor_ = nullptr;
  }
  if (from._internal_has_caller_address()) {
    caller_address_ = new ::mcs::rpc::Address(*from.caller_address_);
  } else {
    caller_address_ = nullptr;
  }
  if (from._internal_has_actor_creation_task_spec()) {
    actor_creation_task_spec_ = new ::mcs::rpc::ActorCreationTaskSpec(*from.actor_creation_task_spec_);
  } else {
    actor_creation_task_spec_ = nullptr;
  }
  if (from._internal_has_actor_task_spec()) {
    actor_task_spec_ = new ::mcs::rpc::ActorTaskSpec(*from.actor_task_spec_);
  } else {
    actor_task_spec_ = nullptr;
  }
  if (from._internal_has_runtime_env_info()) {
    runtime_env_info_ = new ::mcs::rpc::RuntimeEnvInfo(*from.runtime_env_info_);
  } else {
    runtime_env_info_ = nullptr;
  }
  if (from._internal_has_scheduling_strategy()) {
    scheduling_strategy_ = new ::mcs::rpc::SchedulingStrategy(*from.scheduling_strategy_);
  } else {
    scheduling_strategy_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&attempt_number_) -
    reinterpret_cast<char*>(&type_)) + sizeof(attempt_number_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.TaskSpec)
}

inline void TaskSpec::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
parent_task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
caller_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
debugger_breakpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
concurrency_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
serialized_retry_exception_allowlist_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&function_descriptor_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attempt_number_) -
    reinterpret_cast<char*>(&function_descriptor_)) + sizeof(attempt_number_));
}

TaskSpec::~TaskSpec() {
  // @@protoc_insertion_point(destructor:mcs.rpc.TaskSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  job_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  caller_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  debugger_breakpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  concurrency_group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_retry_exception_allowlist_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete function_descriptor_;
  if (this != internal_default_instance()) delete caller_address_;
  if (this != internal_default_instance()) delete actor_creation_task_spec_;
  if (this != internal_default_instance()) delete actor_task_spec_;
  if (this != internal_default_instance()) delete runtime_env_info_;
  if (this != internal_default_instance()) delete scheduling_strategy_;
}

void TaskSpec::ArenaDtor(void* object) {
  TaskSpec* _this = reinterpret_cast< TaskSpec* >(object);
  (void)_this;
  _this->required_resources_. ~MapField();
  _this->required_placement_resources_. ~MapField();
}
inline void TaskSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &TaskSpec::ArenaDtor);
  }
}
void TaskSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.TaskSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  required_resources_.Clear();
  required_placement_resources_.Clear();
  dynamic_return_ids_.Clear();
  name_.ClearToEmpty();
  job_id_.ClearToEmpty();
  task_id_.ClearToEmpty();
  parent_task_id_.ClearToEmpty();
  caller_id_.ClearToEmpty();
  debugger_breakpoint_.ClearToEmpty();
  concurrency_group_name_.ClearToEmpty();
  serialized_retry_exception_allowlist_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && function_descriptor_ != nullptr) {
    delete function_descriptor_;
  }
  function_descriptor_ = nullptr;
  if (GetArenaForAllocation() == nullptr && caller_address_ != nullptr) {
    delete caller_address_;
  }
  caller_address_ = nullptr;
  if (GetArenaForAllocation() == nullptr && actor_creation_task_spec_ != nullptr) {
    delete actor_creation_task_spec_;
  }
  actor_creation_task_spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && actor_task_spec_ != nullptr) {
    delete actor_task_spec_;
  }
  actor_task_spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && runtime_env_info_ != nullptr) {
    delete runtime_env_info_;
  }
  runtime_env_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && scheduling_strategy_ != nullptr) {
    delete scheduling_strategy_;
  }
  scheduling_strategy_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attempt_number_) -
      reinterpret_cast<char*>(&type_)) + sizeof(attempt_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mcs.rpc.TaskType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::mcs::rpc::TaskType>(val));
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.TaskSpec.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.Language language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language(static_cast<::mcs::rpc::Language>(val));
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.FunctionDescriptor function_descriptor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_function_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes job_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_job_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes task_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes parent_task_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_parent_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 parent_counter = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          parent_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes caller_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_caller_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.Address caller_address = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_caller_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mcs.rpc.TaskArg args = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 num_returns = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          num_returns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, double> required_resources = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&required_resources_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, double> required_placement_resources = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&required_placement_resources_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.ActorCreationTaskSpec actor_creation_task_spec = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_actor_creation_task_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.ActorTaskSpec actor_task_spec = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_actor_task_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_retries = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          max_retries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool skip_execution = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          skip_execution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes debugger_breakpoint = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_debugger_breakpoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.RuntimeEnvInfo runtime_env_info = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_runtime_env_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string concurrency_group_name = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_concurrency_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.TaskSpec.concurrency_group_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool retry_exceptions = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          retry_exceptions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes serialized_retry_exception_allowlist = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_serialized_retry_exception_allowlist();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 depth = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.SchedulingStrategy scheduling_strategy = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_scheduling_strategy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 attempt_number = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          attempt_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool returns_dynamic = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          returns_dynamic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes dynamic_return_ids = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_dynamic_return_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.TaskSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mcs.rpc.TaskType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.TaskSpec.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .mcs.rpc.Language language = 3;
  if (this->_internal_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_language(), target);
  }

  // .mcs.rpc.FunctionDescriptor function_descriptor = 4;
  if (this->_internal_has_function_descriptor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::function_descriptor(this), target, stream);
  }

  // bytes job_id = 5;
  if (!this->_internal_job_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_job_id(), target);
  }

  // bytes task_id = 6;
  if (!this->_internal_task_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_task_id(), target);
  }

  // bytes parent_task_id = 7;
  if (!this->_internal_parent_task_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_parent_task_id(), target);
  }

  // uint64 parent_counter = 8;
  if (this->_internal_parent_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_parent_counter(), target);
  }

  // bytes caller_id = 9;
  if (!this->_internal_caller_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_caller_id(), target);
  }

  // .mcs.rpc.Address caller_address = 10;
  if (this->_internal_has_caller_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::caller_address(this), target, stream);
  }

  // repeated .mcs.rpc.TaskArg args = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_args(i), target, stream);
  }

  // uint64 num_returns = 12;
  if (this->_internal_num_returns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_num_returns(), target);
  }

  // map<string, double> required_resources = 13;
  if (!this->_internal_required_resources().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mcs.rpc.TaskSpec.RequiredResourcesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_required_resources().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_required_resources().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_required_resources().begin();
          it != this->_internal_required_resources().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TaskSpec_RequiredResourcesEntry_DoNotUse::Funcs::InternalSerialize(13, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_required_resources().begin();
          it != this->_internal_required_resources().end(); ++it) {
        target = TaskSpec_RequiredResourcesEntry_DoNotUse::Funcs::InternalSerialize(13, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, double> required_placement_resources = 14;
  if (!this->_internal_required_placement_resources().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mcs.rpc.TaskSpec.RequiredPlacementResourcesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_required_placement_resources().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_required_placement_resources().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_required_placement_resources().begin();
          it != this->_internal_required_placement_resources().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TaskSpec_RequiredPlacementResourcesEntry_DoNotUse::Funcs::InternalSerialize(14, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_required_placement_resources().begin();
          it != this->_internal_required_placement_resources().end(); ++it) {
        target = TaskSpec_RequiredPlacementResourcesEntry_DoNotUse::Funcs::InternalSerialize(14, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .mcs.rpc.ActorCreationTaskSpec actor_creation_task_spec = 15;
  if (this->_internal_has_actor_creation_task_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::actor_creation_task_spec(this), target, stream);
  }

  // .mcs.rpc.ActorTaskSpec actor_task_spec = 16;
  if (this->_internal_has_actor_task_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::actor_task_spec(this), target, stream);
  }

  // int32 max_retries = 17;
  if (this->_internal_max_retries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_max_retries(), target);
  }

  // bool skip_execution = 21;
  if (this->_internal_skip_execution() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_skip_execution(), target);
  }

  // bytes debugger_breakpoint = 22;
  if (!this->_internal_debugger_breakpoint().empty()) {
    target = stream->WriteBytesMaybeAliased(
        22, this->_internal_debugger_breakpoint(), target);
  }

  // .mcs.rpc.RuntimeEnvInfo runtime_env_info = 23;
  if (this->_internal_has_runtime_env_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::runtime_env_info(this), target, stream);
  }

  // string concurrency_group_name = 24;
  if (!this->_internal_concurrency_group_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concurrency_group_name().data(), static_cast<int>(this->_internal_concurrency_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.TaskSpec.concurrency_group_name");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_concurrency_group_name(), target);
  }

  // bool retry_exceptions = 25;
  if (this->_internal_retry_exceptions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_retry_exceptions(), target);
  }

  // bytes serialized_retry_exception_allowlist = 26;
  if (!this->_internal_serialized_retry_exception_allowlist().empty()) {
    target = stream->WriteBytesMaybeAliased(
        26, this->_internal_serialized_retry_exception_allowlist(), target);
  }

  // int64 depth = 27;
  if (this->_internal_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(27, this->_internal_depth(), target);
  }

  // .mcs.rpc.SchedulingStrategy scheduling_strategy = 28;
  if (this->_internal_has_scheduling_strategy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::scheduling_strategy(this), target, stream);
  }

  // uint64 attempt_number = 29;
  if (this->_internal_attempt_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(29, this->_internal_attempt_number(), target);
  }

  // bool returns_dynamic = 30;
  if (this->_internal_returns_dynamic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_returns_dynamic(), target);
  }

  // repeated bytes dynamic_return_ids = 31;
  for (int i = 0, n = this->_internal_dynamic_return_ids_size(); i < n; i++) {
    const auto& s = this->_internal_dynamic_return_ids(i);
    target = stream->WriteBytes(31, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.TaskSpec)
  return target;
}

size_t TaskSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.TaskSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mcs.rpc.TaskArg args = 11;
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, double> required_resources = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_required_resources_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_required_resources().begin();
      it != this->_internal_required_resources().end(); ++it) {
    total_size += TaskSpec_RequiredResourcesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, double> required_placement_resources = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_required_placement_resources_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_required_placement_resources().begin();
      it != this->_internal_required_placement_resources().end(); ++it) {
    total_size += TaskSpec_RequiredPlacementResourcesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated bytes dynamic_return_ids = 31;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dynamic_return_ids_.size());
  for (int i = 0, n = dynamic_return_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      dynamic_return_ids_.Get(i));
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes job_id = 5;
  if (!this->_internal_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_job_id());
  }

  // bytes task_id = 6;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_task_id());
  }

  // bytes parent_task_id = 7;
  if (!this->_internal_parent_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_parent_task_id());
  }

  // bytes caller_id = 9;
  if (!this->_internal_caller_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_caller_id());
  }

  // bytes debugger_breakpoint = 22;
  if (!this->_internal_debugger_breakpoint().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_debugger_breakpoint());
  }

  // string concurrency_group_name = 24;
  if (!this->_internal_concurrency_group_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concurrency_group_name());
  }

  // bytes serialized_retry_exception_allowlist = 26;
  if (!this->_internal_serialized_retry_exception_allowlist().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_serialized_retry_exception_allowlist());
  }

  // .mcs.rpc.FunctionDescriptor function_descriptor = 4;
  if (this->_internal_has_function_descriptor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *function_descriptor_);
  }

  // .mcs.rpc.Address caller_address = 10;
  if (this->_internal_has_caller_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *caller_address_);
  }

  // .mcs.rpc.ActorCreationTaskSpec actor_creation_task_spec = 15;
  if (this->_internal_has_actor_creation_task_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actor_creation_task_spec_);
  }

  // .mcs.rpc.ActorTaskSpec actor_task_spec = 16;
  if (this->_internal_has_actor_task_spec()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actor_task_spec_);
  }

  // .mcs.rpc.RuntimeEnvInfo runtime_env_info = 23;
  if (this->_internal_has_runtime_env_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *runtime_env_info_);
  }

  // .mcs.rpc.SchedulingStrategy scheduling_strategy = 28;
  if (this->_internal_has_scheduling_strategy()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scheduling_strategy_);
  }

  // .mcs.rpc.TaskType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .mcs.rpc.Language language = 3;
  if (this->_internal_language() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_language());
  }

  // uint64 parent_counter = 8;
  if (this->_internal_parent_counter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_parent_counter());
  }

  // uint64 num_returns = 12;
  if (this->_internal_num_returns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_returns());
  }

  // int32 max_retries = 17;
  if (this->_internal_max_retries() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_retries());
  }

  // bool skip_execution = 21;
  if (this->_internal_skip_execution() != 0) {
    total_size += 2 + 1;
  }

  // bool retry_exceptions = 25;
  if (this->_internal_retry_exceptions() != 0) {
    total_size += 2 + 1;
  }

  // bool returns_dynamic = 30;
  if (this->_internal_returns_dynamic() != 0) {
    total_size += 2 + 1;
  }

  // int64 depth = 27;
  if (this->_internal_depth() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_depth());
  }

  // uint64 attempt_number = 29;
  if (this->_internal_attempt_number() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_attempt_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskSpec::GetClassData() const { return &_class_data_; }

void TaskSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TaskSpec *>(to)->MergeFrom(
      static_cast<const TaskSpec &>(from));
}


void TaskSpec::MergeFrom(const TaskSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.TaskSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  required_resources_.MergeFrom(from.required_resources_);
  required_placement_resources_.MergeFrom(from.required_placement_resources_);
  dynamic_return_ids_.MergeFrom(from.dynamic_return_ids_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_job_id().empty()) {
    _internal_set_job_id(from._internal_job_id());
  }
  if (!from._internal_task_id().empty()) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (!from._internal_parent_task_id().empty()) {
    _internal_set_parent_task_id(from._internal_parent_task_id());
  }
  if (!from._internal_caller_id().empty()) {
    _internal_set_caller_id(from._internal_caller_id());
  }
  if (!from._internal_debugger_breakpoint().empty()) {
    _internal_set_debugger_breakpoint(from._internal_debugger_breakpoint());
  }
  if (!from._internal_concurrency_group_name().empty()) {
    _internal_set_concurrency_group_name(from._internal_concurrency_group_name());
  }
  if (!from._internal_serialized_retry_exception_allowlist().empty()) {
    _internal_set_serialized_retry_exception_allowlist(from._internal_serialized_retry_exception_allowlist());
  }
  if (from._internal_has_function_descriptor()) {
    _internal_mutable_function_descriptor()->::mcs::rpc::FunctionDescriptor::MergeFrom(from._internal_function_descriptor());
  }
  if (from._internal_has_caller_address()) {
    _internal_mutable_caller_address()->::mcs::rpc::Address::MergeFrom(from._internal_caller_address());
  }
  if (from._internal_has_actor_creation_task_spec()) {
    _internal_mutable_actor_creation_task_spec()->::mcs::rpc::ActorCreationTaskSpec::MergeFrom(from._internal_actor_creation_task_spec());
  }
  if (from._internal_has_actor_task_spec()) {
    _internal_mutable_actor_task_spec()->::mcs::rpc::ActorTaskSpec::MergeFrom(from._internal_actor_task_spec());
  }
  if (from._internal_has_runtime_env_info()) {
    _internal_mutable_runtime_env_info()->::mcs::rpc::RuntimeEnvInfo::MergeFrom(from._internal_runtime_env_info());
  }
  if (from._internal_has_scheduling_strategy()) {
    _internal_mutable_scheduling_strategy()->::mcs::rpc::SchedulingStrategy::MergeFrom(from._internal_scheduling_strategy());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_language() != 0) {
    _internal_set_language(from._internal_language());
  }
  if (from._internal_parent_counter() != 0) {
    _internal_set_parent_counter(from._internal_parent_counter());
  }
  if (from._internal_num_returns() != 0) {
    _internal_set_num_returns(from._internal_num_returns());
  }
  if (from._internal_max_retries() != 0) {
    _internal_set_max_retries(from._internal_max_retries());
  }
  if (from._internal_skip_execution() != 0) {
    _internal_set_skip_execution(from._internal_skip_execution());
  }
  if (from._internal_retry_exceptions() != 0) {
    _internal_set_retry_exceptions(from._internal_retry_exceptions());
  }
  if (from._internal_returns_dynamic() != 0) {
    _internal_set_returns_dynamic(from._internal_returns_dynamic());
  }
  if (from._internal_depth() != 0) {
    _internal_set_depth(from._internal_depth());
  }
  if (from._internal_attempt_number() != 0) {
    _internal_set_attempt_number(from._internal_attempt_number());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskSpec::CopyFrom(const TaskSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.TaskSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskSpec::IsInitialized() const {
  return true;
}

void TaskSpec::InternalSwap(TaskSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  args_.InternalSwap(&other->args_);
  required_resources_.InternalSwap(&other->required_resources_);
  required_placement_resources_.InternalSwap(&other->required_placement_resources_);
  dynamic_return_ids_.InternalSwap(&other->dynamic_return_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &job_id_, GetArenaForAllocation(),
      &other->job_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &task_id_, GetArenaForAllocation(),
      &other->task_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &parent_task_id_, GetArenaForAllocation(),
      &other->parent_task_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &caller_id_, GetArenaForAllocation(),
      &other->caller_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &debugger_breakpoint_, GetArenaForAllocation(),
      &other->debugger_breakpoint_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &concurrency_group_name_, GetArenaForAllocation(),
      &other->concurrency_group_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serialized_retry_exception_allowlist_, GetArenaForAllocation(),
      &other->serialized_retry_exception_allowlist_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskSpec, attempt_number_)
      + sizeof(TaskSpec::attempt_number_)
      - PROTOBUF_FIELD_OFFSET(TaskSpec, function_descriptor_)>(
          reinterpret_cast<char*>(&function_descriptor_),
          reinterpret_cast<char*>(&other->function_descriptor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[21]);
}

// ===================================================================

TaskInfoEntry_RequiredResourcesEntry_DoNotUse::TaskInfoEntry_RequiredResourcesEntry_DoNotUse() {}
TaskInfoEntry_RequiredResourcesEntry_DoNotUse::TaskInfoEntry_RequiredResourcesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TaskInfoEntry_RequiredResourcesEntry_DoNotUse::MergeFrom(const TaskInfoEntry_RequiredResourcesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TaskInfoEntry_RequiredResourcesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[22]);
}

// ===================================================================

class TaskInfoEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<TaskInfoEntry>()._has_bits_);
  static const ::mcs::rpc::RuntimeEnvInfo& runtime_env_info(const TaskInfoEntry* msg);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_actor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mcs::rpc::RuntimeEnvInfo&
TaskInfoEntry::_Internal::runtime_env_info(const TaskInfoEntry* msg) {
  return *msg->runtime_env_info_;
}
void TaskInfoEntry::clear_runtime_env_info() {
  if (GetArenaForAllocation() == nullptr && runtime_env_info_ != nullptr) {
    delete runtime_env_info_;
  }
  runtime_env_info_ = nullptr;
}
TaskInfoEntry::TaskInfoEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  required_resources_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.TaskInfoEntry)
}
TaskInfoEntry::TaskInfoEntry(const TaskInfoEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  required_resources_.MergeFrom(from.required_resources_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  func_or_class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_func_or_class_name().empty()) {
    func_or_class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_func_or_class_name(), 
      GetArenaForAllocation());
  }
  job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_job_id().empty()) {
    job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_job_id(), 
      GetArenaForAllocation());
  }
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_id().empty()) {
    task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_id(), 
      GetArenaForAllocation());
  }
  parent_task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent_task_id().empty()) {
    parent_task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent_task_id(), 
      GetArenaForAllocation());
  }
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_node_id()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(), 
      GetArenaForAllocation());
  }
  actor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_actor_id()) {
    actor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_actor_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_runtime_env_info()) {
    runtime_env_info_ = new ::mcs::rpc::RuntimeEnvInfo(*from.runtime_env_info_);
  } else {
    runtime_env_info_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&scheduling_state_) -
    reinterpret_cast<char*>(&type_)) + sizeof(scheduling_state_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.TaskInfoEntry)
}

inline void TaskInfoEntry::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
func_or_class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
parent_task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
actor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&runtime_env_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scheduling_state_) -
    reinterpret_cast<char*>(&runtime_env_info_)) + sizeof(scheduling_state_));
}

TaskInfoEntry::~TaskInfoEntry() {
  // @@protoc_insertion_point(destructor:mcs.rpc.TaskInfoEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskInfoEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  func_or_class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  job_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete runtime_env_info_;
}

void TaskInfoEntry::ArenaDtor(void* object) {
  TaskInfoEntry* _this = reinterpret_cast< TaskInfoEntry* >(object);
  (void)_this;
  _this->required_resources_. ~MapField();
}
inline void TaskInfoEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &TaskInfoEntry::ArenaDtor);
  }
}
void TaskInfoEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskInfoEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.TaskInfoEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  required_resources_.Clear();
  name_.ClearToEmpty();
  func_or_class_name_.ClearToEmpty();
  job_id_.ClearToEmpty();
  task_id_.ClearToEmpty();
  parent_task_id_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      node_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      actor_id_.ClearNonDefaultToEmpty();
    }
  }
  if (GetArenaForAllocation() == nullptr && runtime_env_info_ != nullptr) {
    delete runtime_env_info_;
  }
  runtime_env_info_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scheduling_state_) -
      reinterpret_cast<char*>(&type_)) + sizeof(scheduling_state_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskInfoEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mcs.rpc.TaskType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::mcs::rpc::TaskType>(val));
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.TaskInfoEntry.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.Language language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language(static_cast<::mcs::rpc::Language>(val));
        } else goto handle_unusual;
        continue;
      // string func_or_class_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_func_or_class_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.TaskInfoEntry.func_or_class_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.TaskStatus scheduling_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scheduling_state(static_cast<::mcs::rpc::TaskStatus>(val));
        } else goto handle_unusual;
        continue;
      // bytes job_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_job_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes task_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes parent_task_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_parent_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, double> required_resources = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&required_resources_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.RuntimeEnvInfo runtime_env_info = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_runtime_env_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes node_id = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes actor_id = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_actor_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskInfoEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.TaskInfoEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mcs.rpc.TaskType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.TaskInfoEntry.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .mcs.rpc.Language language = 3;
  if (this->_internal_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_language(), target);
  }

  // string func_or_class_name = 4;
  if (!this->_internal_func_or_class_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_func_or_class_name().data(), static_cast<int>(this->_internal_func_or_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.TaskInfoEntry.func_or_class_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_func_or_class_name(), target);
  }

  // .mcs.rpc.TaskStatus scheduling_state = 5;
  if (this->_internal_scheduling_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_scheduling_state(), target);
  }

  // bytes job_id = 6;
  if (!this->_internal_job_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_job_id(), target);
  }

  // bytes task_id = 7;
  if (!this->_internal_task_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_task_id(), target);
  }

  // bytes parent_task_id = 8;
  if (!this->_internal_parent_task_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_parent_task_id(), target);
  }

  // map<string, double> required_resources = 13;
  if (!this->_internal_required_resources().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mcs.rpc.TaskInfoEntry.RequiredResourcesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_required_resources().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_required_resources().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_required_resources().begin();
          it != this->_internal_required_resources().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TaskInfoEntry_RequiredResourcesEntry_DoNotUse::Funcs::InternalSerialize(13, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_required_resources().begin();
          it != this->_internal_required_resources().end(); ++it) {
        target = TaskInfoEntry_RequiredResourcesEntry_DoNotUse::Funcs::InternalSerialize(13, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .mcs.rpc.RuntimeEnvInfo runtime_env_info = 23;
  if (this->_internal_has_runtime_env_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::runtime_env_info(this), target, stream);
  }

  // optional bytes node_id = 24;
  if (_internal_has_node_id()) {
    target = stream->WriteBytesMaybeAliased(
        24, this->_internal_node_id(), target);
  }

  // optional bytes actor_id = 25;
  if (_internal_has_actor_id()) {
    target = stream->WriteBytesMaybeAliased(
        25, this->_internal_actor_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.TaskInfoEntry)
  return target;
}

size_t TaskInfoEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.TaskInfoEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, double> required_resources = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_required_resources_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_required_resources().begin();
      it != this->_internal_required_resources().end(); ++it) {
    total_size += TaskInfoEntry_RequiredResourcesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string func_or_class_name = 4;
  if (!this->_internal_func_or_class_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_func_or_class_name());
  }

  // bytes job_id = 6;
  if (!this->_internal_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_job_id());
  }

  // bytes task_id = 7;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_task_id());
  }

  // bytes parent_task_id = 8;
  if (!this->_internal_parent_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_parent_task_id());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes node_id = 24;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_node_id());
    }

    // optional bytes actor_id = 25;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_actor_id());
    }

  }
  // .mcs.rpc.RuntimeEnvInfo runtime_env_info = 23;
  if (this->_internal_has_runtime_env_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *runtime_env_info_);
  }

  // .mcs.rpc.TaskType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .mcs.rpc.Language language = 3;
  if (this->_internal_language() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_language());
  }

  // .mcs.rpc.TaskStatus scheduling_state = 5;
  if (this->_internal_scheduling_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scheduling_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskInfoEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskInfoEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskInfoEntry::GetClassData() const { return &_class_data_; }

void TaskInfoEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TaskInfoEntry *>(to)->MergeFrom(
      static_cast<const TaskInfoEntry &>(from));
}


void TaskInfoEntry::MergeFrom(const TaskInfoEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.TaskInfoEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  required_resources_.MergeFrom(from.required_resources_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_func_or_class_name().empty()) {
    _internal_set_func_or_class_name(from._internal_func_or_class_name());
  }
  if (!from._internal_job_id().empty()) {
    _internal_set_job_id(from._internal_job_id());
  }
  if (!from._internal_task_id().empty()) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (!from._internal_parent_task_id().empty()) {
    _internal_set_parent_task_id(from._internal_parent_task_id());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_node_id(from._internal_node_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_actor_id(from._internal_actor_id());
    }
  }
  if (from._internal_has_runtime_env_info()) {
    _internal_mutable_runtime_env_info()->::mcs::rpc::RuntimeEnvInfo::MergeFrom(from._internal_runtime_env_info());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_language() != 0) {
    _internal_set_language(from._internal_language());
  }
  if (from._internal_scheduling_state() != 0) {
    _internal_set_scheduling_state(from._internal_scheduling_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskInfoEntry::CopyFrom(const TaskInfoEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.TaskInfoEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInfoEntry::IsInitialized() const {
  return true;
}

void TaskInfoEntry::InternalSwap(TaskInfoEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  required_resources_.InternalSwap(&other->required_resources_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &func_or_class_name_, GetArenaForAllocation(),
      &other->func_or_class_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &job_id_, GetArenaForAllocation(),
      &other->job_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &task_id_, GetArenaForAllocation(),
      &other->task_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &parent_task_id_, GetArenaForAllocation(),
      &other->parent_task_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_id_, GetArenaForAllocation(),
      &other->node_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &actor_id_, GetArenaForAllocation(),
      &other->actor_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskInfoEntry, scheduling_state_)
      + sizeof(TaskInfoEntry::scheduling_state_)
      - PROTOBUF_FIELD_OFFSET(TaskInfoEntry, runtime_env_info_)>(
          reinterpret_cast<char*>(&runtime_env_info_),
          reinterpret_cast<char*>(&other->runtime_env_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskInfoEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[23]);
}

// ===================================================================

class Bundle_BundleIdentifier::_Internal {
 public:
};

Bundle_BundleIdentifier::Bundle_BundleIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.Bundle.BundleIdentifier)
}
Bundle_BundleIdentifier::Bundle_BundleIdentifier(const Bundle_BundleIdentifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  placement_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_placement_group_id().empty()) {
    placement_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_placement_group_id(), 
      GetArenaForAllocation());
  }
  bundle_index_ = from.bundle_index_;
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.Bundle.BundleIdentifier)
}

inline void Bundle_BundleIdentifier::SharedCtor() {
placement_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bundle_index_ = 0;
}

Bundle_BundleIdentifier::~Bundle_BundleIdentifier() {
  // @@protoc_insertion_point(destructor:mcs.rpc.Bundle.BundleIdentifier)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Bundle_BundleIdentifier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  placement_group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Bundle_BundleIdentifier::ArenaDtor(void* object) {
  Bundle_BundleIdentifier* _this = reinterpret_cast< Bundle_BundleIdentifier* >(object);
  (void)_this;
}
void Bundle_BundleIdentifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Bundle_BundleIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Bundle_BundleIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.Bundle.BundleIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  placement_group_id_.ClearToEmpty();
  bundle_index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bundle_BundleIdentifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes placement_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_placement_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bundle_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bundle_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Bundle_BundleIdentifier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.Bundle.BundleIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes placement_group_id = 1;
  if (!this->_internal_placement_group_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_placement_group_id(), target);
  }

  // int32 bundle_index = 2;
  if (this->_internal_bundle_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bundle_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.Bundle.BundleIdentifier)
  return target;
}

size_t Bundle_BundleIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.Bundle.BundleIdentifier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes placement_group_id = 1;
  if (!this->_internal_placement_group_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_placement_group_id());
  }

  // int32 bundle_index = 2;
  if (this->_internal_bundle_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bundle_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Bundle_BundleIdentifier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Bundle_BundleIdentifier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Bundle_BundleIdentifier::GetClassData() const { return &_class_data_; }

void Bundle_BundleIdentifier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Bundle_BundleIdentifier *>(to)->MergeFrom(
      static_cast<const Bundle_BundleIdentifier &>(from));
}


void Bundle_BundleIdentifier::MergeFrom(const Bundle_BundleIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.Bundle.BundleIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_placement_group_id().empty()) {
    _internal_set_placement_group_id(from._internal_placement_group_id());
  }
  if (from._internal_bundle_index() != 0) {
    _internal_set_bundle_index(from._internal_bundle_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Bundle_BundleIdentifier::CopyFrom(const Bundle_BundleIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.Bundle.BundleIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bundle_BundleIdentifier::IsInitialized() const {
  return true;
}

void Bundle_BundleIdentifier::InternalSwap(Bundle_BundleIdentifier* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &placement_group_id_, GetArenaForAllocation(),
      &other->placement_group_id_, other->GetArenaForAllocation()
  );
  swap(bundle_index_, other->bundle_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Bundle_BundleIdentifier::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[24]);
}

// ===================================================================

Bundle_UnitResourcesEntry_DoNotUse::Bundle_UnitResourcesEntry_DoNotUse() {}
Bundle_UnitResourcesEntry_DoNotUse::Bundle_UnitResourcesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Bundle_UnitResourcesEntry_DoNotUse::MergeFrom(const Bundle_UnitResourcesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Bundle_UnitResourcesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[25]);
}

// ===================================================================

class Bundle::_Internal {
 public:
  static const ::mcs::rpc::Bundle_BundleIdentifier& bundle_id(const Bundle* msg);
};

const ::mcs::rpc::Bundle_BundleIdentifier&
Bundle::_Internal::bundle_id(const Bundle* msg) {
  return *msg->bundle_id_;
}
Bundle::Bundle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  unit_resources_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.Bundle)
}
Bundle::Bundle(const Bundle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unit_resources_.MergeFrom(from.unit_resources_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_bundle_id()) {
    bundle_id_ = new ::mcs::rpc::Bundle_BundleIdentifier(*from.bundle_id_);
  } else {
    bundle_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.Bundle)
}

inline void Bundle::SharedCtor() {
node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bundle_id_ = nullptr;
}

Bundle::~Bundle() {
  // @@protoc_insertion_point(destructor:mcs.rpc.Bundle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Bundle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bundle_id_;
}

void Bundle::ArenaDtor(void* object) {
  Bundle* _this = reinterpret_cast< Bundle* >(object);
  (void)_this;
  _this->unit_resources_. ~MapField();
}
inline void Bundle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Bundle::ArenaDtor);
  }
}
void Bundle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Bundle::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.Bundle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unit_resources_.Clear();
  node_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && bundle_id_ != nullptr) {
    delete bundle_id_;
  }
  bundle_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bundle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mcs.rpc.Bundle.BundleIdentifier bundle_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bundle_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, double> unit_resources = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&unit_resources_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes node_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Bundle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.Bundle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mcs.rpc.Bundle.BundleIdentifier bundle_id = 1;
  if (this->_internal_has_bundle_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bundle_id(this), target, stream);
  }

  // map<string, double> unit_resources = 2;
  if (!this->_internal_unit_resources().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mcs.rpc.Bundle.UnitResourcesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_unit_resources().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_unit_resources().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_unit_resources().begin();
          it != this->_internal_unit_resources().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Bundle_UnitResourcesEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_unit_resources().begin();
          it != this->_internal_unit_resources().end(); ++it) {
        target = Bundle_UnitResourcesEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bytes node_id = 3;
  if (!this->_internal_node_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.Bundle)
  return target;
}

size_t Bundle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.Bundle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, double> unit_resources = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unit_resources_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_unit_resources().begin();
      it != this->_internal_unit_resources().end(); ++it) {
    total_size += Bundle_UnitResourcesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes node_id = 3;
  if (!this->_internal_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_node_id());
  }

  // .mcs.rpc.Bundle.BundleIdentifier bundle_id = 1;
  if (this->_internal_has_bundle_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bundle_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Bundle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Bundle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Bundle::GetClassData() const { return &_class_data_; }

void Bundle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Bundle *>(to)->MergeFrom(
      static_cast<const Bundle &>(from));
}


void Bundle::MergeFrom(const Bundle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.Bundle)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unit_resources_.MergeFrom(from.unit_resources_);
  if (!from._internal_node_id().empty()) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from._internal_has_bundle_id()) {
    _internal_mutable_bundle_id()->::mcs::rpc::Bundle_BundleIdentifier::MergeFrom(from._internal_bundle_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Bundle::CopyFrom(const Bundle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.Bundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bundle::IsInitialized() const {
  return true;
}

void Bundle::InternalSwap(Bundle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  unit_resources_.InternalSwap(&other->unit_resources_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_id_, GetArenaForAllocation(),
      &other->node_id_, other->GetArenaForAllocation()
  );
  swap(bundle_id_, other->bundle_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Bundle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[26]);
}

// ===================================================================

class PlacementGroupSpec::_Internal {
 public:
};

PlacementGroupSpec::PlacementGroupSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bundles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.PlacementGroupSpec)
}
PlacementGroupSpec::PlacementGroupSpec(const PlacementGroupSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bundles_(from.bundles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  placement_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_placement_group_id().empty()) {
    placement_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_placement_group_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  creator_job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_creator_job_id().empty()) {
    creator_job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_creator_job_id(), 
      GetArenaForAllocation());
  }
  creator_actor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_creator_actor_id().empty()) {
    creator_actor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_creator_actor_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&strategy_, &from.strategy_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_cpu_fraction_per_node_) -
    reinterpret_cast<char*>(&strategy_)) + sizeof(max_cpu_fraction_per_node_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.PlacementGroupSpec)
}

inline void PlacementGroupSpec::SharedCtor() {
placement_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
creator_job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
creator_actor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&strategy_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_cpu_fraction_per_node_) -
    reinterpret_cast<char*>(&strategy_)) + sizeof(max_cpu_fraction_per_node_));
}

PlacementGroupSpec::~PlacementGroupSpec() {
  // @@protoc_insertion_point(destructor:mcs.rpc.PlacementGroupSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlacementGroupSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  placement_group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creator_job_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creator_actor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlacementGroupSpec::ArenaDtor(void* object) {
  PlacementGroupSpec* _this = reinterpret_cast< PlacementGroupSpec* >(object);
  (void)_this;
}
void PlacementGroupSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlacementGroupSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlacementGroupSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.PlacementGroupSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bundles_.Clear();
  placement_group_id_.ClearToEmpty();
  name_.ClearToEmpty();
  creator_job_id_.ClearToEmpty();
  creator_actor_id_.ClearToEmpty();
  ::memset(&strategy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_cpu_fraction_per_node_) -
      reinterpret_cast<char*>(&strategy_)) + sizeof(max_cpu_fraction_per_node_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlacementGroupSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes placement_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_placement_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.PlacementGroupSpec.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mcs.rpc.Bundle bundles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bundles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.PlacementStrategy strategy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_strategy(static_cast<::mcs::rpc::PlacementStrategy>(val));
        } else goto handle_unusual;
        continue;
      // bytes creator_job_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_creator_job_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes creator_actor_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_creator_actor_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool creator_job_dead = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          creator_job_dead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool creator_actor_dead = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          creator_actor_dead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_detached = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          is_detached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double max_cpu_fraction_per_node = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          max_cpu_fraction_per_node_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlacementGroupSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.PlacementGroupSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes placement_group_id = 1;
  if (!this->_internal_placement_group_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_placement_group_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.PlacementGroupSpec.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .mcs.rpc.Bundle bundles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bundles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_bundles(i), target, stream);
  }

  // .mcs.rpc.PlacementStrategy strategy = 4;
  if (this->_internal_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_strategy(), target);
  }

  // bytes creator_job_id = 5;
  if (!this->_internal_creator_job_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_creator_job_id(), target);
  }

  // bytes creator_actor_id = 6;
  if (!this->_internal_creator_actor_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_creator_actor_id(), target);
  }

  // bool creator_job_dead = 7;
  if (this->_internal_creator_job_dead() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_creator_job_dead(), target);
  }

  // bool creator_actor_dead = 8;
  if (this->_internal_creator_actor_dead() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_creator_actor_dead(), target);
  }

  // bool is_detached = 9;
  if (this->_internal_is_detached() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_detached(), target);
  }

  // double max_cpu_fraction_per_node = 10;
  if (!(this->_internal_max_cpu_fraction_per_node() <= 0 && this->_internal_max_cpu_fraction_per_node() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_max_cpu_fraction_per_node(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.PlacementGroupSpec)
  return target;
}

size_t PlacementGroupSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.PlacementGroupSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mcs.rpc.Bundle bundles = 3;
  total_size += 1UL * this->_internal_bundles_size();
  for (const auto& msg : this->bundles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes placement_group_id = 1;
  if (!this->_internal_placement_group_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_placement_group_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes creator_job_id = 5;
  if (!this->_internal_creator_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_creator_job_id());
  }

  // bytes creator_actor_id = 6;
  if (!this->_internal_creator_actor_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_creator_actor_id());
  }

  // .mcs.rpc.PlacementStrategy strategy = 4;
  if (this->_internal_strategy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_strategy());
  }

  // bool creator_job_dead = 7;
  if (this->_internal_creator_job_dead() != 0) {
    total_size += 1 + 1;
  }

  // bool creator_actor_dead = 8;
  if (this->_internal_creator_actor_dead() != 0) {
    total_size += 1 + 1;
  }

  // bool is_detached = 9;
  if (this->_internal_is_detached() != 0) {
    total_size += 1 + 1;
  }

  // double max_cpu_fraction_per_node = 10;
  if (!(this->_internal_max_cpu_fraction_per_node() <= 0 && this->_internal_max_cpu_fraction_per_node() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlacementGroupSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlacementGroupSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlacementGroupSpec::GetClassData() const { return &_class_data_; }

void PlacementGroupSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PlacementGroupSpec *>(to)->MergeFrom(
      static_cast<const PlacementGroupSpec &>(from));
}


void PlacementGroupSpec::MergeFrom(const PlacementGroupSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.PlacementGroupSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bundles_.MergeFrom(from.bundles_);
  if (!from._internal_placement_group_id().empty()) {
    _internal_set_placement_group_id(from._internal_placement_group_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_creator_job_id().empty()) {
    _internal_set_creator_job_id(from._internal_creator_job_id());
  }
  if (!from._internal_creator_actor_id().empty()) {
    _internal_set_creator_actor_id(from._internal_creator_actor_id());
  }
  if (from._internal_strategy() != 0) {
    _internal_set_strategy(from._internal_strategy());
  }
  if (from._internal_creator_job_dead() != 0) {
    _internal_set_creator_job_dead(from._internal_creator_job_dead());
  }
  if (from._internal_creator_actor_dead() != 0) {
    _internal_set_creator_actor_dead(from._internal_creator_actor_dead());
  }
  if (from._internal_is_detached() != 0) {
    _internal_set_is_detached(from._internal_is_detached());
  }
  if (!(from._internal_max_cpu_fraction_per_node() <= 0 && from._internal_max_cpu_fraction_per_node() >= 0)) {
    _internal_set_max_cpu_fraction_per_node(from._internal_max_cpu_fraction_per_node());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlacementGroupSpec::CopyFrom(const PlacementGroupSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.PlacementGroupSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlacementGroupSpec::IsInitialized() const {
  return true;
}

void PlacementGroupSpec::InternalSwap(PlacementGroupSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bundles_.InternalSwap(&other->bundles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &placement_group_id_, GetArenaForAllocation(),
      &other->placement_group_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &creator_job_id_, GetArenaForAllocation(),
      &other->creator_job_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &creator_actor_id_, GetArenaForAllocation(),
      &other->creator_actor_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlacementGroupSpec, max_cpu_fraction_per_node_)
      + sizeof(PlacementGroupSpec::max_cpu_fraction_per_node_)
      - PROTOBUF_FIELD_OFFSET(PlacementGroupSpec, strategy_)>(
          reinterpret_cast<char*>(&strategy_),
          reinterpret_cast<char*>(&other->strategy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlacementGroupSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[27]);
}

// ===================================================================

class ObjectReference::_Internal {
 public:
  static const ::mcs::rpc::Address& owner_address(const ObjectReference* msg);
};

const ::mcs::rpc::Address&
ObjectReference::_Internal::owner_address(const ObjectReference* msg) {
  return *msg->owner_address_;
}
ObjectReference::ObjectReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ObjectReference)
}
ObjectReference::ObjectReference(const ObjectReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_object_id().empty()) {
    object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_object_id(), 
      GetArenaForAllocation());
  }
  call_site_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_call_site().empty()) {
    call_site_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_call_site(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_owner_address()) {
    owner_address_ = new ::mcs::rpc::Address(*from.owner_address_);
  } else {
    owner_address_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ObjectReference)
}

inline void ObjectReference::SharedCtor() {
object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
call_site_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
owner_address_ = nullptr;
}

ObjectReference::~ObjectReference() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ObjectReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ObjectReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  object_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  call_site_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete owner_address_;
}

void ObjectReference::ArenaDtor(void* object) {
  ObjectReference* _this = reinterpret_cast< ObjectReference* >(object);
  (void)_this;
}
void ObjectReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectReference::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ObjectReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_.ClearToEmpty();
  call_site_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && owner_address_ != nullptr) {
    delete owner_address_;
  }
  owner_address_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_object_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.Address owner_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string call_site = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_call_site();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ObjectReference.call_site"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ObjectReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes object_id = 1;
  if (!this->_internal_object_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_object_id(), target);
  }

  // .mcs.rpc.Address owner_address = 2;
  if (this->_internal_has_owner_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::owner_address(this), target, stream);
  }

  // string call_site = 3;
  if (!this->_internal_call_site().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_call_site().data(), static_cast<int>(this->_internal_call_site().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ObjectReference.call_site");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_call_site(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ObjectReference)
  return target;
}

size_t ObjectReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ObjectReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes object_id = 1;
  if (!this->_internal_object_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_object_id());
  }

  // string call_site = 3;
  if (!this->_internal_call_site().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_call_site());
  }

  // .mcs.rpc.Address owner_address = 2;
  if (this->_internal_has_owner_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_address_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObjectReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectReference::GetClassData() const { return &_class_data_; }

void ObjectReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ObjectReference *>(to)->MergeFrom(
      static_cast<const ObjectReference &>(from));
}


void ObjectReference::MergeFrom(const ObjectReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ObjectReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_object_id().empty()) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (!from._internal_call_site().empty()) {
    _internal_set_call_site(from._internal_call_site());
  }
  if (from._internal_has_owner_address()) {
    _internal_mutable_owner_address()->::mcs::rpc::Address::MergeFrom(from._internal_owner_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectReference::CopyFrom(const ObjectReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ObjectReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectReference::IsInitialized() const {
  return true;
}

void ObjectReference::InternalSwap(ObjectReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &object_id_, GetArenaForAllocation(),
      &other->object_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &call_site_, GetArenaForAllocation(),
      &other->call_site_, other->GetArenaForAllocation()
  );
  swap(owner_address_, other->owner_address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[28]);
}

// ===================================================================

class ObjectReferenceCount::_Internal {
 public:
  static const ::mcs::rpc::ObjectReference& reference(const ObjectReferenceCount* msg);
};

const ::mcs::rpc::ObjectReference&
ObjectReferenceCount::_Internal::reference(const ObjectReferenceCount* msg) {
  return *msg->reference_;
}
ObjectReferenceCount::ObjectReferenceCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  borrowers_(arena),
  stored_in_objects_(arena),
  contained_in_borrowed_ids_(arena),
  contains_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ObjectReferenceCount)
}
ObjectReferenceCount::ObjectReferenceCount(const ObjectReferenceCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      borrowers_(from.borrowers_),
      stored_in_objects_(from.stored_in_objects_),
      contained_in_borrowed_ids_(from.contained_in_borrowed_ids_),
      contains_(from.contains_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reference()) {
    reference_ = new ::mcs::rpc::ObjectReference(*from.reference_);
  } else {
    reference_ = nullptr;
  }
  has_local_ref_ = from.has_local_ref_;
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ObjectReferenceCount)
}

inline void ObjectReferenceCount::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reference_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_local_ref_) -
    reinterpret_cast<char*>(&reference_)) + sizeof(has_local_ref_));
}

ObjectReferenceCount::~ObjectReferenceCount() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ObjectReferenceCount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ObjectReferenceCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete reference_;
}

void ObjectReferenceCount::ArenaDtor(void* object) {
  ObjectReferenceCount* _this = reinterpret_cast< ObjectReferenceCount* >(object);
  (void)_this;
}
void ObjectReferenceCount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectReferenceCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectReferenceCount::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ObjectReferenceCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  borrowers_.Clear();
  stored_in_objects_.Clear();
  contained_in_borrowed_ids_.Clear();
  contains_.Clear();
  if (GetArenaForAllocation() == nullptr && reference_ != nullptr) {
    delete reference_;
  }
  reference_ = nullptr;
  has_local_ref_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectReferenceCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mcs.rpc.ObjectReference reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_local_ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          has_local_ref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mcs.rpc.Address borrowers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_borrowers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mcs.rpc.ObjectReference stored_in_objects = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stored_in_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes contained_in_borrowed_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_contained_in_borrowed_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes contains = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_contains();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectReferenceCount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ObjectReferenceCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mcs.rpc.ObjectReference reference = 1;
  if (this->_internal_has_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reference(this), target, stream);
  }

  // bool has_local_ref = 2;
  if (this->_internal_has_local_ref() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_has_local_ref(), target);
  }

  // repeated .mcs.rpc.Address borrowers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_borrowers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_borrowers(i), target, stream);
  }

  // repeated .mcs.rpc.ObjectReference stored_in_objects = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stored_in_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_stored_in_objects(i), target, stream);
  }

  // repeated bytes contained_in_borrowed_ids = 5;
  for (int i = 0, n = this->_internal_contained_in_borrowed_ids_size(); i < n; i++) {
    const auto& s = this->_internal_contained_in_borrowed_ids(i);
    target = stream->WriteBytes(5, s, target);
  }

  // repeated bytes contains = 6;
  for (int i = 0, n = this->_internal_contains_size(); i < n; i++) {
    const auto& s = this->_internal_contains(i);
    target = stream->WriteBytes(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ObjectReferenceCount)
  return target;
}

size_t ObjectReferenceCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ObjectReferenceCount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mcs.rpc.Address borrowers = 3;
  total_size += 1UL * this->_internal_borrowers_size();
  for (const auto& msg : this->borrowers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mcs.rpc.ObjectReference stored_in_objects = 4;
  total_size += 1UL * this->_internal_stored_in_objects_size();
  for (const auto& msg : this->stored_in_objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes contained_in_borrowed_ids = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(contained_in_borrowed_ids_.size());
  for (int i = 0, n = contained_in_borrowed_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      contained_in_borrowed_ids_.Get(i));
  }

  // repeated bytes contains = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(contains_.size());
  for (int i = 0, n = contains_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      contains_.Get(i));
  }

  // .mcs.rpc.ObjectReference reference = 1;
  if (this->_internal_has_reference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reference_);
  }

  // bool has_local_ref = 2;
  if (this->_internal_has_local_ref() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectReferenceCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObjectReferenceCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectReferenceCount::GetClassData() const { return &_class_data_; }

void ObjectReferenceCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ObjectReferenceCount *>(to)->MergeFrom(
      static_cast<const ObjectReferenceCount &>(from));
}


void ObjectReferenceCount::MergeFrom(const ObjectReferenceCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ObjectReferenceCount)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  borrowers_.MergeFrom(from.borrowers_);
  stored_in_objects_.MergeFrom(from.stored_in_objects_);
  contained_in_borrowed_ids_.MergeFrom(from.contained_in_borrowed_ids_);
  contains_.MergeFrom(from.contains_);
  if (from._internal_has_reference()) {
    _internal_mutable_reference()->::mcs::rpc::ObjectReference::MergeFrom(from._internal_reference());
  }
  if (from._internal_has_local_ref() != 0) {
    _internal_set_has_local_ref(from._internal_has_local_ref());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectReferenceCount::CopyFrom(const ObjectReferenceCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ObjectReferenceCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectReferenceCount::IsInitialized() const {
  return true;
}

void ObjectReferenceCount::InternalSwap(ObjectReferenceCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  borrowers_.InternalSwap(&other->borrowers_);
  stored_in_objects_.InternalSwap(&other->stored_in_objects_);
  contained_in_borrowed_ids_.InternalSwap(&other->contained_in_borrowed_ids_);
  contains_.InternalSwap(&other->contains_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectReferenceCount, has_local_ref_)
      + sizeof(ObjectReferenceCount::has_local_ref_)
      - PROTOBUF_FIELD_OFFSET(ObjectReferenceCount, reference_)>(
          reinterpret_cast<char*>(&reference_),
          reinterpret_cast<char*>(&other->reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectReferenceCount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[29]);
}

// ===================================================================

class TaskArg::_Internal {
 public:
  static const ::mcs::rpc::ObjectReference& object_ref(const TaskArg* msg);
};

const ::mcs::rpc::ObjectReference&
TaskArg::_Internal::object_ref(const TaskArg* msg) {
  return *msg->object_ref_;
}
TaskArg::TaskArg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nested_inlined_refs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.TaskArg)
}
TaskArg::TaskArg(const TaskArg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nested_inlined_refs_(from.nested_inlined_refs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metadata().empty()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_object_ref()) {
    object_ref_ = new ::mcs::rpc::ObjectReference(*from.object_ref_);
  } else {
    object_ref_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.TaskArg)
}

inline void TaskArg::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
object_ref_ = nullptr;
}

TaskArg::~TaskArg() {
  // @@protoc_insertion_point(destructor:mcs.rpc.TaskArg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskArg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete object_ref_;
}

void TaskArg::ArenaDtor(void* object) {
  TaskArg* _this = reinterpret_cast< TaskArg* >(object);
  (void)_this;
}
void TaskArg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskArg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskArg::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.TaskArg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nested_inlined_refs_.Clear();
  data_.ClearToEmpty();
  metadata_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && object_ref_ != nullptr) {
    delete object_ref_;
  }
  object_ref_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskArg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mcs.rpc.ObjectReference object_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_ref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mcs.rpc.ObjectReference nested_inlined_refs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nested_inlined_refs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskArg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.TaskArg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mcs.rpc.ObjectReference object_ref = 1;
  if (this->_internal_has_object_ref()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object_ref(this), target, stream);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // bytes metadata = 3;
  if (!this->_internal_metadata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_metadata(), target);
  }

  // repeated .mcs.rpc.ObjectReference nested_inlined_refs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nested_inlined_refs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_nested_inlined_refs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.TaskArg)
  return target;
}

size_t TaskArg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.TaskArg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mcs.rpc.ObjectReference nested_inlined_refs = 4;
  total_size += 1UL * this->_internal_nested_inlined_refs_size();
  for (const auto& msg : this->nested_inlined_refs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // bytes metadata = 3;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_metadata());
  }

  // .mcs.rpc.ObjectReference object_ref = 1;
  if (this->_internal_has_object_ref()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_ref_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskArg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskArg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskArg::GetClassData() const { return &_class_data_; }

void TaskArg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TaskArg *>(to)->MergeFrom(
      static_cast<const TaskArg &>(from));
}


void TaskArg::MergeFrom(const TaskArg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.TaskArg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nested_inlined_refs_.MergeFrom(from.nested_inlined_refs_);
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (!from._internal_metadata().empty()) {
    _internal_set_metadata(from._internal_metadata());
  }
  if (from._internal_has_object_ref()) {
    _internal_mutable_object_ref()->::mcs::rpc::ObjectReference::MergeFrom(from._internal_object_ref());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskArg::CopyFrom(const TaskArg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.TaskArg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskArg::IsInitialized() const {
  return true;
}

void TaskArg::InternalSwap(TaskArg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nested_inlined_refs_.InternalSwap(&other->nested_inlined_refs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, GetArenaForAllocation(),
      &other->data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &metadata_, GetArenaForAllocation(),
      &other->metadata_, other->GetArenaForAllocation()
  );
  swap(object_ref_, other->object_ref_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskArg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[30]);
}

// ===================================================================

class ActorCreationTaskSpec::_Internal {
 public:
};

ActorCreationTaskSpec::ActorCreationTaskSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  dynamic_worker_options_(arena),
  concurrency_groups_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ActorCreationTaskSpec)
}
ActorCreationTaskSpec::ActorCreationTaskSpec(const ActorCreationTaskSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dynamic_worker_options_(from.dynamic_worker_options_),
      concurrency_groups_(from.concurrency_groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  actor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_actor_id().empty()) {
    actor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_actor_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  mcs_namespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mcs_namespace().empty()) {
    mcs_namespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mcs_namespace(), 
      GetArenaForAllocation());
  }
  extension_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extension_data().empty()) {
    extension_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extension_data(), 
      GetArenaForAllocation());
  }
  serialized_actor_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serialized_actor_handle().empty()) {
    serialized_actor_handle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serialized_actor_handle(), 
      GetArenaForAllocation());
  }
  ::memcpy(&max_actor_restarts_, &from.max_actor_restarts_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_pending_calls_) -
    reinterpret_cast<char*>(&max_actor_restarts_)) + sizeof(max_pending_calls_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ActorCreationTaskSpec)
}

inline void ActorCreationTaskSpec::SharedCtor() {
actor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mcs_namespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
extension_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
serialized_actor_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_actor_restarts_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_pending_calls_) -
    reinterpret_cast<char*>(&max_actor_restarts_)) + sizeof(max_pending_calls_));
}

ActorCreationTaskSpec::~ActorCreationTaskSpec() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ActorCreationTaskSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActorCreationTaskSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  actor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mcs_namespace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_actor_handle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActorCreationTaskSpec::ArenaDtor(void* object) {
  ActorCreationTaskSpec* _this = reinterpret_cast< ActorCreationTaskSpec* >(object);
  (void)_this;
}
void ActorCreationTaskSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActorCreationTaskSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActorCreationTaskSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ActorCreationTaskSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dynamic_worker_options_.Clear();
  concurrency_groups_.Clear();
  actor_id_.ClearToEmpty();
  name_.ClearToEmpty();
  mcs_namespace_.ClearToEmpty();
  extension_data_.ClearToEmpty();
  serialized_actor_handle_.ClearToEmpty();
  ::memset(&max_actor_restarts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_pending_calls_) -
      reinterpret_cast<char*>(&max_actor_restarts_)) + sizeof(max_pending_calls_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActorCreationTaskSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes actor_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_actor_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_actor_restarts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_actor_restarts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_task_retries = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_task_retries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string dynamic_worker_options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dynamic_worker_options();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ActorCreationTaskSpec.dynamic_worker_options"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 max_concurrency = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          max_concurrency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_detached = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_detached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ActorCreationTaskSpec.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mcs_namespace = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_mcs_namespace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ActorCreationTaskSpec.mcs_namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_asyncio = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          is_asyncio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string extension_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_extension_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ActorCreationTaskSpec.extension_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes serialized_actor_handle = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_serialized_actor_handle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mcs.rpc.ConcurrencyGroup concurrency_groups = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concurrency_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // bool execute_out_of_order = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          execute_out_of_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_pending_calls = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          max_pending_calls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActorCreationTaskSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ActorCreationTaskSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes actor_id = 2;
  if (!this->_internal_actor_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_actor_id(), target);
  }

  // int64 max_actor_restarts = 3;
  if (this->_internal_max_actor_restarts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_max_actor_restarts(), target);
  }

  // int64 max_task_retries = 4;
  if (this->_internal_max_task_retries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_max_task_retries(), target);
  }

  // repeated string dynamic_worker_options = 5;
  for (int i = 0, n = this->_internal_dynamic_worker_options_size(); i < n; i++) {
    const auto& s = this->_internal_dynamic_worker_options(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ActorCreationTaskSpec.dynamic_worker_options");
    target = stream->WriteString(5, s, target);
  }

  // int32 max_concurrency = 6;
  if (this->_internal_max_concurrency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_max_concurrency(), target);
  }

  // bool is_detached = 7;
  if (this->_internal_is_detached() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_detached(), target);
  }

  // string name = 8;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ActorCreationTaskSpec.name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_name(), target);
  }

  // string mcs_namespace = 9;
  if (!this->_internal_mcs_namespace().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mcs_namespace().data(), static_cast<int>(this->_internal_mcs_namespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ActorCreationTaskSpec.mcs_namespace");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_mcs_namespace(), target);
  }

  // bool is_asyncio = 10;
  if (this->_internal_is_asyncio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_asyncio(), target);
  }

  // string extension_data = 11;
  if (!this->_internal_extension_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extension_data().data(), static_cast<int>(this->_internal_extension_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ActorCreationTaskSpec.extension_data");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_extension_data(), target);
  }

  // bytes serialized_actor_handle = 12;
  if (!this->_internal_serialized_actor_handle().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_serialized_actor_handle(), target);
  }

  // repeated .mcs.rpc.ConcurrencyGroup concurrency_groups = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concurrency_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_concurrency_groups(i), target, stream);
  }

  // bool execute_out_of_order = 14;
  if (this->_internal_execute_out_of_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_execute_out_of_order(), target);
  }

  // int32 max_pending_calls = 15;
  if (this->_internal_max_pending_calls() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_max_pending_calls(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ActorCreationTaskSpec)
  return target;
}

size_t ActorCreationTaskSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ActorCreationTaskSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dynamic_worker_options = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dynamic_worker_options_.size());
  for (int i = 0, n = dynamic_worker_options_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dynamic_worker_options_.Get(i));
  }

  // repeated .mcs.rpc.ConcurrencyGroup concurrency_groups = 13;
  total_size += 1UL * this->_internal_concurrency_groups_size();
  for (const auto& msg : this->concurrency_groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes actor_id = 2;
  if (!this->_internal_actor_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_actor_id());
  }

  // string name = 8;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string mcs_namespace = 9;
  if (!this->_internal_mcs_namespace().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mcs_namespace());
  }

  // string extension_data = 11;
  if (!this->_internal_extension_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extension_data());
  }

  // bytes serialized_actor_handle = 12;
  if (!this->_internal_serialized_actor_handle().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_serialized_actor_handle());
  }

  // int64 max_actor_restarts = 3;
  if (this->_internal_max_actor_restarts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_actor_restarts());
  }

  // int64 max_task_retries = 4;
  if (this->_internal_max_task_retries() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_task_retries());
  }

  // int32 max_concurrency = 6;
  if (this->_internal_max_concurrency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_concurrency());
  }

  // bool is_detached = 7;
  if (this->_internal_is_detached() != 0) {
    total_size += 1 + 1;
  }

  // bool is_asyncio = 10;
  if (this->_internal_is_asyncio() != 0) {
    total_size += 1 + 1;
  }

  // bool execute_out_of_order = 14;
  if (this->_internal_execute_out_of_order() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_pending_calls = 15;
  if (this->_internal_max_pending_calls() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_pending_calls());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActorCreationTaskSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActorCreationTaskSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActorCreationTaskSpec::GetClassData() const { return &_class_data_; }

void ActorCreationTaskSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ActorCreationTaskSpec *>(to)->MergeFrom(
      static_cast<const ActorCreationTaskSpec &>(from));
}


void ActorCreationTaskSpec::MergeFrom(const ActorCreationTaskSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ActorCreationTaskSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dynamic_worker_options_.MergeFrom(from.dynamic_worker_options_);
  concurrency_groups_.MergeFrom(from.concurrency_groups_);
  if (!from._internal_actor_id().empty()) {
    _internal_set_actor_id(from._internal_actor_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_mcs_namespace().empty()) {
    _internal_set_mcs_namespace(from._internal_mcs_namespace());
  }
  if (!from._internal_extension_data().empty()) {
    _internal_set_extension_data(from._internal_extension_data());
  }
  if (!from._internal_serialized_actor_handle().empty()) {
    _internal_set_serialized_actor_handle(from._internal_serialized_actor_handle());
  }
  if (from._internal_max_actor_restarts() != 0) {
    _internal_set_max_actor_restarts(from._internal_max_actor_restarts());
  }
  if (from._internal_max_task_retries() != 0) {
    _internal_set_max_task_retries(from._internal_max_task_retries());
  }
  if (from._internal_max_concurrency() != 0) {
    _internal_set_max_concurrency(from._internal_max_concurrency());
  }
  if (from._internal_is_detached() != 0) {
    _internal_set_is_detached(from._internal_is_detached());
  }
  if (from._internal_is_asyncio() != 0) {
    _internal_set_is_asyncio(from._internal_is_asyncio());
  }
  if (from._internal_execute_out_of_order() != 0) {
    _internal_set_execute_out_of_order(from._internal_execute_out_of_order());
  }
  if (from._internal_max_pending_calls() != 0) {
    _internal_set_max_pending_calls(from._internal_max_pending_calls());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActorCreationTaskSpec::CopyFrom(const ActorCreationTaskSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ActorCreationTaskSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorCreationTaskSpec::IsInitialized() const {
  return true;
}

void ActorCreationTaskSpec::InternalSwap(ActorCreationTaskSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dynamic_worker_options_.InternalSwap(&other->dynamic_worker_options_);
  concurrency_groups_.InternalSwap(&other->concurrency_groups_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &actor_id_, GetArenaForAllocation(),
      &other->actor_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mcs_namespace_, GetArenaForAllocation(),
      &other->mcs_namespace_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &extension_data_, GetArenaForAllocation(),
      &other->extension_data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serialized_actor_handle_, GetArenaForAllocation(),
      &other->serialized_actor_handle_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActorCreationTaskSpec, max_pending_calls_)
      + sizeof(ActorCreationTaskSpec::max_pending_calls_)
      - PROTOBUF_FIELD_OFFSET(ActorCreationTaskSpec, max_actor_restarts_)>(
          reinterpret_cast<char*>(&max_actor_restarts_),
          reinterpret_cast<char*>(&other->max_actor_restarts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorCreationTaskSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[31]);
}

// ===================================================================

class ActorTaskSpec::_Internal {
 public:
};

ActorTaskSpec::ActorTaskSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ActorTaskSpec)
}
ActorTaskSpec::ActorTaskSpec(const ActorTaskSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  actor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_actor_id().empty()) {
    actor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_actor_id(), 
      GetArenaForAllocation());
  }
  actor_creation_dummy_object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_actor_creation_dummy_object_id().empty()) {
    actor_creation_dummy_object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_actor_creation_dummy_object_id(), 
      GetArenaForAllocation());
  }
  previous_actor_task_dummy_object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previous_actor_task_dummy_object_id().empty()) {
    previous_actor_task_dummy_object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_previous_actor_task_dummy_object_id(), 
      GetArenaForAllocation());
  }
  actor_counter_ = from.actor_counter_;
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ActorTaskSpec)
}

inline void ActorTaskSpec::SharedCtor() {
actor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
actor_creation_dummy_object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
previous_actor_task_dummy_object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
actor_counter_ = uint64_t{0u};
}

ActorTaskSpec::~ActorTaskSpec() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ActorTaskSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActorTaskSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  actor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actor_creation_dummy_object_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_actor_task_dummy_object_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActorTaskSpec::ArenaDtor(void* object) {
  ActorTaskSpec* _this = reinterpret_cast< ActorTaskSpec* >(object);
  (void)_this;
}
void ActorTaskSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActorTaskSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActorTaskSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ActorTaskSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actor_id_.ClearToEmpty();
  actor_creation_dummy_object_id_.ClearToEmpty();
  previous_actor_task_dummy_object_id_.ClearToEmpty();
  actor_counter_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActorTaskSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes actor_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_actor_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes actor_creation_dummy_object_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_actor_creation_dummy_object_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 actor_counter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          actor_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes previous_actor_task_dummy_object_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_previous_actor_task_dummy_object_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActorTaskSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ActorTaskSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes actor_id = 2;
  if (!this->_internal_actor_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_actor_id(), target);
  }

  // bytes actor_creation_dummy_object_id = 4;
  if (!this->_internal_actor_creation_dummy_object_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_actor_creation_dummy_object_id(), target);
  }

  // uint64 actor_counter = 5;
  if (this->_internal_actor_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_actor_counter(), target);
  }

  // bytes previous_actor_task_dummy_object_id = 7;
  if (!this->_internal_previous_actor_task_dummy_object_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_previous_actor_task_dummy_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ActorTaskSpec)
  return target;
}

size_t ActorTaskSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ActorTaskSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes actor_id = 2;
  if (!this->_internal_actor_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_actor_id());
  }

  // bytes actor_creation_dummy_object_id = 4;
  if (!this->_internal_actor_creation_dummy_object_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_actor_creation_dummy_object_id());
  }

  // bytes previous_actor_task_dummy_object_id = 7;
  if (!this->_internal_previous_actor_task_dummy_object_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_previous_actor_task_dummy_object_id());
  }

  // uint64 actor_counter = 5;
  if (this->_internal_actor_counter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_actor_counter());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActorTaskSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActorTaskSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActorTaskSpec::GetClassData() const { return &_class_data_; }

void ActorTaskSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ActorTaskSpec *>(to)->MergeFrom(
      static_cast<const ActorTaskSpec &>(from));
}


void ActorTaskSpec::MergeFrom(const ActorTaskSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ActorTaskSpec)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_actor_id().empty()) {
    _internal_set_actor_id(from._internal_actor_id());
  }
  if (!from._internal_actor_creation_dummy_object_id().empty()) {
    _internal_set_actor_creation_dummy_object_id(from._internal_actor_creation_dummy_object_id());
  }
  if (!from._internal_previous_actor_task_dummy_object_id().empty()) {
    _internal_set_previous_actor_task_dummy_object_id(from._internal_previous_actor_task_dummy_object_id());
  }
  if (from._internal_actor_counter() != 0) {
    _internal_set_actor_counter(from._internal_actor_counter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActorTaskSpec::CopyFrom(const ActorTaskSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ActorTaskSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorTaskSpec::IsInitialized() const {
  return true;
}

void ActorTaskSpec::InternalSwap(ActorTaskSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &actor_id_, GetArenaForAllocation(),
      &other->actor_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &actor_creation_dummy_object_id_, GetArenaForAllocation(),
      &other->actor_creation_dummy_object_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &previous_actor_task_dummy_object_id_, GetArenaForAllocation(),
      &other->previous_actor_task_dummy_object_id_, other->GetArenaForAllocation()
  );
  swap(actor_counter_, other->actor_counter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorTaskSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[32]);
}

// ===================================================================

class Task::_Internal {
 public:
  static const ::mcs::rpc::TaskSpec& task_spec(const Task* msg);
};

const ::mcs::rpc::TaskSpec&
Task::_Internal::task_spec(const Task* msg) {
  return *msg->task_spec_;
}
Task::Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.Task)
}
Task::Task(const Task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task_spec()) {
    task_spec_ = new ::mcs::rpc::TaskSpec(*from.task_spec_);
  } else {
    task_spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.Task)
}

inline void Task::SharedCtor() {
task_spec_ = nullptr;
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:mcs.rpc.Task)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Task::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete task_spec_;
}

void Task::ArenaDtor(void* object) {
  Task* _this = reinterpret_cast< Task* >(object);
  (void)_this;
}
void Task::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.Task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && task_spec_ != nullptr) {
    delete task_spec_;
  }
  task_spec_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mcs.rpc.TaskSpec task_spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Task::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.Task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mcs.rpc.TaskSpec task_spec = 1;
  if (this->_internal_has_task_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::task_spec(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.Task)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mcs.rpc.TaskSpec task_spec = 1;
  if (this->_internal_has_task_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_spec_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Task::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Task::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Task::GetClassData() const { return &_class_data_; }

void Task::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Task *>(to)->MergeFrom(
      static_cast<const Task &>(from));
}


void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.Task)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_task_spec()) {
    _internal_mutable_task_spec()->::mcs::rpc::TaskSpec::MergeFrom(from._internal_task_spec());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::InternalSwap(Task* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(task_spec_, other->task_spec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Task::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[33]);
}

// ===================================================================

class ResourceId::_Internal {
 public:
};

ResourceId::ResourceId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ResourceId)
}
ResourceId::ResourceId(const ResourceId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&index_)) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ResourceId)
}

inline void ResourceId::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&index_)) + sizeof(quantity_));
}

ResourceId::~ResourceId() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ResourceId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResourceId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResourceId::ArenaDtor(void* object) {
  ResourceId* _this = reinterpret_cast< ResourceId* >(object);
  (void)_this;
}
void ResourceId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResourceId::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ResourceId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&index_)) + sizeof(quantity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ResourceId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_index(), target);
  }

  // double quantity = 2;
  if (!(this->_internal_quantity() <= 0 && this->_internal_quantity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ResourceId)
  return target;
}

size_t ResourceId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ResourceId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 index = 1;
  if (this->_internal_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_index());
  }

  // double quantity = 2;
  if (!(this->_internal_quantity() <= 0 && this->_internal_quantity() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResourceId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceId::GetClassData() const { return &_class_data_; }

void ResourceId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ResourceId *>(to)->MergeFrom(
      static_cast<const ResourceId &>(from));
}


void ResourceId::MergeFrom(const ResourceId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ResourceId)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (!(from._internal_quantity() <= 0 && from._internal_quantity() >= 0)) {
    _internal_set_quantity(from._internal_quantity());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceId::CopyFrom(const ResourceId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ResourceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceId::IsInitialized() const {
  return true;
}

void ResourceId::InternalSwap(ResourceId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceId, quantity_)
      + sizeof(ResourceId::quantity_)
      - PROTOBUF_FIELD_OFFSET(ResourceId, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[34]);
}

// ===================================================================

class ResourceMapEntry::_Internal {
 public:
};

ResourceMapEntry::ResourceMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  resource_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ResourceMapEntry)
}
ResourceMapEntry::ResourceMapEntry(const ResourceMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      resource_ids_(from.resource_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ResourceMapEntry)
}

inline void ResourceMapEntry::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ResourceMapEntry::~ResourceMapEntry() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ResourceMapEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResourceMapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResourceMapEntry::ArenaDtor(void* object) {
  ResourceMapEntry* _this = reinterpret_cast< ResourceMapEntry* >(object);
  (void)_this;
}
void ResourceMapEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceMapEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResourceMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ResourceMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_ids_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceMapEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ResourceMapEntry.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mcs.rpc.ResourceId resource_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resource_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceMapEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ResourceMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ResourceMapEntry.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .mcs.rpc.ResourceId resource_ids = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_resource_ids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ResourceMapEntry)
  return target;
}

size_t ResourceMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ResourceMapEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mcs.rpc.ResourceId resource_ids = 2;
  total_size += 1UL * this->_internal_resource_ids_size();
  for (const auto& msg : this->resource_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceMapEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResourceMapEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceMapEntry::GetClassData() const { return &_class_data_; }

void ResourceMapEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ResourceMapEntry *>(to)->MergeFrom(
      static_cast<const ResourceMapEntry &>(from));
}


void ResourceMapEntry::MergeFrom(const ResourceMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ResourceMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resource_ids_.MergeFrom(from.resource_ids_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceMapEntry::CopyFrom(const ResourceMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ResourceMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceMapEntry::IsInitialized() const {
  return true;
}

void ResourceMapEntry::InternalSwap(ResourceMapEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  resource_ids_.InternalSwap(&other->resource_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceMapEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[35]);
}

// ===================================================================

class ViewData_Measure::_Internal {
 public:
};

ViewData_Measure::ViewData_Measure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  distribution_bucket_boundaries_(arena),
  distribution_bucket_counts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ViewData.Measure)
}
ViewData_Measure::ViewData_Measure(const ViewData_Measure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      distribution_bucket_boundaries_(from.distribution_bucket_boundaries_),
      distribution_bucket_counts_(from.distribution_bucket_counts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tags().empty()) {
    tags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tags(), 
      GetArenaForAllocation());
  }
  ::memcpy(&int_value_, &from.int_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&distribution_count_) -
    reinterpret_cast<char*>(&int_value_)) + sizeof(distribution_count_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ViewData.Measure)
}

inline void ViewData_Measure::SharedCtor() {
tags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&int_value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&distribution_count_) -
    reinterpret_cast<char*>(&int_value_)) + sizeof(distribution_count_));
}

ViewData_Measure::~ViewData_Measure() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ViewData.Measure)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ViewData_Measure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ViewData_Measure::ArenaDtor(void* object) {
  ViewData_Measure* _this = reinterpret_cast< ViewData_Measure* >(object);
  (void)_this;
}
void ViewData_Measure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ViewData_Measure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ViewData_Measure::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ViewData.Measure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  distribution_bucket_boundaries_.Clear();
  distribution_bucket_counts_.Clear();
  tags_.ClearToEmpty();
  ::memset(&int_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distribution_count_) -
      reinterpret_cast<char*>(&int_value_)) + sizeof(distribution_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewData_Measure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ViewData.Measure.tags"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 int_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          int_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double double_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          double_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double distribution_min = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          distribution_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double distribution_mean = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          distribution_mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double distribution_max = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          distribution_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double distribution_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          distribution_count_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double distribution_bucket_boundaries = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_distribution_bucket_boundaries(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65) {
          _internal_add_distribution_bucket_boundaries(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double distribution_bucket_counts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_distribution_bucket_counts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73) {
          _internal_add_distribution_bucket_counts(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewData_Measure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ViewData.Measure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tags = 1;
  if (!this->_internal_tags().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tags().data(), static_cast<int>(this->_internal_tags().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ViewData.Measure.tags");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tags(), target);
  }

  // int64 int_value = 2;
  if (this->_internal_int_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_int_value(), target);
  }

  // double double_value = 3;
  if (!(this->_internal_double_value() <= 0 && this->_internal_double_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_double_value(), target);
  }

  // double distribution_min = 4;
  if (!(this->_internal_distribution_min() <= 0 && this->_internal_distribution_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_distribution_min(), target);
  }

  // double distribution_mean = 5;
  if (!(this->_internal_distribution_mean() <= 0 && this->_internal_distribution_mean() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_distribution_mean(), target);
  }

  // double distribution_max = 6;
  if (!(this->_internal_distribution_max() <= 0 && this->_internal_distribution_max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_distribution_max(), target);
  }

  // double distribution_count = 7;
  if (!(this->_internal_distribution_count() <= 0 && this->_internal_distribution_count() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_distribution_count(), target);
  }

  // repeated double distribution_bucket_boundaries = 8;
  if (this->_internal_distribution_bucket_boundaries_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_distribution_bucket_boundaries(), target);
  }

  // repeated double distribution_bucket_counts = 9;
  if (this->_internal_distribution_bucket_counts_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_distribution_bucket_counts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ViewData.Measure)
  return target;
}

size_t ViewData_Measure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ViewData.Measure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double distribution_bucket_boundaries = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_distribution_bucket_boundaries_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double distribution_bucket_counts = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_distribution_bucket_counts_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // string tags = 1;
  if (!this->_internal_tags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tags());
  }

  // int64 int_value = 2;
  if (this->_internal_int_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_int_value());
  }

  // double double_value = 3;
  if (!(this->_internal_double_value() <= 0 && this->_internal_double_value() >= 0)) {
    total_size += 1 + 8;
  }

  // double distribution_min = 4;
  if (!(this->_internal_distribution_min() <= 0 && this->_internal_distribution_min() >= 0)) {
    total_size += 1 + 8;
  }

  // double distribution_mean = 5;
  if (!(this->_internal_distribution_mean() <= 0 && this->_internal_distribution_mean() >= 0)) {
    total_size += 1 + 8;
  }

  // double distribution_max = 6;
  if (!(this->_internal_distribution_max() <= 0 && this->_internal_distribution_max() >= 0)) {
    total_size += 1 + 8;
  }

  // double distribution_count = 7;
  if (!(this->_internal_distribution_count() <= 0 && this->_internal_distribution_count() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewData_Measure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ViewData_Measure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewData_Measure::GetClassData() const { return &_class_data_; }

void ViewData_Measure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ViewData_Measure *>(to)->MergeFrom(
      static_cast<const ViewData_Measure &>(from));
}


void ViewData_Measure::MergeFrom(const ViewData_Measure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ViewData.Measure)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  distribution_bucket_boundaries_.MergeFrom(from.distribution_bucket_boundaries_);
  distribution_bucket_counts_.MergeFrom(from.distribution_bucket_counts_);
  if (!from._internal_tags().empty()) {
    _internal_set_tags(from._internal_tags());
  }
  if (from._internal_int_value() != 0) {
    _internal_set_int_value(from._internal_int_value());
  }
  if (!(from._internal_double_value() <= 0 && from._internal_double_value() >= 0)) {
    _internal_set_double_value(from._internal_double_value());
  }
  if (!(from._internal_distribution_min() <= 0 && from._internal_distribution_min() >= 0)) {
    _internal_set_distribution_min(from._internal_distribution_min());
  }
  if (!(from._internal_distribution_mean() <= 0 && from._internal_distribution_mean() >= 0)) {
    _internal_set_distribution_mean(from._internal_distribution_mean());
  }
  if (!(from._internal_distribution_max() <= 0 && from._internal_distribution_max() >= 0)) {
    _internal_set_distribution_max(from._internal_distribution_max());
  }
  if (!(from._internal_distribution_count() <= 0 && from._internal_distribution_count() >= 0)) {
    _internal_set_distribution_count(from._internal_distribution_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewData_Measure::CopyFrom(const ViewData_Measure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ViewData.Measure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewData_Measure::IsInitialized() const {
  return true;
}

void ViewData_Measure::InternalSwap(ViewData_Measure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  distribution_bucket_boundaries_.InternalSwap(&other->distribution_bucket_boundaries_);
  distribution_bucket_counts_.InternalSwap(&other->distribution_bucket_counts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tags_, GetArenaForAllocation(),
      &other->tags_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewData_Measure, distribution_count_)
      + sizeof(ViewData_Measure::distribution_count_)
      - PROTOBUF_FIELD_OFFSET(ViewData_Measure, int_value_)>(
          reinterpret_cast<char*>(&int_value_),
          reinterpret_cast<char*>(&other->int_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewData_Measure::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[36]);
}

// ===================================================================

class ViewData::_Internal {
 public:
};

ViewData::ViewData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  measures_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ViewData)
}
ViewData::ViewData(const ViewData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      measures_(from.measures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  view_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_view_name().empty()) {
    view_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_view_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ViewData)
}

inline void ViewData::SharedCtor() {
view_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ViewData::~ViewData() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ViewData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ViewData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  view_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ViewData::ArenaDtor(void* object) {
  ViewData* _this = reinterpret_cast< ViewData* >(object);
  (void)_this;
}
void ViewData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ViewData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ViewData::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ViewData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  measures_.Clear();
  view_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string view_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_view_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ViewData.view_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mcs.rpc.ViewData.Measure measures = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_measures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ViewData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string view_name = 1;
  if (!this->_internal_view_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_view_name().data(), static_cast<int>(this->_internal_view_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ViewData.view_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_view_name(), target);
  }

  // repeated .mcs.rpc.ViewData.Measure measures = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_measures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_measures(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ViewData)
  return target;
}

size_t ViewData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ViewData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mcs.rpc.ViewData.Measure measures = 2;
  total_size += 1UL * this->_internal_measures_size();
  for (const auto& msg : this->measures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string view_name = 1;
  if (!this->_internal_view_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_view_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ViewData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewData::GetClassData() const { return &_class_data_; }

void ViewData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ViewData *>(to)->MergeFrom(
      static_cast<const ViewData &>(from));
}


void ViewData::MergeFrom(const ViewData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ViewData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  measures_.MergeFrom(from.measures_);
  if (!from._internal_view_name().empty()) {
    _internal_set_view_name(from._internal_view_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewData::CopyFrom(const ViewData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ViewData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewData::IsInitialized() const {
  return true;
}

void ViewData::InternalSwap(ViewData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  measures_.InternalSwap(&other->measures_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &view_name_, GetArenaForAllocation(),
      &other->view_name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[37]);
}

// ===================================================================

class ObjectRefInfo::_Internal {
 public:
};

ObjectRefInfo::ObjectRefInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  contained_in_owned_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ObjectRefInfo)
}
ObjectRefInfo::ObjectRefInfo(const ObjectRefInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      contained_in_owned_(from.contained_in_owned_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_object_id().empty()) {
    object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_object_id(), 
      GetArenaForAllocation());
  }
  call_site_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_call_site().empty()) {
    call_site_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_call_site(), 
      GetArenaForAllocation());
  }
  ::memcpy(&object_size_, &from.object_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&attempt_number_) -
    reinterpret_cast<char*>(&object_size_)) + sizeof(attempt_number_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ObjectRefInfo)
}

inline void ObjectRefInfo::SharedCtor() {
object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
call_site_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attempt_number_) -
    reinterpret_cast<char*>(&object_size_)) + sizeof(attempt_number_));
}

ObjectRefInfo::~ObjectRefInfo() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ObjectRefInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ObjectRefInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  object_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  call_site_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ObjectRefInfo::ArenaDtor(void* object) {
  ObjectRefInfo* _this = reinterpret_cast< ObjectRefInfo* >(object);
  (void)_this;
}
void ObjectRefInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectRefInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectRefInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ObjectRefInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contained_in_owned_.Clear();
  object_id_.ClearToEmpty();
  call_site_.ClearToEmpty();
  ::memset(&object_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attempt_number_) -
      reinterpret_cast<char*>(&object_size_)) + sizeof(attempt_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectRefInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_object_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string call_site = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_call_site();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ObjectRefInfo.call_site"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 object_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          object_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 local_ref_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          local_ref_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 submitted_task_ref_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          submitted_task_ref_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes contained_in_owned = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_contained_in_owned();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // bool pinned_in_memory = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          pinned_in_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.TaskStatus task_status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_task_status(static_cast<::mcs::rpc::TaskStatus>(val));
        } else goto handle_unusual;
        continue;
      // uint64 attempt_number = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          attempt_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectRefInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ObjectRefInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes object_id = 1;
  if (!this->_internal_object_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_object_id(), target);
  }

  // string call_site = 2;
  if (!this->_internal_call_site().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_call_site().data(), static_cast<int>(this->_internal_call_site().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ObjectRefInfo.call_site");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_call_site(), target);
  }

  // int64 object_size = 3;
  if (this->_internal_object_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_object_size(), target);
  }

  // int64 local_ref_count = 4;
  if (this->_internal_local_ref_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_local_ref_count(), target);
  }

  // int64 submitted_task_ref_count = 5;
  if (this->_internal_submitted_task_ref_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_submitted_task_ref_count(), target);
  }

  // repeated bytes contained_in_owned = 6;
  for (int i = 0, n = this->_internal_contained_in_owned_size(); i < n; i++) {
    const auto& s = this->_internal_contained_in_owned(i);
    target = stream->WriteBytes(6, s, target);
  }

  // bool pinned_in_memory = 7;
  if (this->_internal_pinned_in_memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_pinned_in_memory(), target);
  }

  // .mcs.rpc.TaskStatus task_status = 8;
  if (this->_internal_task_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_task_status(), target);
  }

  // uint64 attempt_number = 9;
  if (this->_internal_attempt_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_attempt_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ObjectRefInfo)
  return target;
}

size_t ObjectRefInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ObjectRefInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes contained_in_owned = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(contained_in_owned_.size());
  for (int i = 0, n = contained_in_owned_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      contained_in_owned_.Get(i));
  }

  // bytes object_id = 1;
  if (!this->_internal_object_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_object_id());
  }

  // string call_site = 2;
  if (!this->_internal_call_site().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_call_site());
  }

  // int64 object_size = 3;
  if (this->_internal_object_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_object_size());
  }

  // int64 local_ref_count = 4;
  if (this->_internal_local_ref_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_local_ref_count());
  }

  // int64 submitted_task_ref_count = 5;
  if (this->_internal_submitted_task_ref_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_submitted_task_ref_count());
  }

  // bool pinned_in_memory = 7;
  if (this->_internal_pinned_in_memory() != 0) {
    total_size += 1 + 1;
  }

  // .mcs.rpc.TaskStatus task_status = 8;
  if (this->_internal_task_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_task_status());
  }

  // uint64 attempt_number = 9;
  if (this->_internal_attempt_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_attempt_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectRefInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObjectRefInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectRefInfo::GetClassData() const { return &_class_data_; }

void ObjectRefInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ObjectRefInfo *>(to)->MergeFrom(
      static_cast<const ObjectRefInfo &>(from));
}


void ObjectRefInfo::MergeFrom(const ObjectRefInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ObjectRefInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contained_in_owned_.MergeFrom(from.contained_in_owned_);
  if (!from._internal_object_id().empty()) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (!from._internal_call_site().empty()) {
    _internal_set_call_site(from._internal_call_site());
  }
  if (from._internal_object_size() != 0) {
    _internal_set_object_size(from._internal_object_size());
  }
  if (from._internal_local_ref_count() != 0) {
    _internal_set_local_ref_count(from._internal_local_ref_count());
  }
  if (from._internal_submitted_task_ref_count() != 0) {
    _internal_set_submitted_task_ref_count(from._internal_submitted_task_ref_count());
  }
  if (from._internal_pinned_in_memory() != 0) {
    _internal_set_pinned_in_memory(from._internal_pinned_in_memory());
  }
  if (from._internal_task_status() != 0) {
    _internal_set_task_status(from._internal_task_status());
  }
  if (from._internal_attempt_number() != 0) {
    _internal_set_attempt_number(from._internal_attempt_number());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectRefInfo::CopyFrom(const ObjectRefInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ObjectRefInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRefInfo::IsInitialized() const {
  return true;
}

void ObjectRefInfo::InternalSwap(ObjectRefInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  contained_in_owned_.InternalSwap(&other->contained_in_owned_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &object_id_, GetArenaForAllocation(),
      &other->object_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &call_site_, GetArenaForAllocation(),
      &other->call_site_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectRefInfo, attempt_number_)
      + sizeof(ObjectRefInfo::attempt_number_)
      - PROTOBUF_FIELD_OFFSET(ObjectRefInfo, object_size_)>(
          reinterpret_cast<char*>(&object_size_),
          reinterpret_cast<char*>(&other->object_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRefInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[38]);
}

// ===================================================================

class ResourceAllocations_ResourceSlot::_Internal {
 public:
};

ResourceAllocations_ResourceSlot::ResourceAllocations_ResourceSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ResourceAllocations.ResourceSlot)
}
ResourceAllocations_ResourceSlot::ResourceAllocations_ResourceSlot(const ResourceAllocations_ResourceSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&slot_, &from.slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&allocation_) -
    reinterpret_cast<char*>(&slot_)) + sizeof(allocation_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ResourceAllocations.ResourceSlot)
}

inline void ResourceAllocations_ResourceSlot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slot_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allocation_) -
    reinterpret_cast<char*>(&slot_)) + sizeof(allocation_));
}

ResourceAllocations_ResourceSlot::~ResourceAllocations_ResourceSlot() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ResourceAllocations.ResourceSlot)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResourceAllocations_ResourceSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResourceAllocations_ResourceSlot::ArenaDtor(void* object) {
  ResourceAllocations_ResourceSlot* _this = reinterpret_cast< ResourceAllocations_ResourceSlot* >(object);
  (void)_this;
}
void ResourceAllocations_ResourceSlot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceAllocations_ResourceSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResourceAllocations_ResourceSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ResourceAllocations.ResourceSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&slot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allocation_) -
      reinterpret_cast<char*>(&slot_)) + sizeof(allocation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceAllocations_ResourceSlot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double allocation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          allocation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceAllocations_ResourceSlot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ResourceAllocations.ResourceSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 slot = 1;
  if (this->_internal_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_slot(), target);
  }

  // double allocation = 2;
  if (!(this->_internal_allocation() <= 0 && this->_internal_allocation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_allocation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ResourceAllocations.ResourceSlot)
  return target;
}

size_t ResourceAllocations_ResourceSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ResourceAllocations.ResourceSlot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 slot = 1;
  if (this->_internal_slot() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_slot());
  }

  // double allocation = 2;
  if (!(this->_internal_allocation() <= 0 && this->_internal_allocation() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceAllocations_ResourceSlot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResourceAllocations_ResourceSlot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceAllocations_ResourceSlot::GetClassData() const { return &_class_data_; }

void ResourceAllocations_ResourceSlot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ResourceAllocations_ResourceSlot *>(to)->MergeFrom(
      static_cast<const ResourceAllocations_ResourceSlot &>(from));
}


void ResourceAllocations_ResourceSlot::MergeFrom(const ResourceAllocations_ResourceSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ResourceAllocations.ResourceSlot)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_slot() != 0) {
    _internal_set_slot(from._internal_slot());
  }
  if (!(from._internal_allocation() <= 0 && from._internal_allocation() >= 0)) {
    _internal_set_allocation(from._internal_allocation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceAllocations_ResourceSlot::CopyFrom(const ResourceAllocations_ResourceSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ResourceAllocations.ResourceSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceAllocations_ResourceSlot::IsInitialized() const {
  return true;
}

void ResourceAllocations_ResourceSlot::InternalSwap(ResourceAllocations_ResourceSlot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceAllocations_ResourceSlot, allocation_)
      + sizeof(ResourceAllocations_ResourceSlot::allocation_)
      - PROTOBUF_FIELD_OFFSET(ResourceAllocations_ResourceSlot, slot_)>(
          reinterpret_cast<char*>(&slot_),
          reinterpret_cast<char*>(&other->slot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceAllocations_ResourceSlot::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[39]);
}

// ===================================================================

class ResourceAllocations::_Internal {
 public:
};

ResourceAllocations::ResourceAllocations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  resource_slots_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ResourceAllocations)
}
ResourceAllocations::ResourceAllocations(const ResourceAllocations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      resource_slots_(from.resource_slots_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ResourceAllocations)
}

inline void ResourceAllocations::SharedCtor() {
}

ResourceAllocations::~ResourceAllocations() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ResourceAllocations)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResourceAllocations::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResourceAllocations::ArenaDtor(void* object) {
  ResourceAllocations* _this = reinterpret_cast< ResourceAllocations* >(object);
  (void)_this;
}
void ResourceAllocations::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceAllocations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResourceAllocations::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ResourceAllocations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_slots_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceAllocations::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mcs.rpc.ResourceAllocations.ResourceSlot resource_slots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resource_slots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceAllocations::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ResourceAllocations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mcs.rpc.ResourceAllocations.ResourceSlot resource_slots = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_slots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_resource_slots(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ResourceAllocations)
  return target;
}

size_t ResourceAllocations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ResourceAllocations)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mcs.rpc.ResourceAllocations.ResourceSlot resource_slots = 1;
  total_size += 1UL * this->_internal_resource_slots_size();
  for (const auto& msg : this->resource_slots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceAllocations::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResourceAllocations::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceAllocations::GetClassData() const { return &_class_data_; }

void ResourceAllocations::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ResourceAllocations *>(to)->MergeFrom(
      static_cast<const ResourceAllocations &>(from));
}


void ResourceAllocations::MergeFrom(const ResourceAllocations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ResourceAllocations)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resource_slots_.MergeFrom(from.resource_slots_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceAllocations::CopyFrom(const ResourceAllocations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ResourceAllocations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceAllocations::IsInitialized() const {
  return true;
}

void ResourceAllocations::InternalSwap(ResourceAllocations* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  resource_slots_.InternalSwap(&other->resource_slots_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceAllocations::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[40]);
}

// ===================================================================

CoreWorkerStats_UsedResourcesEntry_DoNotUse::CoreWorkerStats_UsedResourcesEntry_DoNotUse() {}
CoreWorkerStats_UsedResourcesEntry_DoNotUse::CoreWorkerStats_UsedResourcesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CoreWorkerStats_UsedResourcesEntry_DoNotUse::MergeFrom(const CoreWorkerStats_UsedResourcesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CoreWorkerStats_UsedResourcesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[41]);
}

// ===================================================================

CoreWorkerStats_WebuiDisplayEntry_DoNotUse::CoreWorkerStats_WebuiDisplayEntry_DoNotUse() {}
CoreWorkerStats_WebuiDisplayEntry_DoNotUse::CoreWorkerStats_WebuiDisplayEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CoreWorkerStats_WebuiDisplayEntry_DoNotUse::MergeFrom(const CoreWorkerStats_WebuiDisplayEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CoreWorkerStats_WebuiDisplayEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[42]);
}

// ===================================================================

class CoreWorkerStats::_Internal {
 public:
};

CoreWorkerStats::CoreWorkerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  used_resources_(arena),
  webui_display_(arena),
  object_refs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.CoreWorkerStats)
}
CoreWorkerStats::CoreWorkerStats(const CoreWorkerStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      object_refs_(from.object_refs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  used_resources_.MergeFrom(from.used_resources_);
  webui_display_.MergeFrom(from.webui_display_);
  current_task_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_current_task_desc().empty()) {
    current_task_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_current_task_desc(), 
      GetArenaForAllocation());
  }
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_address().empty()) {
    ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip_address(), 
      GetArenaForAllocation());
  }
  actor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_actor_id().empty()) {
    actor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_actor_id(), 
      GetArenaForAllocation());
  }
  actor_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_actor_title().empty()) {
    actor_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_actor_title(), 
      GetArenaForAllocation());
  }
  job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_job_id().empty()) {
    job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_job_id(), 
      GetArenaForAllocation());
  }
  worker_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_worker_id().empty()) {
    worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_worker_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&num_pending_tasks_, &from.num_pending_tasks_,
    static_cast<size_t>(reinterpret_cast<char*>(&objects_total_) -
    reinterpret_cast<char*>(&num_pending_tasks_)) + sizeof(objects_total_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.CoreWorkerStats)
}

inline void CoreWorkerStats::SharedCtor() {
current_task_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
actor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
actor_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
worker_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_pending_tasks_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&objects_total_) -
    reinterpret_cast<char*>(&num_pending_tasks_)) + sizeof(objects_total_));
}

CoreWorkerStats::~CoreWorkerStats() {
  // @@protoc_insertion_point(destructor:mcs.rpc.CoreWorkerStats)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CoreWorkerStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  current_task_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actor_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  job_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  worker_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CoreWorkerStats::ArenaDtor(void* object) {
  CoreWorkerStats* _this = reinterpret_cast< CoreWorkerStats* >(object);
  (void)_this;
  _this->used_resources_. ~MapField();
  _this->webui_display_. ~MapField();
}
inline void CoreWorkerStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &CoreWorkerStats::ArenaDtor);
  }
}
void CoreWorkerStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CoreWorkerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.CoreWorkerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  used_resources_.Clear();
  webui_display_.Clear();
  object_refs_.Clear();
  current_task_desc_.ClearToEmpty();
  ip_address_.ClearToEmpty();
  actor_id_.ClearToEmpty();
  actor_title_.ClearToEmpty();
  job_id_.ClearToEmpty();
  worker_id_.ClearToEmpty();
  ::memset(&num_pending_tasks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&objects_total_) -
      reinterpret_cast<char*>(&num_pending_tasks_)) + sizeof(objects_total_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoreWorkerStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string current_task_desc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_current_task_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.CoreWorkerStats.current_task_desc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_pending_tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_pending_tasks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_object_refs_in_scope = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_object_refs_in_scope_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip_address = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.CoreWorkerStats.ip_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 port = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes actor_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_actor_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .mcs.rpc.ResourceAllocations> used_resources = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&used_resources_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> webui_display = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&webui_display_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 num_in_plasma = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          num_in_plasma_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_local_objects = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          num_local_objects_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 used_object_store_memory = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          used_object_store_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 task_queue_length = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          task_queue_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_executed_tasks = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          num_executed_tasks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string actor_title = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_actor_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.CoreWorkerStats.actor_title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mcs.rpc.ObjectRefInfo object_refs = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_object_refs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes job_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_job_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes worker_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_worker_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.Language language = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language(static_cast<::mcs::rpc::Language>(val));
        } else goto handle_unusual;
        continue;
      // uint32 pid = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.WorkerType worker_type = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_worker_type(static_cast<::mcs::rpc::WorkerType>(val));
        } else goto handle_unusual;
        continue;
      // int64 objects_total = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          objects_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CoreWorkerStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.CoreWorkerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string current_task_desc = 1;
  if (!this->_internal_current_task_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_task_desc().data(), static_cast<int>(this->_internal_current_task_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.CoreWorkerStats.current_task_desc");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_current_task_desc(), target);
  }

  // int32 num_pending_tasks = 2;
  if (this->_internal_num_pending_tasks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_pending_tasks(), target);
  }

  // int32 num_object_refs_in_scope = 3;
  if (this->_internal_num_object_refs_in_scope() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_object_refs_in_scope(), target);
  }

  // string ip_address = 7;
  if (!this->_internal_ip_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.CoreWorkerStats.ip_address");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ip_address(), target);
  }

  // int64 port = 8;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_port(), target);
  }

  // bytes actor_id = 9;
  if (!this->_internal_actor_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_actor_id(), target);
  }

  // map<string, .mcs.rpc.ResourceAllocations> used_resources = 10;
  if (!this->_internal_used_resources().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mcs::rpc::ResourceAllocations >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mcs.rpc.CoreWorkerStats.UsedResourcesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_used_resources().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_used_resources().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mcs::rpc::ResourceAllocations >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mcs::rpc::ResourceAllocations >::const_iterator
          it = this->_internal_used_resources().begin();
          it != this->_internal_used_resources().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CoreWorkerStats_UsedResourcesEntry_DoNotUse::Funcs::InternalSerialize(10, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mcs::rpc::ResourceAllocations >::const_iterator
          it = this->_internal_used_resources().begin();
          it != this->_internal_used_resources().end(); ++it) {
        target = CoreWorkerStats_UsedResourcesEntry_DoNotUse::Funcs::InternalSerialize(10, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> webui_display = 11;
  if (!this->_internal_webui_display().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mcs.rpc.CoreWorkerStats.WebuiDisplayEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mcs.rpc.CoreWorkerStats.WebuiDisplayEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_webui_display().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_webui_display().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_webui_display().begin();
          it != this->_internal_webui_display().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CoreWorkerStats_WebuiDisplayEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_webui_display().begin();
          it != this->_internal_webui_display().end(); ++it) {
        target = CoreWorkerStats_WebuiDisplayEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int32 num_in_plasma = 12;
  if (this->_internal_num_in_plasma() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_num_in_plasma(), target);
  }

  // int32 num_local_objects = 13;
  if (this->_internal_num_local_objects() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_num_local_objects(), target);
  }

  // int64 used_object_store_memory = 14;
  if (this->_internal_used_object_store_memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_used_object_store_memory(), target);
  }

  // int32 task_queue_length = 15;
  if (this->_internal_task_queue_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_task_queue_length(), target);
  }

  // int32 num_executed_tasks = 16;
  if (this->_internal_num_executed_tasks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_num_executed_tasks(), target);
  }

  // string actor_title = 17;
  if (!this->_internal_actor_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_actor_title().data(), static_cast<int>(this->_internal_actor_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.CoreWorkerStats.actor_title");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_actor_title(), target);
  }

  // repeated .mcs.rpc.ObjectRefInfo object_refs = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_refs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_object_refs(i), target, stream);
  }

  // bytes job_id = 19;
  if (!this->_internal_job_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        19, this->_internal_job_id(), target);
  }

  // bytes worker_id = 20;
  if (!this->_internal_worker_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_worker_id(), target);
  }

  // .mcs.rpc.Language language = 21;
  if (this->_internal_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_language(), target);
  }

  // uint32 pid = 22;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_pid(), target);
  }

  // .mcs.rpc.WorkerType worker_type = 23;
  if (this->_internal_worker_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->_internal_worker_type(), target);
  }

  // int64 objects_total = 24;
  if (this->_internal_objects_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(24, this->_internal_objects_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.CoreWorkerStats)
  return target;
}

size_t CoreWorkerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.CoreWorkerStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .mcs.rpc.ResourceAllocations> used_resources = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_used_resources_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mcs::rpc::ResourceAllocations >::const_iterator
      it = this->_internal_used_resources().begin();
      it != this->_internal_used_resources().end(); ++it) {
    total_size += CoreWorkerStats_UsedResourcesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> webui_display = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_webui_display_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_webui_display().begin();
      it != this->_internal_webui_display().end(); ++it) {
    total_size += CoreWorkerStats_WebuiDisplayEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .mcs.rpc.ObjectRefInfo object_refs = 18;
  total_size += 2UL * this->_internal_object_refs_size();
  for (const auto& msg : this->object_refs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string current_task_desc = 1;
  if (!this->_internal_current_task_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_task_desc());
  }

  // string ip_address = 7;
  if (!this->_internal_ip_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // bytes actor_id = 9;
  if (!this->_internal_actor_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_actor_id());
  }

  // string actor_title = 17;
  if (!this->_internal_actor_title().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_actor_title());
  }

  // bytes job_id = 19;
  if (!this->_internal_job_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_job_id());
  }

  // bytes worker_id = 20;
  if (!this->_internal_worker_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_worker_id());
  }

  // int32 num_pending_tasks = 2;
  if (this->_internal_num_pending_tasks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_pending_tasks());
  }

  // int32 num_object_refs_in_scope = 3;
  if (this->_internal_num_object_refs_in_scope() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_object_refs_in_scope());
  }

  // int64 port = 8;
  if (this->_internal_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_port());
  }

  // int32 num_in_plasma = 12;
  if (this->_internal_num_in_plasma() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_in_plasma());
  }

  // int32 num_local_objects = 13;
  if (this->_internal_num_local_objects() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_local_objects());
  }

  // int64 used_object_store_memory = 14;
  if (this->_internal_used_object_store_memory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_used_object_store_memory());
  }

  // int32 task_queue_length = 15;
  if (this->_internal_task_queue_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_task_queue_length());
  }

  // int32 num_executed_tasks = 16;
  if (this->_internal_num_executed_tasks() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_executed_tasks());
  }

  // .mcs.rpc.Language language = 21;
  if (this->_internal_language() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_language());
  }

  // uint32 pid = 22;
  if (this->_internal_pid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pid());
  }

  // .mcs.rpc.WorkerType worker_type = 23;
  if (this->_internal_worker_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_worker_type());
  }

  // int64 objects_total = 24;
  if (this->_internal_objects_total() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_objects_total());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CoreWorkerStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CoreWorkerStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CoreWorkerStats::GetClassData() const { return &_class_data_; }

void CoreWorkerStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CoreWorkerStats *>(to)->MergeFrom(
      static_cast<const CoreWorkerStats &>(from));
}


void CoreWorkerStats::MergeFrom(const CoreWorkerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.CoreWorkerStats)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  used_resources_.MergeFrom(from.used_resources_);
  webui_display_.MergeFrom(from.webui_display_);
  object_refs_.MergeFrom(from.object_refs_);
  if (!from._internal_current_task_desc().empty()) {
    _internal_set_current_task_desc(from._internal_current_task_desc());
  }
  if (!from._internal_ip_address().empty()) {
    _internal_set_ip_address(from._internal_ip_address());
  }
  if (!from._internal_actor_id().empty()) {
    _internal_set_actor_id(from._internal_actor_id());
  }
  if (!from._internal_actor_title().empty()) {
    _internal_set_actor_title(from._internal_actor_title());
  }
  if (!from._internal_job_id().empty()) {
    _internal_set_job_id(from._internal_job_id());
  }
  if (!from._internal_worker_id().empty()) {
    _internal_set_worker_id(from._internal_worker_id());
  }
  if (from._internal_num_pending_tasks() != 0) {
    _internal_set_num_pending_tasks(from._internal_num_pending_tasks());
  }
  if (from._internal_num_object_refs_in_scope() != 0) {
    _internal_set_num_object_refs_in_scope(from._internal_num_object_refs_in_scope());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from._internal_num_in_plasma() != 0) {
    _internal_set_num_in_plasma(from._internal_num_in_plasma());
  }
  if (from._internal_num_local_objects() != 0) {
    _internal_set_num_local_objects(from._internal_num_local_objects());
  }
  if (from._internal_used_object_store_memory() != 0) {
    _internal_set_used_object_store_memory(from._internal_used_object_store_memory());
  }
  if (from._internal_task_queue_length() != 0) {
    _internal_set_task_queue_length(from._internal_task_queue_length());
  }
  if (from._internal_num_executed_tasks() != 0) {
    _internal_set_num_executed_tasks(from._internal_num_executed_tasks());
  }
  if (from._internal_language() != 0) {
    _internal_set_language(from._internal_language());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_worker_type() != 0) {
    _internal_set_worker_type(from._internal_worker_type());
  }
  if (from._internal_objects_total() != 0) {
    _internal_set_objects_total(from._internal_objects_total());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CoreWorkerStats::CopyFrom(const CoreWorkerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.CoreWorkerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoreWorkerStats::IsInitialized() const {
  return true;
}

void CoreWorkerStats::InternalSwap(CoreWorkerStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  used_resources_.InternalSwap(&other->used_resources_);
  webui_display_.InternalSwap(&other->webui_display_);
  object_refs_.InternalSwap(&other->object_refs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &current_task_desc_, GetArenaForAllocation(),
      &other->current_task_desc_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_address_, GetArenaForAllocation(),
      &other->ip_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &actor_id_, GetArenaForAllocation(),
      &other->actor_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &actor_title_, GetArenaForAllocation(),
      &other->actor_title_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &job_id_, GetArenaForAllocation(),
      &other->job_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &worker_id_, GetArenaForAllocation(),
      &other->worker_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CoreWorkerStats, objects_total_)
      + sizeof(CoreWorkerStats::objects_total_)
      - PROTOBUF_FIELD_OFFSET(CoreWorkerStats, num_pending_tasks_)>(
          reinterpret_cast<char*>(&num_pending_tasks_),
          reinterpret_cast<char*>(&other->num_pending_tasks_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CoreWorkerStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[43]);
}

// ===================================================================

MetricPoint_TagsEntry_DoNotUse::MetricPoint_TagsEntry_DoNotUse() {}
MetricPoint_TagsEntry_DoNotUse::MetricPoint_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MetricPoint_TagsEntry_DoNotUse::MergeFrom(const MetricPoint_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MetricPoint_TagsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[44]);
}

// ===================================================================

class MetricPoint::_Internal {
 public:
};

MetricPoint::MetricPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.MetricPoint)
}
MetricPoint::MetricPoint(const MetricPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  metric_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metric_name().empty()) {
    metric_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metric_name(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_units().empty()) {
    units_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_units(), 
      GetArenaForAllocation());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.MetricPoint)
}

inline void MetricPoint::SharedCtor() {
metric_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
}

MetricPoint::~MetricPoint() {
  // @@protoc_insertion_point(destructor:mcs.rpc.MetricPoint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MetricPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  metric_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  units_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MetricPoint::ArenaDtor(void* object) {
  MetricPoint* _this = reinterpret_cast< MetricPoint* >(object);
  (void)_this;
  _this->tags_. ~MapField();
}
inline void MetricPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &MetricPoint::ArenaDtor);
  }
}
void MetricPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetricPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.MetricPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  metric_name_.ClearToEmpty();
  description_.ClearToEmpty();
  units_.ClearToEmpty();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string metric_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_metric_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.MetricPoint.metric_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // map<string, string> tags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tags_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.MetricPoint.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string units = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_units();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.MetricPoint.units"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.MetricPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string metric_name = 1;
  if (!this->_internal_metric_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metric_name().data(), static_cast<int>(this->_internal_metric_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.MetricPoint.metric_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_metric_name(), target);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // double value = 3;
  if (!(this->_internal_value() <= 0 && this->_internal_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_value(), target);
  }

  // map<string, string> tags = 4;
  if (!this->_internal_tags().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mcs.rpc.MetricPoint.TagsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mcs.rpc.MetricPoint.TagsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tags().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MetricPoint_TagsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it) {
        target = MetricPoint_TagsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.MetricPoint.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // string units = 6;
  if (!this->_internal_units().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_units().data(), static_cast<int>(this->_internal_units().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.MetricPoint.units");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_units(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.MetricPoint)
  return target;
}

size_t MetricPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.MetricPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> tags = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tags_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_tags().begin();
      it != this->_internal_tags().end(); ++it) {
    total_size += MetricPoint_TagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string metric_name = 1;
  if (!this->_internal_metric_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metric_name());
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string units = 6;
  if (!this->_internal_units().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_units());
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // double value = 3;
  if (!(this->_internal_value() <= 0 && this->_internal_value() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MetricPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricPoint::GetClassData() const { return &_class_data_; }

void MetricPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MetricPoint *>(to)->MergeFrom(
      static_cast<const MetricPoint &>(from));
}


void MetricPoint::MergeFrom(const MetricPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.MetricPoint)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (!from._internal_metric_name().empty()) {
    _internal_set_metric_name(from._internal_metric_name());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_units().empty()) {
    _internal_set_units(from._internal_units());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (!(from._internal_value() <= 0 && from._internal_value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricPoint::CopyFrom(const MetricPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.MetricPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricPoint::IsInitialized() const {
  return true;
}

void MetricPoint::InternalSwap(MetricPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &metric_name_, GetArenaForAllocation(),
      &other->metric_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &units_, GetArenaForAllocation(),
      &other->units_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricPoint, value_)
      + sizeof(MetricPoint::value_)
      - PROTOBUF_FIELD_OFFSET(MetricPoint, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricPoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[45]);
}

// ===================================================================

class NamedActorInfo::_Internal {
 public:
};

NamedActorInfo::NamedActorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.NamedActorInfo)
}
NamedActorInfo::NamedActorInfo(const NamedActorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mcs_namespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mcs_namespace().empty()) {
    mcs_namespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mcs_namespace(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.NamedActorInfo)
}

inline void NamedActorInfo::SharedCtor() {
mcs_namespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NamedActorInfo::~NamedActorInfo() {
  // @@protoc_insertion_point(destructor:mcs.rpc.NamedActorInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NamedActorInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mcs_namespace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NamedActorInfo::ArenaDtor(void* object) {
  NamedActorInfo* _this = reinterpret_cast< NamedActorInfo* >(object);
  (void)_this;
}
void NamedActorInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedActorInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NamedActorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.NamedActorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mcs_namespace_.ClearToEmpty();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedActorInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mcs_namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mcs_namespace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.NamedActorInfo.mcs_namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.NamedActorInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedActorInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.NamedActorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mcs_namespace = 1;
  if (!this->_internal_mcs_namespace().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mcs_namespace().data(), static_cast<int>(this->_internal_mcs_namespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.NamedActorInfo.mcs_namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mcs_namespace(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.NamedActorInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.NamedActorInfo)
  return target;
}

size_t NamedActorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.NamedActorInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mcs_namespace = 1;
  if (!this->_internal_mcs_namespace().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mcs_namespace());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamedActorInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NamedActorInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamedActorInfo::GetClassData() const { return &_class_data_; }

void NamedActorInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NamedActorInfo *>(to)->MergeFrom(
      static_cast<const NamedActorInfo &>(from));
}


void NamedActorInfo::MergeFrom(const NamedActorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.NamedActorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mcs_namespace().empty()) {
    _internal_set_mcs_namespace(from._internal_mcs_namespace());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamedActorInfo::CopyFrom(const NamedActorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.NamedActorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedActorInfo::IsInitialized() const {
  return true;
}

void NamedActorInfo::InternalSwap(NamedActorInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mcs_namespace_, GetArenaForAllocation(),
      &other->mcs_namespace_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedActorInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[46]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc
}  // namespace mcs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mcs::rpc::NodeAffinitySchedulingStrategy* Arena::CreateMaybeMessage< ::mcs::rpc::NodeAffinitySchedulingStrategy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::NodeAffinitySchedulingStrategy >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::PlacementGroupSchedulingStrategy* Arena::CreateMaybeMessage< ::mcs::rpc::PlacementGroupSchedulingStrategy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::PlacementGroupSchedulingStrategy >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::DefaultSchedulingStrategy* Arena::CreateMaybeMessage< ::mcs::rpc::DefaultSchedulingStrategy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::DefaultSchedulingStrategy >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::SpreadSchedulingStrategy* Arena::CreateMaybeMessage< ::mcs::rpc::SpreadSchedulingStrategy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::SpreadSchedulingStrategy >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::SchedulingStrategy* Arena::CreateMaybeMessage< ::mcs::rpc::SchedulingStrategy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::SchedulingStrategy >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::Address* Arena::CreateMaybeMessage< ::mcs::rpc::Address >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::Address >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::JavaFunctionDescriptor* Arena::CreateMaybeMessage< ::mcs::rpc::JavaFunctionDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::JavaFunctionDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::PythonFunctionDescriptor* Arena::CreateMaybeMessage< ::mcs::rpc::PythonFunctionDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::PythonFunctionDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::CppFunctionDescriptor* Arena::CreateMaybeMessage< ::mcs::rpc::CppFunctionDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::CppFunctionDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::FunctionDescriptor* Arena::CreateMaybeMessage< ::mcs::rpc::FunctionDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::FunctionDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ConcurrencyGroup* Arena::CreateMaybeMessage< ::mcs::rpc::ConcurrencyGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ConcurrencyGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::McsErrorInfo* Arena::CreateMaybeMessage< ::mcs::rpc::McsErrorInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::McsErrorInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::OutOfMemoryErrorContext* Arena::CreateMaybeMessage< ::mcs::rpc::OutOfMemoryErrorContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::OutOfMemoryErrorContext >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::NodeDiedErrorContext* Arena::CreateMaybeMessage< ::mcs::rpc::NodeDiedErrorContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::NodeDiedErrorContext >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::McsException* Arena::CreateMaybeMessage< ::mcs::rpc::McsException >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::McsException >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ActorDeathCause* Arena::CreateMaybeMessage< ::mcs::rpc::ActorDeathCause >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ActorDeathCause >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::RuntimeEnvFailedContext* Arena::CreateMaybeMessage< ::mcs::rpc::RuntimeEnvFailedContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::RuntimeEnvFailedContext >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ActorUnschedulableContext* Arena::CreateMaybeMessage< ::mcs::rpc::ActorUnschedulableContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ActorUnschedulableContext >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ActorDiedErrorContext* Arena::CreateMaybeMessage< ::mcs::rpc::ActorDiedErrorContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ActorDiedErrorContext >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::TaskSpec_RequiredResourcesEntry_DoNotUse* Arena::CreateMaybeMessage< ::mcs::rpc::TaskSpec_RequiredResourcesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::TaskSpec_RequiredResourcesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::TaskSpec_RequiredPlacementResourcesEntry_DoNotUse* Arena::CreateMaybeMessage< ::mcs::rpc::TaskSpec_RequiredPlacementResourcesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::TaskSpec_RequiredPlacementResourcesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::TaskSpec* Arena::CreateMaybeMessage< ::mcs::rpc::TaskSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::TaskSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::TaskInfoEntry_RequiredResourcesEntry_DoNotUse* Arena::CreateMaybeMessage< ::mcs::rpc::TaskInfoEntry_RequiredResourcesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::TaskInfoEntry_RequiredResourcesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::TaskInfoEntry* Arena::CreateMaybeMessage< ::mcs::rpc::TaskInfoEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::TaskInfoEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::Bundle_BundleIdentifier* Arena::CreateMaybeMessage< ::mcs::rpc::Bundle_BundleIdentifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::Bundle_BundleIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::Bundle_UnitResourcesEntry_DoNotUse* Arena::CreateMaybeMessage< ::mcs::rpc::Bundle_UnitResourcesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::Bundle_UnitResourcesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::Bundle* Arena::CreateMaybeMessage< ::mcs::rpc::Bundle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::Bundle >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::PlacementGroupSpec* Arena::CreateMaybeMessage< ::mcs::rpc::PlacementGroupSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::PlacementGroupSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ObjectReference* Arena::CreateMaybeMessage< ::mcs::rpc::ObjectReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ObjectReference >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ObjectReferenceCount* Arena::CreateMaybeMessage< ::mcs::rpc::ObjectReferenceCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ObjectReferenceCount >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::TaskArg* Arena::CreateMaybeMessage< ::mcs::rpc::TaskArg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::TaskArg >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ActorCreationTaskSpec* Arena::CreateMaybeMessage< ::mcs::rpc::ActorCreationTaskSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ActorCreationTaskSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ActorTaskSpec* Arena::CreateMaybeMessage< ::mcs::rpc::ActorTaskSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ActorTaskSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::Task* Arena::CreateMaybeMessage< ::mcs::rpc::Task >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::Task >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ResourceId* Arena::CreateMaybeMessage< ::mcs::rpc::ResourceId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ResourceId >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ResourceMapEntry* Arena::CreateMaybeMessage< ::mcs::rpc::ResourceMapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ResourceMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ViewData_Measure* Arena::CreateMaybeMessage< ::mcs::rpc::ViewData_Measure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ViewData_Measure >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ViewData* Arena::CreateMaybeMessage< ::mcs::rpc::ViewData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ViewData >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ObjectRefInfo* Arena::CreateMaybeMessage< ::mcs::rpc::ObjectRefInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ObjectRefInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ResourceAllocations_ResourceSlot* Arena::CreateMaybeMessage< ::mcs::rpc::ResourceAllocations_ResourceSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ResourceAllocations_ResourceSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ResourceAllocations* Arena::CreateMaybeMessage< ::mcs::rpc::ResourceAllocations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ResourceAllocations >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::CoreWorkerStats_UsedResourcesEntry_DoNotUse* Arena::CreateMaybeMessage< ::mcs::rpc::CoreWorkerStats_UsedResourcesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::CoreWorkerStats_UsedResourcesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::CoreWorkerStats_WebuiDisplayEntry_DoNotUse* Arena::CreateMaybeMessage< ::mcs::rpc::CoreWorkerStats_WebuiDisplayEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::CoreWorkerStats_WebuiDisplayEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::CoreWorkerStats* Arena::CreateMaybeMessage< ::mcs::rpc::CoreWorkerStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::CoreWorkerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::MetricPoint_TagsEntry_DoNotUse* Arena::CreateMaybeMessage< ::mcs::rpc::MetricPoint_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::MetricPoint_TagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::MetricPoint* Arena::CreateMaybeMessage< ::mcs::rpc::MetricPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::MetricPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::NamedActorInfo* Arena::CreateMaybeMessage< ::mcs::rpc::NamedActorInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::NamedActorInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
