// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: runtime_env_common.proto

#include "runtime_env_common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mcs {
namespace rpc {
constexpr RuntimeEnvUris::RuntimeEnvUris(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : py_modules_uris_()
  , working_dir_uri_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RuntimeEnvUrisDefaultTypeInternal {
  constexpr RuntimeEnvUrisDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RuntimeEnvUrisDefaultTypeInternal() {}
  union {
    RuntimeEnvUris _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RuntimeEnvUrisDefaultTypeInternal _RuntimeEnvUris_default_instance_;
constexpr RuntimeEnvConfig::RuntimeEnvConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : setup_timeout_seconds_(0)
  , eager_install_(false){}
struct RuntimeEnvConfigDefaultTypeInternal {
  constexpr RuntimeEnvConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RuntimeEnvConfigDefaultTypeInternal() {}
  union {
    RuntimeEnvConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RuntimeEnvConfigDefaultTypeInternal _RuntimeEnvConfig_default_instance_;
constexpr RuntimeEnvInfo::RuntimeEnvInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serialized_runtime_env_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uris_(nullptr)
  , runtime_env_config_(nullptr){}
struct RuntimeEnvInfoDefaultTypeInternal {
  constexpr RuntimeEnvInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RuntimeEnvInfoDefaultTypeInternal() {}
  union {
    RuntimeEnvInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RuntimeEnvInfoDefaultTypeInternal _RuntimeEnvInfo_default_instance_;
constexpr RuntimeEnvState::RuntimeEnvState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : runtime_env_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ref_cnt_(int64_t{0})
  , creation_time_ms_(int64_t{0})
  , success_(false){}
struct RuntimeEnvStateDefaultTypeInternal {
  constexpr RuntimeEnvStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RuntimeEnvStateDefaultTypeInternal() {}
  union {
    RuntimeEnvState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RuntimeEnvStateDefaultTypeInternal _RuntimeEnvState_default_instance_;
}  // namespace rpc
}  // namespace mcs
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_runtime_5fenv_5fcommon_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_runtime_5fenv_5fcommon_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_runtime_5fenv_5fcommon_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_runtime_5fenv_5fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::RuntimeEnvUris, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::RuntimeEnvUris, working_dir_uri_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::RuntimeEnvUris, py_modules_uris_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::RuntimeEnvConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::RuntimeEnvConfig, setup_timeout_seconds_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::RuntimeEnvConfig, eager_install_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::RuntimeEnvInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::RuntimeEnvInfo, serialized_runtime_env_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::RuntimeEnvInfo, uris_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::RuntimeEnvInfo, runtime_env_config_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::RuntimeEnvState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::RuntimeEnvState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::RuntimeEnvState, runtime_env_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::RuntimeEnvState, ref_cnt_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::RuntimeEnvState, success_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::RuntimeEnvState, error_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::RuntimeEnvState, creation_time_ms_),
  ~0u,
  ~0u,
  2,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mcs::rpc::RuntimeEnvUris)},
  { 7, -1, sizeof(::mcs::rpc::RuntimeEnvConfig)},
  { 14, -1, sizeof(::mcs::rpc::RuntimeEnvInfo)},
  { 22, 32, sizeof(::mcs::rpc::RuntimeEnvState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_RuntimeEnvUris_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_RuntimeEnvConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_RuntimeEnvInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_RuntimeEnvState_default_instance_),
};

const char descriptor_table_protodef_runtime_5fenv_5fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030runtime_env_common.proto\022\007mcs.rpc\"B\n\016R"
  "untimeEnvUris\022\027\n\017working_dir_uri\030\001 \001(\t\022\027"
  "\n\017py_modules_uris\030\002 \003(\t\"H\n\020RuntimeEnvCon"
  "fig\022\035\n\025setup_timeout_seconds\030\001 \001(\005\022\025\n\rea"
  "ger_install\030\002 \001(\010\"\216\001\n\016RuntimeEnvInfo\022\036\n\026"
  "serialized_runtime_env\030\001 \001(\t\022%\n\004uris\030\002 \001"
  "(\0132\027.mcs.rpc.RuntimeEnvUris\0225\n\022runtime_e"
  "nv_config\030\003 \001(\0132\031.mcs.rpc.RuntimeEnvConf"
  "ig\"\253\001\n\017RuntimeEnvState\022\023\n\013runtime_env\030\001 "
  "\001(\t\022\017\n\007ref_cnt\030\002 \001(\003\022\024\n\007success\030\003 \001(\010H\000\210"
  "\001\001\022\022\n\005error\030\004 \001(\tH\001\210\001\001\022\035\n\020creation_time_"
  "ms\030\005 \001(\003H\002\210\001\001B\n\n\010_successB\010\n\006_errorB\023\n\021_"
  "creation_time_msB\035\n\030io.ray.runtime.gener"
  "ated\370\001\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_runtime_5fenv_5fcommon_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_runtime_5fenv_5fcommon_2eproto = {
  false, false, 535, descriptor_table_protodef_runtime_5fenv_5fcommon_2eproto, "runtime_env_common.proto", 
  &descriptor_table_runtime_5fenv_5fcommon_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_runtime_5fenv_5fcommon_2eproto::offsets,
  file_level_metadata_runtime_5fenv_5fcommon_2eproto, file_level_enum_descriptors_runtime_5fenv_5fcommon_2eproto, file_level_service_descriptors_runtime_5fenv_5fcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_runtime_5fenv_5fcommon_2eproto_getter() {
  return &descriptor_table_runtime_5fenv_5fcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_runtime_5fenv_5fcommon_2eproto(&descriptor_table_runtime_5fenv_5fcommon_2eproto);
namespace mcs {
namespace rpc {

// ===================================================================

class RuntimeEnvUris::_Internal {
 public:
};

RuntimeEnvUris::RuntimeEnvUris(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  py_modules_uris_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.RuntimeEnvUris)
}
RuntimeEnvUris::RuntimeEnvUris(const RuntimeEnvUris& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      py_modules_uris_(from.py_modules_uris_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  working_dir_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_working_dir_uri().empty()) {
    working_dir_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_working_dir_uri(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.RuntimeEnvUris)
}

inline void RuntimeEnvUris::SharedCtor() {
working_dir_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RuntimeEnvUris::~RuntimeEnvUris() {
  // @@protoc_insertion_point(destructor:mcs.rpc.RuntimeEnvUris)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RuntimeEnvUris::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  working_dir_uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RuntimeEnvUris::ArenaDtor(void* object) {
  RuntimeEnvUris* _this = reinterpret_cast< RuntimeEnvUris* >(object);
  (void)_this;
}
void RuntimeEnvUris::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuntimeEnvUris::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RuntimeEnvUris::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.RuntimeEnvUris)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  py_modules_uris_.Clear();
  working_dir_uri_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuntimeEnvUris::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string working_dir_uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_working_dir_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.RuntimeEnvUris.working_dir_uri"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string py_modules_uris = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_py_modules_uris();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.RuntimeEnvUris.py_modules_uris"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuntimeEnvUris::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.RuntimeEnvUris)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string working_dir_uri = 1;
  if (!this->_internal_working_dir_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_working_dir_uri().data(), static_cast<int>(this->_internal_working_dir_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.RuntimeEnvUris.working_dir_uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_working_dir_uri(), target);
  }

  // repeated string py_modules_uris = 2;
  for (int i = 0, n = this->_internal_py_modules_uris_size(); i < n; i++) {
    const auto& s = this->_internal_py_modules_uris(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.RuntimeEnvUris.py_modules_uris");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.RuntimeEnvUris)
  return target;
}

size_t RuntimeEnvUris::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.RuntimeEnvUris)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string py_modules_uris = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(py_modules_uris_.size());
  for (int i = 0, n = py_modules_uris_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      py_modules_uris_.Get(i));
  }

  // string working_dir_uri = 1;
  if (!this->_internal_working_dir_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_working_dir_uri());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RuntimeEnvUris::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RuntimeEnvUris::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RuntimeEnvUris::GetClassData() const { return &_class_data_; }

void RuntimeEnvUris::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RuntimeEnvUris *>(to)->MergeFrom(
      static_cast<const RuntimeEnvUris &>(from));
}


void RuntimeEnvUris::MergeFrom(const RuntimeEnvUris& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.RuntimeEnvUris)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  py_modules_uris_.MergeFrom(from.py_modules_uris_);
  if (!from._internal_working_dir_uri().empty()) {
    _internal_set_working_dir_uri(from._internal_working_dir_uri());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RuntimeEnvUris::CopyFrom(const RuntimeEnvUris& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.RuntimeEnvUris)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeEnvUris::IsInitialized() const {
  return true;
}

void RuntimeEnvUris::InternalSwap(RuntimeEnvUris* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  py_modules_uris_.InternalSwap(&other->py_modules_uris_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &working_dir_uri_, GetArenaForAllocation(),
      &other->working_dir_uri_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RuntimeEnvUris::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_runtime_5fenv_5fcommon_2eproto_getter, &descriptor_table_runtime_5fenv_5fcommon_2eproto_once,
      file_level_metadata_runtime_5fenv_5fcommon_2eproto[0]);
}

// ===================================================================

class RuntimeEnvConfig::_Internal {
 public:
};

RuntimeEnvConfig::RuntimeEnvConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.RuntimeEnvConfig)
}
RuntimeEnvConfig::RuntimeEnvConfig(const RuntimeEnvConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&setup_timeout_seconds_, &from.setup_timeout_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&eager_install_) -
    reinterpret_cast<char*>(&setup_timeout_seconds_)) + sizeof(eager_install_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.RuntimeEnvConfig)
}

inline void RuntimeEnvConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&setup_timeout_seconds_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&eager_install_) -
    reinterpret_cast<char*>(&setup_timeout_seconds_)) + sizeof(eager_install_));
}

RuntimeEnvConfig::~RuntimeEnvConfig() {
  // @@protoc_insertion_point(destructor:mcs.rpc.RuntimeEnvConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RuntimeEnvConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RuntimeEnvConfig::ArenaDtor(void* object) {
  RuntimeEnvConfig* _this = reinterpret_cast< RuntimeEnvConfig* >(object);
  (void)_this;
}
void RuntimeEnvConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuntimeEnvConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RuntimeEnvConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.RuntimeEnvConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&setup_timeout_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eager_install_) -
      reinterpret_cast<char*>(&setup_timeout_seconds_)) + sizeof(eager_install_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuntimeEnvConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 setup_timeout_seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          setup_timeout_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool eager_install = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          eager_install_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuntimeEnvConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.RuntimeEnvConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 setup_timeout_seconds = 1;
  if (this->_internal_setup_timeout_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_setup_timeout_seconds(), target);
  }

  // bool eager_install = 2;
  if (this->_internal_eager_install() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_eager_install(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.RuntimeEnvConfig)
  return target;
}

size_t RuntimeEnvConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.RuntimeEnvConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 setup_timeout_seconds = 1;
  if (this->_internal_setup_timeout_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_setup_timeout_seconds());
  }

  // bool eager_install = 2;
  if (this->_internal_eager_install() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RuntimeEnvConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RuntimeEnvConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RuntimeEnvConfig::GetClassData() const { return &_class_data_; }

void RuntimeEnvConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RuntimeEnvConfig *>(to)->MergeFrom(
      static_cast<const RuntimeEnvConfig &>(from));
}


void RuntimeEnvConfig::MergeFrom(const RuntimeEnvConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.RuntimeEnvConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_setup_timeout_seconds() != 0) {
    _internal_set_setup_timeout_seconds(from._internal_setup_timeout_seconds());
  }
  if (from._internal_eager_install() != 0) {
    _internal_set_eager_install(from._internal_eager_install());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RuntimeEnvConfig::CopyFrom(const RuntimeEnvConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.RuntimeEnvConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeEnvConfig::IsInitialized() const {
  return true;
}

void RuntimeEnvConfig::InternalSwap(RuntimeEnvConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RuntimeEnvConfig, eager_install_)
      + sizeof(RuntimeEnvConfig::eager_install_)
      - PROTOBUF_FIELD_OFFSET(RuntimeEnvConfig, setup_timeout_seconds_)>(
          reinterpret_cast<char*>(&setup_timeout_seconds_),
          reinterpret_cast<char*>(&other->setup_timeout_seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RuntimeEnvConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_runtime_5fenv_5fcommon_2eproto_getter, &descriptor_table_runtime_5fenv_5fcommon_2eproto_once,
      file_level_metadata_runtime_5fenv_5fcommon_2eproto[1]);
}

// ===================================================================

class RuntimeEnvInfo::_Internal {
 public:
  static const ::mcs::rpc::RuntimeEnvUris& uris(const RuntimeEnvInfo* msg);
  static const ::mcs::rpc::RuntimeEnvConfig& runtime_env_config(const RuntimeEnvInfo* msg);
};

const ::mcs::rpc::RuntimeEnvUris&
RuntimeEnvInfo::_Internal::uris(const RuntimeEnvInfo* msg) {
  return *msg->uris_;
}
const ::mcs::rpc::RuntimeEnvConfig&
RuntimeEnvInfo::_Internal::runtime_env_config(const RuntimeEnvInfo* msg) {
  return *msg->runtime_env_config_;
}
RuntimeEnvInfo::RuntimeEnvInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.RuntimeEnvInfo)
}
RuntimeEnvInfo::RuntimeEnvInfo(const RuntimeEnvInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serialized_runtime_env_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serialized_runtime_env().empty()) {
    serialized_runtime_env_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serialized_runtime_env(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_uris()) {
    uris_ = new ::mcs::rpc::RuntimeEnvUris(*from.uris_);
  } else {
    uris_ = nullptr;
  }
  if (from._internal_has_runtime_env_config()) {
    runtime_env_config_ = new ::mcs::rpc::RuntimeEnvConfig(*from.runtime_env_config_);
  } else {
    runtime_env_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.RuntimeEnvInfo)
}

inline void RuntimeEnvInfo::SharedCtor() {
serialized_runtime_env_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uris_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&runtime_env_config_) -
    reinterpret_cast<char*>(&uris_)) + sizeof(runtime_env_config_));
}

RuntimeEnvInfo::~RuntimeEnvInfo() {
  // @@protoc_insertion_point(destructor:mcs.rpc.RuntimeEnvInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RuntimeEnvInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  serialized_runtime_env_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete uris_;
  if (this != internal_default_instance()) delete runtime_env_config_;
}

void RuntimeEnvInfo::ArenaDtor(void* object) {
  RuntimeEnvInfo* _this = reinterpret_cast< RuntimeEnvInfo* >(object);
  (void)_this;
}
void RuntimeEnvInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuntimeEnvInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RuntimeEnvInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.RuntimeEnvInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serialized_runtime_env_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && uris_ != nullptr) {
    delete uris_;
  }
  uris_ = nullptr;
  if (GetArenaForAllocation() == nullptr && runtime_env_config_ != nullptr) {
    delete runtime_env_config_;
  }
  runtime_env_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuntimeEnvInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string serialized_runtime_env = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serialized_runtime_env();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.RuntimeEnvInfo.serialized_runtime_env"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.RuntimeEnvUris uris = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uris(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.RuntimeEnvConfig runtime_env_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_runtime_env_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuntimeEnvInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.RuntimeEnvInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string serialized_runtime_env = 1;
  if (!this->_internal_serialized_runtime_env().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serialized_runtime_env().data(), static_cast<int>(this->_internal_serialized_runtime_env().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.RuntimeEnvInfo.serialized_runtime_env");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serialized_runtime_env(), target);
  }

  // .mcs.rpc.RuntimeEnvUris uris = 2;
  if (this->_internal_has_uris()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::uris(this), target, stream);
  }

  // .mcs.rpc.RuntimeEnvConfig runtime_env_config = 3;
  if (this->_internal_has_runtime_env_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::runtime_env_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.RuntimeEnvInfo)
  return target;
}

size_t RuntimeEnvInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.RuntimeEnvInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serialized_runtime_env = 1;
  if (!this->_internal_serialized_runtime_env().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serialized_runtime_env());
  }

  // .mcs.rpc.RuntimeEnvUris uris = 2;
  if (this->_internal_has_uris()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uris_);
  }

  // .mcs.rpc.RuntimeEnvConfig runtime_env_config = 3;
  if (this->_internal_has_runtime_env_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *runtime_env_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RuntimeEnvInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RuntimeEnvInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RuntimeEnvInfo::GetClassData() const { return &_class_data_; }

void RuntimeEnvInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RuntimeEnvInfo *>(to)->MergeFrom(
      static_cast<const RuntimeEnvInfo &>(from));
}


void RuntimeEnvInfo::MergeFrom(const RuntimeEnvInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.RuntimeEnvInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_serialized_runtime_env().empty()) {
    _internal_set_serialized_runtime_env(from._internal_serialized_runtime_env());
  }
  if (from._internal_has_uris()) {
    _internal_mutable_uris()->::mcs::rpc::RuntimeEnvUris::MergeFrom(from._internal_uris());
  }
  if (from._internal_has_runtime_env_config()) {
    _internal_mutable_runtime_env_config()->::mcs::rpc::RuntimeEnvConfig::MergeFrom(from._internal_runtime_env_config());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RuntimeEnvInfo::CopyFrom(const RuntimeEnvInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.RuntimeEnvInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeEnvInfo::IsInitialized() const {
  return true;
}

void RuntimeEnvInfo::InternalSwap(RuntimeEnvInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serialized_runtime_env_, GetArenaForAllocation(),
      &other->serialized_runtime_env_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RuntimeEnvInfo, runtime_env_config_)
      + sizeof(RuntimeEnvInfo::runtime_env_config_)
      - PROTOBUF_FIELD_OFFSET(RuntimeEnvInfo, uris_)>(
          reinterpret_cast<char*>(&uris_),
          reinterpret_cast<char*>(&other->uris_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RuntimeEnvInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_runtime_5fenv_5fcommon_2eproto_getter, &descriptor_table_runtime_5fenv_5fcommon_2eproto_once,
      file_level_metadata_runtime_5fenv_5fcommon_2eproto[2]);
}

// ===================================================================

class RuntimeEnvState::_Internal {
 public:
  using HasBits = decltype(std::declval<RuntimeEnvState>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_creation_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RuntimeEnvState::RuntimeEnvState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.RuntimeEnvState)
}
RuntimeEnvState::RuntimeEnvState(const RuntimeEnvState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  runtime_env_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_runtime_env().empty()) {
    runtime_env_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_runtime_env(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  ::memcpy(&ref_cnt_, &from.ref_cnt_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&ref_cnt_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.RuntimeEnvState)
}

inline void RuntimeEnvState::SharedCtor() {
runtime_env_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ref_cnt_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&ref_cnt_)) + sizeof(success_));
}

RuntimeEnvState::~RuntimeEnvState() {
  // @@protoc_insertion_point(destructor:mcs.rpc.RuntimeEnvState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RuntimeEnvState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  runtime_env_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RuntimeEnvState::ArenaDtor(void* object) {
  RuntimeEnvState* _this = reinterpret_cast< RuntimeEnvState* >(object);
  (void)_this;
}
void RuntimeEnvState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuntimeEnvState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RuntimeEnvState::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.RuntimeEnvState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  runtime_env_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_.ClearNonDefaultToEmpty();
  }
  ref_cnt_ = int64_t{0};
  if (cached_has_bits & 0x00000006u) {
    ::memset(&creation_time_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&success_) -
        reinterpret_cast<char*>(&creation_time_ms_)) + sizeof(success_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuntimeEnvState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string runtime_env = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_runtime_env();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.RuntimeEnvState.runtime_env"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ref_cnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ref_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.RuntimeEnvState.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 creation_time_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_creation_time_ms(&has_bits);
          creation_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuntimeEnvState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.RuntimeEnvState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string runtime_env = 1;
  if (!this->_internal_runtime_env().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runtime_env().data(), static_cast<int>(this->_internal_runtime_env().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.RuntimeEnvState.runtime_env");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_runtime_env(), target);
  }

  // int64 ref_cnt = 2;
  if (this->_internal_ref_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_ref_cnt(), target);
  }

  // optional bool success = 3;
  if (_internal_has_success()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  // optional string error = 4;
  if (_internal_has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.RuntimeEnvState.error");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error(), target);
  }

  // optional int64 creation_time_ms = 5;
  if (_internal_has_creation_time_ms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_creation_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.RuntimeEnvState)
  return target;
}

size_t RuntimeEnvState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.RuntimeEnvState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string runtime_env = 1;
  if (!this->_internal_runtime_env().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runtime_env());
  }

  // optional string error = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // int64 ref_cnt = 2;
  if (this->_internal_ref_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ref_cnt());
  }

  if (cached_has_bits & 0x00000006u) {
    // optional int64 creation_time_ms = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_creation_time_ms());
    }

    // optional bool success = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RuntimeEnvState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RuntimeEnvState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RuntimeEnvState::GetClassData() const { return &_class_data_; }

void RuntimeEnvState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RuntimeEnvState *>(to)->MergeFrom(
      static_cast<const RuntimeEnvState &>(from));
}


void RuntimeEnvState::MergeFrom(const RuntimeEnvState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.RuntimeEnvState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_runtime_env().empty()) {
    _internal_set_runtime_env(from._internal_runtime_env());
  }
  if (from._internal_has_error()) {
    _internal_set_error(from._internal_error());
  }
  if (from._internal_ref_cnt() != 0) {
    _internal_set_ref_cnt(from._internal_ref_cnt());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      creation_time_ms_ = from.creation_time_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RuntimeEnvState::CopyFrom(const RuntimeEnvState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.RuntimeEnvState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeEnvState::IsInitialized() const {
  return true;
}

void RuntimeEnvState::InternalSwap(RuntimeEnvState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &runtime_env_, GetArenaForAllocation(),
      &other->runtime_env_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RuntimeEnvState, success_)
      + sizeof(RuntimeEnvState::success_)
      - PROTOBUF_FIELD_OFFSET(RuntimeEnvState, ref_cnt_)>(
          reinterpret_cast<char*>(&ref_cnt_),
          reinterpret_cast<char*>(&other->ref_cnt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RuntimeEnvState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_runtime_5fenv_5fcommon_2eproto_getter, &descriptor_table_runtime_5fenv_5fcommon_2eproto_once,
      file_level_metadata_runtime_5fenv_5fcommon_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc
}  // namespace mcs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mcs::rpc::RuntimeEnvUris* Arena::CreateMaybeMessage< ::mcs::rpc::RuntimeEnvUris >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::RuntimeEnvUris >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::RuntimeEnvConfig* Arena::CreateMaybeMessage< ::mcs::rpc::RuntimeEnvConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::RuntimeEnvConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::RuntimeEnvInfo* Arena::CreateMaybeMessage< ::mcs::rpc::RuntimeEnvInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::RuntimeEnvInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::RuntimeEnvState* Arena::CreateMaybeMessage< ::mcs::rpc::RuntimeEnvState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::RuntimeEnvState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
