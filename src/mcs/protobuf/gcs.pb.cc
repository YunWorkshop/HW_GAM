// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gcs.proto

#include "gcs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mcs {
namespace rpc {
constexpr GcsEntry::GcsEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , change_mode_(0)
{}
struct GcsEntryDefaultTypeInternal {
  constexpr GcsEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GcsEntryDefaultTypeInternal() {}
  union {
    GcsEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GcsEntryDefaultTypeInternal _GcsEntry_default_instance_;
constexpr ObjectTableData::ObjectTableData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : manager_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ObjectTableDataDefaultTypeInternal {
  constexpr ObjectTableDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectTableDataDefaultTypeInternal() {}
  union {
    ObjectTableData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectTableDataDefaultTypeInternal _ObjectTableData_default_instance_;
constexpr ActorTableData_RequiredResourcesEntry_DoNotUse::ActorTableData_RequiredResourcesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ActorTableData_RequiredResourcesEntry_DoNotUseDefaultTypeInternal {
  constexpr ActorTableData_RequiredResourcesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActorTableData_RequiredResourcesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ActorTableData_RequiredResourcesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActorTableData_RequiredResourcesEntry_DoNotUseDefaultTypeInternal _ActorTableData_RequiredResourcesEntry_DoNotUse_default_instance_;
constexpr ActorTableData::ActorTableData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resource_mapping_()
  , required_resources_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , actor_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , actor_creation_dummy_object_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , job_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mcs_namespace_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serialized_runtime_env_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , class_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(nullptr)
  , owner_address_(nullptr)
  , function_descriptor_(nullptr)
  , death_cause_(nullptr)
  , max_restarts_(int64_t{0})
  , num_restarts_(uint64_t{0u})
  , state_(0)

  , is_detached_(false)
  , timestamp_(0)
  , start_time_(uint64_t{0u})
  , end_time_(uint64_t{0u})
  , pid_(0u){}
struct ActorTableDataDefaultTypeInternal {
  constexpr ActorTableDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActorTableDataDefaultTypeInternal() {}
  union {
    ActorTableData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActorTableDataDefaultTypeInternal _ActorTableData_default_instance_;
constexpr ErrorTableData::ErrorTableData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : job_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(0){}
struct ErrorTableDataDefaultTypeInternal {
  constexpr ErrorTableDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ErrorTableDataDefaultTypeInternal() {}
  union {
    ErrorTableData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ErrorTableDataDefaultTypeInternal _ErrorTableData_default_instance_;
constexpr ScheduleData_SchedulePlanEntry_DoNotUse::ScheduleData_SchedulePlanEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ScheduleData_SchedulePlanEntry_DoNotUseDefaultTypeInternal {
  constexpr ScheduleData_SchedulePlanEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScheduleData_SchedulePlanEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ScheduleData_SchedulePlanEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScheduleData_SchedulePlanEntry_DoNotUseDefaultTypeInternal _ScheduleData_SchedulePlanEntry_DoNotUse_default_instance_;
constexpr ScheduleData::ScheduleData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : schedule_plan_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct ScheduleDataDefaultTypeInternal {
  constexpr ScheduleDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScheduleDataDefaultTypeInternal() {}
  union {
    ScheduleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScheduleDataDefaultTypeInternal _ScheduleData_default_instance_;
constexpr ProfileEventEntry::ProfileEventEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extra_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_time_(int64_t{0})
  , end_time_(int64_t{0}){}
struct ProfileEventEntryDefaultTypeInternal {
  constexpr ProfileEventEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProfileEventEntryDefaultTypeInternal() {}
  union {
    ProfileEventEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProfileEventEntryDefaultTypeInternal _ProfileEventEntry_default_instance_;
constexpr ProfileEvents::ProfileEvents(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_()
  , component_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , component_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_ip_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ProfileEventsDefaultTypeInternal {
  constexpr ProfileEventsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProfileEventsDefaultTypeInternal() {}
  union {
    ProfileEvents _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProfileEventsDefaultTypeInternal _ProfileEvents_default_instance_;
constexpr TaskStateUpdate::TaskStateUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pending_args_avail_ts_(int64_t{0})
  , pending_node_assignment_ts_(int64_t{0})
  , submitted_to_worker_ts_(int64_t{0})
  , running_ts_(int64_t{0})
  , finished_ts_(int64_t{0})
  , failed_ts_(int64_t{0}){}
struct TaskStateUpdateDefaultTypeInternal {
  constexpr TaskStateUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskStateUpdateDefaultTypeInternal() {}
  union {
    TaskStateUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskStateUpdateDefaultTypeInternal _TaskStateUpdate_default_instance_;
constexpr TaskEvents::TaskEvents(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , job_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , task_info_(nullptr)
  , state_updates_(nullptr)
  , profile_events_(nullptr)
  , attempt_number_(0){}
struct TaskEventsDefaultTypeInternal {
  constexpr TaskEventsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskEventsDefaultTypeInternal() {}
  union {
    TaskEvents _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskEventsDefaultTypeInternal _TaskEvents_default_instance_;
constexpr TaskEventData::TaskEventData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_by_task_()
  , num_profile_task_events_dropped_(0)
  , num_status_task_events_dropped_(0){}
struct TaskEventDataDefaultTypeInternal {
  constexpr TaskEventDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskEventDataDefaultTypeInternal() {}
  union {
    TaskEventData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskEventDataDefaultTypeInternal _TaskEventData_default_instance_;
constexpr ResourceTableData::ResourceTableData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resource_capacity_(0){}
struct ResourceTableDataDefaultTypeInternal {
  constexpr ResourceTableDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourceTableDataDefaultTypeInternal() {}
  union {
    ResourceTableData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourceTableDataDefaultTypeInternal _ResourceTableData_default_instance_;
constexpr AvailableResources_ResourcesAvailableEntry_DoNotUse::AvailableResources_ResourcesAvailableEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AvailableResources_ResourcesAvailableEntry_DoNotUseDefaultTypeInternal {
  constexpr AvailableResources_ResourcesAvailableEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AvailableResources_ResourcesAvailableEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AvailableResources_ResourcesAvailableEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AvailableResources_ResourcesAvailableEntry_DoNotUseDefaultTypeInternal _AvailableResources_ResourcesAvailableEntry_DoNotUse_default_instance_;
constexpr AvailableResources::AvailableResources(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resources_available_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AvailableResourcesDefaultTypeInternal {
  constexpr AvailableResourcesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AvailableResourcesDefaultTypeInternal() {}
  union {
    AvailableResources _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AvailableResourcesDefaultTypeInternal _AvailableResources_default_instance_;
constexpr GcsNodeInfo_ResourcesTotalEntry_DoNotUse::GcsNodeInfo_ResourcesTotalEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GcsNodeInfo_ResourcesTotalEntry_DoNotUseDefaultTypeInternal {
  constexpr GcsNodeInfo_ResourcesTotalEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GcsNodeInfo_ResourcesTotalEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GcsNodeInfo_ResourcesTotalEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GcsNodeInfo_ResourcesTotalEntry_DoNotUseDefaultTypeInternal _GcsNodeInfo_ResourcesTotalEntry_DoNotUse_default_instance_;
constexpr GcsNodeInfo::GcsNodeInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resources_total_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_manager_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mcslet_socket_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , object_store_socket_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_manager_hostname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_manager_port_(0)
  , object_manager_port_(0)
  , state_(0)

  , metrics_export_port_(0)
  , timestamp_(int64_t{0}){}
struct GcsNodeInfoDefaultTypeInternal {
  constexpr GcsNodeInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GcsNodeInfoDefaultTypeInternal() {}
  union {
    GcsNodeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GcsNodeInfoDefaultTypeInternal _GcsNodeInfo_default_instance_;
constexpr HeartbeatTableData::HeartbeatTableData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct HeartbeatTableDataDefaultTypeInternal {
  constexpr HeartbeatTableDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeartbeatTableDataDefaultTypeInternal() {}
  union {
    HeartbeatTableData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeartbeatTableDataDefaultTypeInternal _HeartbeatTableData_default_instance_;
constexpr JobConfig_MetadataEntry_DoNotUse::JobConfig_MetadataEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct JobConfig_MetadataEntry_DoNotUseDefaultTypeInternal {
  constexpr JobConfig_MetadataEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JobConfig_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    JobConfig_MetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JobConfig_MetadataEntry_DoNotUseDefaultTypeInternal _JobConfig_MetadataEntry_DoNotUse_default_instance_;
constexpr JobConfig::JobConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : jvm_options_()
  , code_search_path_()
  , metadata_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , mcs_namespace_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , runtime_env_info_(nullptr)
  , default_actor_lifetime_(0)
{}
struct JobConfigDefaultTypeInternal {
  constexpr JobConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JobConfigDefaultTypeInternal() {}
  union {
    JobConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JobConfigDefaultTypeInternal _JobConfig_default_instance_;
constexpr JobTableData::JobTableData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : job_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , driver_ip_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entrypoint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , config_(nullptr)
  , timestamp_(int64_t{0})
  , driver_pid_(int64_t{0})
  , start_time_(uint64_t{0u})
  , end_time_(uint64_t{0u})
  , is_dead_(false){}
struct JobTableDataDefaultTypeInternal {
  constexpr JobTableDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JobTableDataDefaultTypeInternal() {}
  union {
    JobTableData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JobTableDataDefaultTypeInternal _JobTableData_default_instance_;
constexpr WorkerTableData_WorkerInfoEntry_DoNotUse::WorkerTableData_WorkerInfoEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct WorkerTableData_WorkerInfoEntry_DoNotUseDefaultTypeInternal {
  constexpr WorkerTableData_WorkerInfoEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkerTableData_WorkerInfoEntry_DoNotUseDefaultTypeInternal() {}
  union {
    WorkerTableData_WorkerInfoEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkerTableData_WorkerInfoEntry_DoNotUseDefaultTypeInternal _WorkerTableData_WorkerInfoEntry_DoNotUse_default_instance_;
constexpr WorkerTableData::WorkerTableData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : worker_info_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , exit_detail_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , worker_address_(nullptr)
  , creation_task_exception_(nullptr)
  , timestamp_(int64_t{0})
  , is_alive_(false)
  , worker_type_(0)

  , exit_type_(0)

  , pid_(0u){}
struct WorkerTableDataDefaultTypeInternal {
  constexpr WorkerTableDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkerTableDataDefaultTypeInternal() {}
  union {
    WorkerTableData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkerTableDataDefaultTypeInternal _WorkerTableData_default_instance_;
constexpr WorkerDeltaData::WorkerDeltaData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mcslet_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , worker_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct WorkerDeltaDataDefaultTypeInternal {
  constexpr WorkerDeltaDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkerDeltaDataDefaultTypeInternal() {}
  union {
    WorkerDeltaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkerDeltaDataDefaultTypeInternal _WorkerDeltaData_default_instance_;
constexpr ResourceMap_ItemsEntry_DoNotUse::ResourceMap_ItemsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ResourceMap_ItemsEntry_DoNotUseDefaultTypeInternal {
  constexpr ResourceMap_ItemsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourceMap_ItemsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ResourceMap_ItemsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourceMap_ItemsEntry_DoNotUseDefaultTypeInternal _ResourceMap_ItemsEntry_DoNotUse_default_instance_;
constexpr ResourceMap::ResourceMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct ResourceMapDefaultTypeInternal {
  constexpr ResourceMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourceMapDefaultTypeInternal() {}
  union {
    ResourceMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourceMapDefaultTypeInternal _ResourceMap_default_instance_;
constexpr StoredConfig::StoredConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct StoredConfigDefaultTypeInternal {
  constexpr StoredConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StoredConfigDefaultTypeInternal() {}
  union {
    StoredConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StoredConfigDefaultTypeInternal _StoredConfig_default_instance_;
constexpr NodeResourceChange_UpdatedResourcesEntry_DoNotUse::NodeResourceChange_UpdatedResourcesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NodeResourceChange_UpdatedResourcesEntry_DoNotUseDefaultTypeInternal {
  constexpr NodeResourceChange_UpdatedResourcesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeResourceChange_UpdatedResourcesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    NodeResourceChange_UpdatedResourcesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeResourceChange_UpdatedResourcesEntry_DoNotUseDefaultTypeInternal _NodeResourceChange_UpdatedResourcesEntry_DoNotUse_default_instance_;
constexpr NodeResourceChange::NodeResourceChange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : updated_resources_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , deleted_resources_()
  , node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct NodeResourceChangeDefaultTypeInternal {
  constexpr NodeResourceChangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeResourceChangeDefaultTypeInternal() {}
  union {
    NodeResourceChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeResourceChangeDefaultTypeInternal _NodeResourceChange_default_instance_;
constexpr PubSubMessage::PubSubMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PubSubMessageDefaultTypeInternal {
  constexpr PubSubMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PubSubMessageDefaultTypeInternal() {}
  union {
    PubSubMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PubSubMessageDefaultTypeInternal _PubSubMessage_default_instance_;
constexpr ResourceUpdate::ResourceUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ResourceUpdateDefaultTypeInternal {
  constexpr ResourceUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourceUpdateDefaultTypeInternal() {}
  union {
    ResourceUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourceUpdateDefaultTypeInternal _ResourceUpdate_default_instance_;
constexpr ResourceUsageBroadcastData::ResourceUsageBroadcastData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : batch_()
  , seq_no_(int64_t{0}){}
struct ResourceUsageBroadcastDataDefaultTypeInternal {
  constexpr ResourceUsageBroadcastDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourceUsageBroadcastDataDefaultTypeInternal() {}
  union {
    ResourceUsageBroadcastData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourceUsageBroadcastDataDefaultTypeInternal _ResourceUsageBroadcastData_default_instance_;
constexpr ResourceDemand_ShapeEntry_DoNotUse::ResourceDemand_ShapeEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ResourceDemand_ShapeEntry_DoNotUseDefaultTypeInternal {
  constexpr ResourceDemand_ShapeEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourceDemand_ShapeEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ResourceDemand_ShapeEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourceDemand_ShapeEntry_DoNotUseDefaultTypeInternal _ResourceDemand_ShapeEntry_DoNotUse_default_instance_;
constexpr ResourceDemand::ResourceDemand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shape_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , num_ready_requests_queued_(uint64_t{0u})
  , num_infeasible_requests_queued_(uint64_t{0u})
  , backlog_size_(int64_t{0}){}
struct ResourceDemandDefaultTypeInternal {
  constexpr ResourceDemandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourceDemandDefaultTypeInternal() {}
  union {
    ResourceDemand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourceDemandDefaultTypeInternal _ResourceDemand_default_instance_;
constexpr ResourceLoad::ResourceLoad(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resource_demands_(){}
struct ResourceLoadDefaultTypeInternal {
  constexpr ResourceLoadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourceLoadDefaultTypeInternal() {}
  union {
    ResourceLoad _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourceLoadDefaultTypeInternal _ResourceLoad_default_instance_;
constexpr ResourcesData_ResourcesAvailableEntry_DoNotUse::ResourcesData_ResourcesAvailableEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ResourcesData_ResourcesAvailableEntry_DoNotUseDefaultTypeInternal {
  constexpr ResourcesData_ResourcesAvailableEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourcesData_ResourcesAvailableEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ResourcesData_ResourcesAvailableEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourcesData_ResourcesAvailableEntry_DoNotUseDefaultTypeInternal _ResourcesData_ResourcesAvailableEntry_DoNotUse_default_instance_;
constexpr ResourcesData_ResourcesTotalEntry_DoNotUse::ResourcesData_ResourcesTotalEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ResourcesData_ResourcesTotalEntry_DoNotUseDefaultTypeInternal {
  constexpr ResourcesData_ResourcesTotalEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourcesData_ResourcesTotalEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ResourcesData_ResourcesTotalEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourcesData_ResourcesTotalEntry_DoNotUseDefaultTypeInternal _ResourcesData_ResourcesTotalEntry_DoNotUse_default_instance_;
constexpr ResourcesData_ResourceLoadEntry_DoNotUse::ResourcesData_ResourceLoadEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ResourcesData_ResourceLoadEntry_DoNotUseDefaultTypeInternal {
  constexpr ResourcesData_ResourceLoadEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourcesData_ResourceLoadEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ResourcesData_ResourceLoadEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourcesData_ResourceLoadEntry_DoNotUseDefaultTypeInternal _ResourcesData_ResourceLoadEntry_DoNotUse_default_instance_;
constexpr ResourcesData_ResourcesNormalTaskEntry_DoNotUse::ResourcesData_ResourcesNormalTaskEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ResourcesData_ResourcesNormalTaskEntry_DoNotUseDefaultTypeInternal {
  constexpr ResourcesData_ResourcesNormalTaskEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourcesData_ResourcesNormalTaskEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ResourcesData_ResourcesNormalTaskEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourcesData_ResourcesNormalTaskEntry_DoNotUseDefaultTypeInternal _ResourcesData_ResourcesNormalTaskEntry_DoNotUse_default_instance_;
constexpr ResourcesData::ResourcesData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resources_available_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , resources_total_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , resource_load_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , resources_normal_task_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_manager_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , resource_load_by_shape_(nullptr)
  , resources_available_changed_(false)
  , resource_load_changed_(false)
  , should_global_gc_(false)
  , object_pulls_queued_(false)
  , resources_normal_task_changed_(false)
  , cluster_full_of_actors_detected_(false)
  , resources_normal_task_timestamp_(int64_t{0}){}
struct ResourcesDataDefaultTypeInternal {
  constexpr ResourcesDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourcesDataDefaultTypeInternal() {}
  union {
    ResourcesData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourcesDataDefaultTypeInternal _ResourcesData_default_instance_;
constexpr ResourceUsageBatchData::ResourceUsageBatchData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : batch_()
  , resource_load_by_shape_(nullptr)
  , placement_group_load_(nullptr){}
struct ResourceUsageBatchDataDefaultTypeInternal {
  constexpr ResourceUsageBatchDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourceUsageBatchDataDefaultTypeInternal() {}
  union {
    ResourceUsageBatchData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourceUsageBatchDataDefaultTypeInternal _ResourceUsageBatchData_default_instance_;
constexpr PlacementGroupLoad::PlacementGroupLoad(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : placement_group_data_(){}
struct PlacementGroupLoadDefaultTypeInternal {
  constexpr PlacementGroupLoadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlacementGroupLoadDefaultTypeInternal() {}
  union {
    PlacementGroupLoad _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlacementGroupLoadDefaultTypeInternal _PlacementGroupLoad_default_instance_;
constexpr PlacementGroupStats::PlacementGroupStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : creation_request_received_ns_(int64_t{0})
  , scheduling_started_time_ns_(int64_t{0})
  , scheduling_latency_us_(int64_t{0})
  , end_to_end_creation_latency_us_(int64_t{0})
  , highest_retry_delay_ms_(0)
  , scheduling_attempt_(0u)
  , scheduling_state_(0)
{}
struct PlacementGroupStatsDefaultTypeInternal {
  constexpr PlacementGroupStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlacementGroupStatsDefaultTypeInternal() {}
  union {
    PlacementGroupStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlacementGroupStatsDefaultTypeInternal _PlacementGroupStats_default_instance_;
constexpr PlacementGroupTableData::PlacementGroupTableData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bundles_()
  , placement_group_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , creator_job_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , creator_actor_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mcs_namespace_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stats_(nullptr)
  , strategy_(0)

  , state_(0)

  , max_cpu_fraction_per_node_(0)
  , creator_job_dead_(false)
  , creator_actor_dead_(false)
  , is_detached_(false){}
struct PlacementGroupTableDataDefaultTypeInternal {
  constexpr PlacementGroupTableDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlacementGroupTableDataDefaultTypeInternal() {}
  union {
    PlacementGroupTableData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlacementGroupTableDataDefaultTypeInternal _PlacementGroupTableData_default_instance_;
}  // namespace rpc
}  // namespace mcs
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gcs_2eproto[44];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_gcs_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gcs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gcs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::GcsEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::GcsEntry, change_mode_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::GcsEntry, id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::GcsEntry, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ObjectTableData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ObjectTableData, manager_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData_RequiredResourcesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData_RequiredResourcesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData_RequiredResourcesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData_RequiredResourcesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData, actor_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData, parent_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData, actor_creation_dummy_object_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData, job_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData, state_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData, max_restarts_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData, num_restarts_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData, address_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData, owner_address_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData, is_detached_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData, name_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData, resource_mapping_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData, pid_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData, function_descriptor_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData, mcs_namespace_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData, start_time_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData, end_time_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData, serialized_runtime_env_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData, class_name_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData, death_cause_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData, required_resources_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ActorTableData, node_id_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ErrorTableData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ErrorTableData, job_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ErrorTableData, type_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ErrorTableData, error_message_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ErrorTableData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ScheduleData_SchedulePlanEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ScheduleData_SchedulePlanEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ScheduleData_SchedulePlanEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ScheduleData_SchedulePlanEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ScheduleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ScheduleData, schedule_plan_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ProfileEventEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ProfileEventEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ProfileEventEntry, start_time_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ProfileEventEntry, end_time_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ProfileEventEntry, extra_data_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ProfileEventEntry, event_name_),
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ProfileEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ProfileEvents, component_type_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ProfileEvents, component_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ProfileEvents, node_ip_address_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ProfileEvents, events_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskStateUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskStateUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskStateUpdate, node_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskStateUpdate, pending_args_avail_ts_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskStateUpdate, pending_node_assignment_ts_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskStateUpdate, submitted_to_worker_ts_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskStateUpdate, running_ts_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskStateUpdate, finished_ts_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskStateUpdate, failed_ts_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskEvents, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskEvents, task_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskEvents, attempt_number_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskEvents, task_info_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskEvents, state_updates_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskEvents, profile_events_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskEvents, job_id_),
  ~0u,
  ~0u,
  0,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskEventData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskEventData, events_by_task_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskEventData, num_profile_task_events_dropped_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::TaskEventData, num_status_task_events_dropped_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceTableData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceTableData, resource_capacity_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::AvailableResources_ResourcesAvailableEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::AvailableResources_ResourcesAvailableEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::AvailableResources_ResourcesAvailableEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::AvailableResources_ResourcesAvailableEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::AvailableResources, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::AvailableResources, node_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::AvailableResources, resources_available_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::GcsNodeInfo_ResourcesTotalEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::GcsNodeInfo_ResourcesTotalEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::GcsNodeInfo_ResourcesTotalEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::GcsNodeInfo_ResourcesTotalEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::GcsNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::GcsNodeInfo, node_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::GcsNodeInfo, node_manager_address_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::GcsNodeInfo, mcslet_socket_name_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::GcsNodeInfo, object_store_socket_name_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::GcsNodeInfo, node_manager_port_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::GcsNodeInfo, object_manager_port_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::GcsNodeInfo, state_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::GcsNodeInfo, node_manager_hostname_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::GcsNodeInfo, metrics_export_port_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::GcsNodeInfo, timestamp_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::GcsNodeInfo, resources_total_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::GcsNodeInfo, node_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::HeartbeatTableData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::HeartbeatTableData, node_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::JobConfig_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::JobConfig_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::JobConfig_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::JobConfig_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::JobConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::JobConfig, jvm_options_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::JobConfig, code_search_path_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::JobConfig, runtime_env_info_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::JobConfig, mcs_namespace_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::JobConfig, metadata_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::JobConfig, default_actor_lifetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::JobTableData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::JobTableData, job_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::JobTableData, is_dead_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::JobTableData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::JobTableData, driver_ip_address_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::JobTableData, driver_pid_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::JobTableData, config_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::JobTableData, start_time_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::JobTableData, end_time_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::JobTableData, entrypoint_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::WorkerTableData_WorkerInfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::WorkerTableData_WorkerInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::WorkerTableData_WorkerInfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::WorkerTableData_WorkerInfoEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::WorkerTableData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::WorkerTableData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::WorkerTableData, is_alive_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::WorkerTableData, worker_address_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::WorkerTableData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::WorkerTableData, worker_type_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::WorkerTableData, worker_info_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::WorkerTableData, creation_task_exception_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::WorkerTableData, exit_type_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::WorkerTableData, exit_detail_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::WorkerTableData, pid_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::WorkerDeltaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::WorkerDeltaData, mcslet_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::WorkerDeltaData, worker_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceMap_ItemsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceMap_ItemsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceMap_ItemsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceMap_ItemsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceMap, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::StoredConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::StoredConfig, config_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::NodeResourceChange_UpdatedResourcesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::NodeResourceChange_UpdatedResourcesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::NodeResourceChange_UpdatedResourcesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::NodeResourceChange_UpdatedResourcesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::NodeResourceChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::NodeResourceChange, node_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::NodeResourceChange, updated_resources_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::NodeResourceChange, deleted_resources_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PubSubMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PubSubMessage, id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PubSubMessage, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceUpdate, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceUpdate, resource_change_or_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceUsageBroadcastData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceUsageBroadcastData, seq_no_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceUsageBroadcastData, batch_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceDemand_ShapeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceDemand_ShapeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceDemand_ShapeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceDemand_ShapeEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceDemand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceDemand, shape_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceDemand, num_ready_requests_queued_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceDemand, num_infeasible_requests_queued_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceDemand, backlog_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceLoad, resource_demands_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData_ResourcesAvailableEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData_ResourcesAvailableEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData_ResourcesAvailableEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData_ResourcesAvailableEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData_ResourcesTotalEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData_ResourcesTotalEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData_ResourcesTotalEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData_ResourcesTotalEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData_ResourceLoadEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData_ResourceLoadEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData_ResourceLoadEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData_ResourceLoadEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData_ResourcesNormalTaskEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData_ResourcesNormalTaskEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData_ResourcesNormalTaskEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData_ResourcesNormalTaskEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData, node_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData, resources_available_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData, resources_available_changed_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData, resources_total_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData, resource_load_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData, resource_load_changed_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData, resource_load_by_shape_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData, should_global_gc_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData, node_manager_address_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData, object_pulls_queued_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData, resources_normal_task_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData, resources_normal_task_changed_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData, resources_normal_task_timestamp_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourcesData, cluster_full_of_actors_detected_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceUsageBatchData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceUsageBatchData, batch_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceUsageBatchData, resource_load_by_shape_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::ResourceUsageBatchData, placement_group_load_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupLoad, placement_group_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupStats, creation_request_received_ns_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupStats, scheduling_started_time_ns_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupStats, scheduling_latency_us_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupStats, end_to_end_creation_latency_us_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupStats, scheduling_attempt_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupStats, highest_retry_delay_ms_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupStats, scheduling_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupTableData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupTableData, placement_group_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupTableData, name_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupTableData, bundles_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupTableData, strategy_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupTableData, state_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupTableData, creator_job_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupTableData, creator_actor_id_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupTableData, creator_job_dead_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupTableData, creator_actor_dead_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupTableData, is_detached_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupTableData, mcs_namespace_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupTableData, stats_),
  PROTOBUF_FIELD_OFFSET(::mcs::rpc::PlacementGroupTableData, max_cpu_fraction_per_node_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mcs::rpc::GcsEntry)},
  { 8, -1, sizeof(::mcs::rpc::ObjectTableData)},
  { 14, 21, sizeof(::mcs::rpc::ActorTableData_RequiredResourcesEntry_DoNotUse)},
  { 23, 51, sizeof(::mcs::rpc::ActorTableData)},
  { 74, -1, sizeof(::mcs::rpc::ErrorTableData)},
  { 83, 90, sizeof(::mcs::rpc::ScheduleData_SchedulePlanEntry_DoNotUse)},
  { 92, -1, sizeof(::mcs::rpc::ScheduleData)},
  { 98, 107, sizeof(::mcs::rpc::ProfileEventEntry)},
  { 111, -1, sizeof(::mcs::rpc::ProfileEvents)},
  { 120, 132, sizeof(::mcs::rpc::TaskStateUpdate)},
  { 139, 150, sizeof(::mcs::rpc::TaskEvents)},
  { 156, -1, sizeof(::mcs::rpc::TaskEventData)},
  { 164, -1, sizeof(::mcs::rpc::ResourceTableData)},
  { 170, 177, sizeof(::mcs::rpc::AvailableResources_ResourcesAvailableEntry_DoNotUse)},
  { 179, -1, sizeof(::mcs::rpc::AvailableResources)},
  { 186, 193, sizeof(::mcs::rpc::GcsNodeInfo_ResourcesTotalEntry_DoNotUse)},
  { 195, -1, sizeof(::mcs::rpc::GcsNodeInfo)},
  { 212, -1, sizeof(::mcs::rpc::HeartbeatTableData)},
  { 218, 225, sizeof(::mcs::rpc::JobConfig_MetadataEntry_DoNotUse)},
  { 227, -1, sizeof(::mcs::rpc::JobConfig)},
  { 238, -1, sizeof(::mcs::rpc::JobTableData)},
  { 252, 259, sizeof(::mcs::rpc::WorkerTableData_WorkerInfoEntry_DoNotUse)},
  { 261, 275, sizeof(::mcs::rpc::WorkerTableData)},
  { 284, -1, sizeof(::mcs::rpc::WorkerDeltaData)},
  { 291, 298, sizeof(::mcs::rpc::ResourceMap_ItemsEntry_DoNotUse)},
  { 300, -1, sizeof(::mcs::rpc::ResourceMap)},
  { 306, -1, sizeof(::mcs::rpc::StoredConfig)},
  { 312, 319, sizeof(::mcs::rpc::NodeResourceChange_UpdatedResourcesEntry_DoNotUse)},
  { 321, -1, sizeof(::mcs::rpc::NodeResourceChange)},
  { 329, -1, sizeof(::mcs::rpc::PubSubMessage)},
  { 336, -1, sizeof(::mcs::rpc::ResourceUpdate)},
  { 344, -1, sizeof(::mcs::rpc::ResourceUsageBroadcastData)},
  { 351, 358, sizeof(::mcs::rpc::ResourceDemand_ShapeEntry_DoNotUse)},
  { 360, -1, sizeof(::mcs::rpc::ResourceDemand)},
  { 369, -1, sizeof(::mcs::rpc::ResourceLoad)},
  { 375, 382, sizeof(::mcs::rpc::ResourcesData_ResourcesAvailableEntry_DoNotUse)},
  { 384, 391, sizeof(::mcs::rpc::ResourcesData_ResourcesTotalEntry_DoNotUse)},
  { 393, 400, sizeof(::mcs::rpc::ResourcesData_ResourceLoadEntry_DoNotUse)},
  { 402, 409, sizeof(::mcs::rpc::ResourcesData_ResourcesNormalTaskEntry_DoNotUse)},
  { 411, -1, sizeof(::mcs::rpc::ResourcesData)},
  { 430, -1, sizeof(::mcs::rpc::ResourceUsageBatchData)},
  { 438, -1, sizeof(::mcs::rpc::PlacementGroupLoad)},
  { 444, -1, sizeof(::mcs::rpc::PlacementGroupStats)},
  { 456, -1, sizeof(::mcs::rpc::PlacementGroupTableData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_GcsEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ObjectTableData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ActorTableData_RequiredResourcesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ActorTableData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ErrorTableData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ScheduleData_SchedulePlanEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ScheduleData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ProfileEventEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ProfileEvents_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_TaskStateUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_TaskEvents_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_TaskEventData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ResourceTableData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_AvailableResources_ResourcesAvailableEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_AvailableResources_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_GcsNodeInfo_ResourcesTotalEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_GcsNodeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_HeartbeatTableData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_JobConfig_MetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_JobConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_JobTableData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_WorkerTableData_WorkerInfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_WorkerTableData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_WorkerDeltaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ResourceMap_ItemsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ResourceMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_StoredConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_NodeResourceChange_UpdatedResourcesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_NodeResourceChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_PubSubMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ResourceUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ResourceUsageBroadcastData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ResourceDemand_ShapeEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ResourceDemand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ResourceLoad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ResourcesData_ResourcesAvailableEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ResourcesData_ResourcesTotalEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ResourcesData_ResourceLoadEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ResourcesData_ResourcesNormalTaskEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ResourcesData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_ResourceUsageBatchData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_PlacementGroupLoad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_PlacementGroupStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mcs::rpc::_PlacementGroupTableData_default_instance_),
};

const char descriptor_table_protodef_gcs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tgcs.proto\022\007mcs.rpc\032\014common.proto\032\030runt"
  "ime_env_common.proto\"T\n\010GcsEntry\022+\n\013chan"
  "ge_mode\030\001 \001(\0162\026.mcs.rpc.GcsChangeMode\022\n\n"
  "\002id\030\002 \001(\014\022\017\n\007entries\030\003 \003(\014\"\"\n\017ObjectTabl"
  "eData\022\017\n\007manager\030\001 \001(\014\"\365\006\n\016ActorTableDat"
  "a\022\020\n\010actor_id\030\001 \001(\014\022\021\n\tparent_id\030\002 \001(\014\022&"
  "\n\036actor_creation_dummy_object_id\030\003 \001(\014\022\016"
  "\n\006job_id\030\004 \001(\014\0221\n\005state\030\006 \001(\0162\".mcs.rpc."
  "ActorTableData.ActorState\022\024\n\014max_restart"
  "s\030\007 \001(\003\022\024\n\014num_restarts\030\010 \001(\004\022!\n\007address"
  "\030\t \001(\0132\020.mcs.rpc.Address\022\'\n\rowner_addres"
  "s\030\n \001(\0132\020.mcs.rpc.Address\022\023\n\013is_detached"
  "\030\013 \001(\010\022\014\n\004name\030\014 \001(\t\022\021\n\ttimestamp\030\r \001(\001\022"
  "3\n\020resource_mapping\030\017 \003(\0132\031.mcs.rpc.Reso"
  "urceMapEntry\022\013\n\003pid\030\020 \001(\r\0228\n\023function_de"
  "scriptor\030\021 \001(\0132\033.mcs.rpc.FunctionDescrip"
  "tor\022\025\n\rmcs_namespace\030\023 \001(\t\022\022\n\nstart_time"
  "\030\024 \001(\004\022\020\n\010end_time\030\025 \001(\004\022\036\n\026serialized_r"
  "untime_env\030\026 \001(\t\022\022\n\nclass_name\030\027 \001(\t\022-\n\013"
  "death_cause\030\030 \001(\0132\030.mcs.rpc.ActorDeathCa"
  "use\022J\n\022required_resources\030\034 \003(\0132..mcs.rp"
  "c.ActorTableData.RequiredResourcesEntry\022"
  "\024\n\007node_id\030\035 \001(\014H\000\210\001\001\0328\n\026RequiredResourc"
  "esEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\""
  "a\n\nActorState\022\030\n\024DEPENDENCIES_UNREADY\020\000\022"
  "\024\n\020PENDING_CREATION\020\001\022\t\n\005ALIVE\020\002\022\016\n\nREST"
  "ARTING\020\003\022\010\n\004DEAD\020\004B\n\n\010_node_id\"X\n\016ErrorT"
  "ableData\022\016\n\006job_id\030\001 \001(\014\022\014\n\004type\030\002 \001(\t\022\025"
  "\n\rerror_message\030\003 \001(\t\022\021\n\ttimestamp\030\004 \001(\001"
  "\"\203\001\n\014ScheduleData\022>\n\rschedule_plan\030\001 \003(\013"
  "2\'.mcs.rpc.ScheduleData.SchedulePlanEntr"
  "y\0323\n\021SchedulePlanEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
  "alue\030\002 \001(\014:\0028\001\"u\n\021ProfileEventEntry\022\022\n\ns"
  "tart_time\030\001 \001(\003\022\020\n\010end_time\030\002 \001(\003\022\027\n\next"
  "ra_data\030\003 \001(\tH\000\210\001\001\022\022\n\nevent_name\030\004 \001(\tB\r"
  "\n\013_extra_data\"\202\001\n\rProfileEvents\022\026\n\016compo"
  "nent_type\030\001 \001(\t\022\024\n\014component_id\030\002 \001(\014\022\027\n"
  "\017node_ip_address\030\003 \001(\t\022*\n\006events\030\004 \003(\0132\032"
  ".mcs.rpc.ProfileEventEntry\"\361\002\n\017TaskState"
  "Update\022\024\n\007node_id\030\001 \001(\014H\000\210\001\001\022\"\n\025pending_"
  "args_avail_ts\030\002 \001(\003H\001\210\001\001\022\'\n\032pending_node"
  "_assignment_ts\030\003 \001(\003H\002\210\001\001\022#\n\026submitted_t"
  "o_worker_ts\030\004 \001(\003H\003\210\001\001\022\027\n\nrunning_ts\030\005 \001"
  "(\003H\004\210\001\001\022\030\n\013finished_ts\030\006 \001(\003H\005\210\001\001\022\026\n\tfai"
  "led_ts\030\007 \001(\003H\006\210\001\001B\n\n\010_node_idB\030\n\026_pendin"
  "g_args_avail_tsB\035\n\033_pending_node_assignm"
  "ent_tsB\031\n\027_submitted_to_worker_tsB\r\n\013_ru"
  "nning_tsB\016\n\014_finished_tsB\014\n\n_failed_ts\"\223"
  "\002\n\nTaskEvents\022\017\n\007task_id\030\001 \001(\014\022\026\n\016attemp"
  "t_number\030\002 \001(\005\022.\n\ttask_info\030\003 \001(\0132\026.mcs."
  "rpc.TaskInfoEntryH\000\210\001\001\0224\n\rstate_updates\030"
  "\004 \001(\0132\030.mcs.rpc.TaskStateUpdateH\001\210\001\001\0223\n\016"
  "profile_events\030\005 \001(\0132\026.mcs.rpc.ProfileEv"
  "entsH\002\210\001\001\022\016\n\006job_id\030\006 \001(\014B\014\n\n_task_infoB"
  "\020\n\016_state_updatesB\021\n\017_profile_events\"\215\001\n"
  "\rTaskEventData\022+\n\016events_by_task\030\001 \003(\0132\023"
  ".mcs.rpc.TaskEvents\022\'\n\037num_profile_task_"
  "events_dropped\030\003 \001(\005\022&\n\036num_status_task_"
  "events_dropped\030\004 \001(\005\".\n\021ResourceTableDat"
  "a\022\031\n\021resource_capacity\030\001 \001(\001\"\262\001\n\022Availab"
  "leResources\022\017\n\007node_id\030\001 \001(\014\022P\n\023resource"
  "s_available\030\002 \003(\01323.mcs.rpc.AvailableRes"
  "ources.ResourcesAvailableEntry\0329\n\027Resour"
  "cesAvailableEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
  "\002 \001(\001:\0028\001\"\345\003\n\013GcsNodeInfo\022\017\n\007node_id\030\001 \001"
  "(\014\022\034\n\024node_manager_address\030\002 \001(\t\022\032\n\022mcsl"
  "et_socket_name\030\003 \001(\t\022 \n\030object_store_soc"
  "ket_name\030\004 \001(\t\022\031\n\021node_manager_port\030\005 \001("
  "\005\022\033\n\023object_manager_port\030\006 \001(\005\0220\n\005state\030"
  "\007 \001(\0162!.mcs.rpc.GcsNodeInfo.GcsNodeState"
  "\022\035\n\025node_manager_hostname\030\010 \001(\t\022\033\n\023metri"
  "cs_export_port\030\t \001(\005\022\021\n\ttimestamp\030\n \001(\003\022"
  "A\n\017resources_total\030\013 \003(\0132(.mcs.rpc.GcsNo"
  "deInfo.ResourcesTotalEntry\022\021\n\tnode_name\030"
  "\014 \001(\t\0325\n\023ResourcesTotalEntry\022\013\n\003key\030\001 \001("
  "\t\022\r\n\005value\030\002 \001(\001:\0028\001\"#\n\014GcsNodeState\022\t\n\005"
  "ALIVE\020\000\022\010\n\004DEAD\020\001\"%\n\022HeartbeatTableData\022"
  "\017\n\007node_id\030\001 \001(\014\"\334\002\n\tJobConfig\022\023\n\013jvm_op"
  "tions\030\002 \003(\t\022\030\n\020code_search_path\030\003 \003(\t\0221\n"
  "\020runtime_env_info\030\004 \001(\0132\027.mcs.rpc.Runtim"
  "eEnvInfo\022\025\n\rmcs_namespace\030\005 \001(\t\0222\n\010metad"
  "ata\030\006 \003(\0132 .mcs.rpc.JobConfig.MetadataEn"
  "try\022@\n\026default_actor_lifetime\030\007 \001(\0162 .mc"
  "s.rpc.JobConfig.ActorLifetime\032/\n\rMetadat"
  "aEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"/"
  "\n\rActorLifetime\022\014\n\010DETACHED\020\000\022\020\n\014NON_DET"
  "ACHED\020\001\"\317\001\n\014JobTableData\022\016\n\006job_id\030\001 \001(\014"
  "\022\017\n\007is_dead\030\002 \001(\010\022\021\n\ttimestamp\030\003 \001(\003\022\031\n\021"
  "driver_ip_address\030\004 \001(\t\022\022\n\ndriver_pid\030\005 "
  "\001(\003\022\"\n\006config\030\006 \001(\0132\022.mcs.rpc.JobConfig\022"
  "\022\n\nstart_time\030\007 \001(\004\022\020\n\010end_time\030\010 \001(\004\022\022\n"
  "\nentrypoint\030\t \001(\t\"\252\003\n\017WorkerTableData\022\020\n"
  "\010is_alive\030\001 \001(\010\022(\n\016worker_address\030\002 \001(\0132"
  "\020.mcs.rpc.Address\022\021\n\ttimestamp\030\003 \001(\003\022(\n\013"
  "worker_type\030\005 \001(\0162\023.mcs.rpc.WorkerType\022="
  "\n\013worker_info\030\006 \003(\0132(.mcs.rpc.WorkerTabl"
  "eData.WorkerInfoEntry\0226\n\027creation_task_e"
  "xception\030\022 \001(\0132\025.mcs.rpc.McsException\022/\n"
  "\texit_type\030\023 \001(\0162\027.mcs.rpc.WorkerExitTyp"
  "eH\000\210\001\001\022\030\n\013exit_detail\030\024 \001(\tH\001\210\001\001\022\013\n\003pid\030"
  "\025 \001(\r\0321\n\017WorkerInfoEntry\022\013\n\003key\030\001 \001(\t\022\r\n"
  "\005value\030\002 \001(\014:\0028\001B\014\n\n_exit_typeB\016\n\014_exit_"
  "detail\"7\n\017WorkerDeltaData\022\021\n\tmcslet_id\030\001"
  " \001(\014\022\021\n\tworker_id\030\002 \001(\014\"\207\001\n\013ResourceMap\022"
  ".\n\005items\030\001 \003(\0132\037.mcs.rpc.ResourceMap.Ite"
  "msEntry\032H\n\nItemsEntry\022\013\n\003key\030\001 \001(\t\022)\n\005va"
  "lue\030\002 \001(\0132\032.mcs.rpc.ResourceTableData:\0028"
  "\001\"\036\n\014StoredConfig\022\016\n\006config\030\001 \001(\t\"\307\001\n\022No"
  "deResourceChange\022\017\n\007node_id\030\001 \001(\014\022L\n\021upd"
  "ated_resources\030\002 \003(\01321.mcs.rpc.NodeResou"
  "rceChange.UpdatedResourcesEntry\022\031\n\021delet"
  "ed_resources\030\003 \003(\t\0327\n\025UpdatedResourcesEn"
  "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\")\n\rP"
  "ubSubMessage\022\n\n\002id\030\001 \001(\014\022\014\n\004data\030\002 \001(\014\"\202"
  "\001\n\016ResourceUpdate\022-\n\006change\030\001 \001(\0132\033.mcs."
  "rpc.NodeResourceChangeH\000\022&\n\004data\030\002 \001(\0132\026"
  ".mcs.rpc.ResourcesDataH\000B\031\n\027resource_cha"
  "nge_or_data\"T\n\032ResourceUsageBroadcastDat"
  "a\022\016\n\006seq_no\030\001 \001(\003\022&\n\005batch\030\002 \003(\0132\027.mcs.r"
  "pc.ResourceUpdate\"\322\001\n\016ResourceDemand\0221\n\005"
  "shape\030\001 \003(\0132\".mcs.rpc.ResourceDemand.Sha"
  "peEntry\022!\n\031num_ready_requests_queued\030\002 \001"
  "(\004\022&\n\036num_infeasible_requests_queued\030\003 \001"
  "(\004\022\024\n\014backlog_size\030\004 \001(\003\032,\n\nShapeEntry\022\013"
  "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\"A\n\014Resour"
  "ceLoad\0221\n\020resource_demands\030\001 \003(\0132\027.mcs.r"
  "pc.ResourceDemand\"\357\006\n\rResourcesData\022\017\n\007n"
  "ode_id\030\001 \001(\014\022K\n\023resources_available\030\002 \003("
  "\0132..mcs.rpc.ResourcesData.ResourcesAvail"
  "ableEntry\022#\n\033resources_available_changed"
  "\030\003 \001(\010\022C\n\017resources_total\030\004 \003(\0132*.mcs.rp"
  "c.ResourcesData.ResourcesTotalEntry\022\?\n\rr"
  "esource_load\030\005 \003(\0132(.mcs.rpc.ResourcesDa"
  "ta.ResourceLoadEntry\022\035\n\025resource_load_ch"
  "anged\030\006 \001(\010\0225\n\026resource_load_by_shape\030\007 "
  "\001(\0132\025.mcs.rpc.ResourceLoad\022\030\n\020should_glo"
  "bal_gc\030\010 \001(\010\022\034\n\024node_manager_address\030\t \001"
  "(\t\022\033\n\023object_pulls_queued\030\n \001(\010\022N\n\025resou"
  "rces_normal_task\030\013 \003(\0132/.mcs.rpc.Resourc"
  "esData.ResourcesNormalTaskEntry\022%\n\035resou"
  "rces_normal_task_changed\030\014 \001(\010\022\'\n\037resour"
  "ces_normal_task_timestamp\030\r \001(\003\022\'\n\037clust"
  "er_full_of_actors_detected\030\016 \001(\010\0329\n\027Reso"
  "urcesAvailableEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
  "e\030\002 \001(\001:\0028\001\0325\n\023ResourcesTotalEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\0323\n\021ResourceLo"
  "adEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\032"
  ":\n\030ResourcesNormalTaskEntry\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\001:\0028\001\"\261\001\n\026ResourceUsageBat"
  "chData\022%\n\005batch\030\001 \003(\0132\026.mcs.rpc.Resource"
  "sData\0225\n\026resource_load_by_shape\030\002 \001(\0132\025."
  "mcs.rpc.ResourceLoad\0229\n\024placement_group_"
  "load\030\003 \001(\0132\033.mcs.rpc.PlacementGroupLoad\""
  "T\n\022PlacementGroupLoad\022>\n\024placement_group"
  "_data\030\001 \003(\0132 .mcs.rpc.PlacementGroupTabl"
  "eData\"\277\003\n\023PlacementGroupStats\022$\n\034creatio"
  "n_request_received_ns\030\002 \001(\003\022\"\n\032schedulin"
  "g_started_time_ns\030\003 \001(\003\022\035\n\025scheduling_la"
  "tency_us\030\004 \001(\003\022&\n\036end_to_end_creation_la"
  "tency_us\030\005 \001(\003\022\032\n\022scheduling_attempt\030\006 \001"
  "(\r\022\036\n\026highest_retry_delay_ms\030\007 \001(\001\022F\n\020sc"
  "heduling_state\030\010 \001(\0162,.mcs.rpc.Placement"
  "GroupStats.SchedulingState\"\222\001\n\017Schedulin"
  "gState\022\n\n\006QUEUED\020\000\022\013\n\007REMOVED\020\001\022\026\n\022SCHED"
  "ULING_STARTED\020\002\022\020\n\014NO_RESOURCES\020\003\022\016\n\nINF"
  "EASIBLE\020\004\022\036\n\032FAILED_TO_COMMIT_RESOURCES\020"
  "\005\022\014\n\010FINISHED\020\006\"\214\004\n\027PlacementGroupTableD"
  "ata\022\032\n\022placement_group_id\030\001 \001(\014\022\014\n\004name\030"
  "\002 \001(\t\022 \n\007bundles\030\003 \003(\0132\017.mcs.rpc.Bundle\022"
  ",\n\010strategy\030\004 \001(\0162\032.mcs.rpc.PlacementStr"
  "ategy\022C\n\005state\030\005 \001(\01624.mcs.rpc.Placement"
  "GroupTableData.PlacementGroupState\022\026\n\016cr"
  "eator_job_id\030\006 \001(\014\022\030\n\020creator_actor_id\030\007"
  " \001(\014\022\030\n\020creator_job_dead\030\010 \001(\010\022\032\n\022creato"
  "r_actor_dead\030\t \001(\010\022\023\n\013is_detached\030\n \001(\010\022"
  "\025\n\rmcs_namespace\030\013 \001(\t\022+\n\005stats\030\014 \001(\0132\034."
  "mcs.rpc.PlacementGroupStats\022!\n\031max_cpu_f"
  "raction_per_node\030\r \001(\001\"N\n\023PlacementGroup"
  "State\022\013\n\007PENDING\020\000\022\013\n\007CREATED\020\001\022\013\n\007REMOV"
  "ED\020\002\022\020\n\014RESCHEDULING\020\003*\334\002\n\013TablePrefix\022\024"
  "\n\020TABLE_PREFIX_MIN\020\000\022\n\n\006UNUSED\020\001\022\010\n\004TASK"
  "\020\002\022\017\n\013MCSLET_TASK\020\003\022\010\n\004NODE\020\004\022\n\n\006OBJECT\020"
  "\005\022\t\n\005ACTOR\020\006\022\014\n\010FUNCTION\020\007\022\027\n\023TASK_RECON"
  "STRUCTION\020\010\022\030\n\024RESOURCE_USAGE_BATCH\020\t\022\007\n"
  "\003JOB\020\n\022\016\n\nTASK_LEASE\020\014\022\021\n\rNODE_RESOURCE\020"
  "\r\022\020\n\014DIRECT_ACTOR\020\016\022\013\n\007WORKERS\020\017\022\023\n\017INTE"
  "RNAL_CONFIG\020\020\022\034\n\030PLACEMENT_GROUP_SCHEDUL"
  "E\020\021\022\023\n\017PLACEMENT_GROUP\020\022\022\006\n\002KV\020\023\022\023\n\017ACTO"
  "R_TASK_SPEC\020\024*\276\002\n\013TablePubsub\022\024\n\020TABLE_P"
  "UBSUB_MIN\020\000\022\016\n\nNO_PUBLISH\020\001\022\017\n\013TASK_PUBS"
  "UB\020\002\022\026\n\022MCSLET_TASK_PUBSUB\020\003\022\017\n\013NODE_PUB"
  "SUB\020\004\022\021\n\rOBJECT_PUBSUB\020\005\022\020\n\014ACTOR_PUBSUB"
  "\020\006\022\037\n\033RESOURCE_USAGE_BATCH_PUBSUB\020\007\022\025\n\021T"
  "ASK_LEASE_PUBSUB\020\010\022\016\n\nJOB_PUBSUB\020\t\022\030\n\024NO"
  "DE_RESOURCE_PUBSUB\020\n\022\027\n\023DIRECT_ACTOR_PUB"
  "SUB\020\013\022\031\n\025WORKER_FAILURE_PUBSUB\020\014\022\024\n\020TABL"
  "E_PUBSUB_MAX\020\r*.\n\rGcsChangeMode\022\021\n\rAPPEN"
  "D_OR_ADD\020\000\022\n\n\006REMOVE\020\001B\035\n\030io.mcs.runtime"
  ".generated\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gcs_2eproto_deps[2] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_runtime_5fenv_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gcs_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gcs_2eproto = {
  false, false, 7941, descriptor_table_protodef_gcs_2eproto, "gcs.proto", 
  &descriptor_table_gcs_2eproto_once, descriptor_table_gcs_2eproto_deps, 2, 44,
  schemas, file_default_instances, TableStruct_gcs_2eproto::offsets,
  file_level_metadata_gcs_2eproto, file_level_enum_descriptors_gcs_2eproto, file_level_service_descriptors_gcs_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_gcs_2eproto_getter() {
  return &descriptor_table_gcs_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_gcs_2eproto(&descriptor_table_gcs_2eproto);
namespace mcs {
namespace rpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActorTableData_ActorState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcs_2eproto);
  return file_level_enum_descriptors_gcs_2eproto[0];
}
bool ActorTableData_ActorState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ActorTableData_ActorState ActorTableData::DEPENDENCIES_UNREADY;
constexpr ActorTableData_ActorState ActorTableData::PENDING_CREATION;
constexpr ActorTableData_ActorState ActorTableData::ALIVE;
constexpr ActorTableData_ActorState ActorTableData::RESTARTING;
constexpr ActorTableData_ActorState ActorTableData::DEAD;
constexpr ActorTableData_ActorState ActorTableData::ActorState_MIN;
constexpr ActorTableData_ActorState ActorTableData::ActorState_MAX;
constexpr int ActorTableData::ActorState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GcsNodeInfo_GcsNodeState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcs_2eproto);
  return file_level_enum_descriptors_gcs_2eproto[1];
}
bool GcsNodeInfo_GcsNodeState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GcsNodeInfo_GcsNodeState GcsNodeInfo::ALIVE;
constexpr GcsNodeInfo_GcsNodeState GcsNodeInfo::DEAD;
constexpr GcsNodeInfo_GcsNodeState GcsNodeInfo::GcsNodeState_MIN;
constexpr GcsNodeInfo_GcsNodeState GcsNodeInfo::GcsNodeState_MAX;
constexpr int GcsNodeInfo::GcsNodeState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JobConfig_ActorLifetime_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcs_2eproto);
  return file_level_enum_descriptors_gcs_2eproto[2];
}
bool JobConfig_ActorLifetime_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr JobConfig_ActorLifetime JobConfig::DETACHED;
constexpr JobConfig_ActorLifetime JobConfig::NON_DETACHED;
constexpr JobConfig_ActorLifetime JobConfig::ActorLifetime_MIN;
constexpr JobConfig_ActorLifetime JobConfig::ActorLifetime_MAX;
constexpr int JobConfig::ActorLifetime_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlacementGroupStats_SchedulingState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcs_2eproto);
  return file_level_enum_descriptors_gcs_2eproto[3];
}
bool PlacementGroupStats_SchedulingState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PlacementGroupStats_SchedulingState PlacementGroupStats::QUEUED;
constexpr PlacementGroupStats_SchedulingState PlacementGroupStats::REMOVED;
constexpr PlacementGroupStats_SchedulingState PlacementGroupStats::SCHEDULING_STARTED;
constexpr PlacementGroupStats_SchedulingState PlacementGroupStats::NO_RESOURCES;
constexpr PlacementGroupStats_SchedulingState PlacementGroupStats::INFEASIBLE;
constexpr PlacementGroupStats_SchedulingState PlacementGroupStats::FAILED_TO_COMMIT_RESOURCES;
constexpr PlacementGroupStats_SchedulingState PlacementGroupStats::FINISHED;
constexpr PlacementGroupStats_SchedulingState PlacementGroupStats::SchedulingState_MIN;
constexpr PlacementGroupStats_SchedulingState PlacementGroupStats::SchedulingState_MAX;
constexpr int PlacementGroupStats::SchedulingState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlacementGroupTableData_PlacementGroupState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcs_2eproto);
  return file_level_enum_descriptors_gcs_2eproto[4];
}
bool PlacementGroupTableData_PlacementGroupState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PlacementGroupTableData_PlacementGroupState PlacementGroupTableData::PENDING;
constexpr PlacementGroupTableData_PlacementGroupState PlacementGroupTableData::CREATED;
constexpr PlacementGroupTableData_PlacementGroupState PlacementGroupTableData::REMOVED;
constexpr PlacementGroupTableData_PlacementGroupState PlacementGroupTableData::RESCHEDULING;
constexpr PlacementGroupTableData_PlacementGroupState PlacementGroupTableData::PlacementGroupState_MIN;
constexpr PlacementGroupTableData_PlacementGroupState PlacementGroupTableData::PlacementGroupState_MAX;
constexpr int PlacementGroupTableData::PlacementGroupState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TablePrefix_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcs_2eproto);
  return file_level_enum_descriptors_gcs_2eproto[5];
}
bool TablePrefix_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TablePubsub_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcs_2eproto);
  return file_level_enum_descriptors_gcs_2eproto[6];
}
bool TablePubsub_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GcsChangeMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcs_2eproto);
  return file_level_enum_descriptors_gcs_2eproto[7];
}
bool GcsChangeMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GcsEntry::_Internal {
 public:
};

GcsEntry::GcsEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.GcsEntry)
}
GcsEntry::GcsEntry(const GcsEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  change_mode_ = from.change_mode_;
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.GcsEntry)
}

inline void GcsEntry::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
change_mode_ = 0;
}

GcsEntry::~GcsEntry() {
  // @@protoc_insertion_point(destructor:mcs.rpc.GcsEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GcsEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GcsEntry::ArenaDtor(void* object) {
  GcsEntry* _this = reinterpret_cast< GcsEntry* >(object);
  (void)_this;
}
void GcsEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GcsEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GcsEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.GcsEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  id_.ClearToEmpty();
  change_mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GcsEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mcs.rpc.GcsChangeMode change_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_change_mode(static_cast<::mcs::rpc::GcsChangeMode>(val));
        } else goto handle_unusual;
        continue;
      // bytes id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_entries();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GcsEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.GcsEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mcs.rpc.GcsChangeMode change_mode = 1;
  if (this->_internal_change_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_change_mode(), target);
  }

  // bytes id = 2;
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_id(), target);
  }

  // repeated bytes entries = 3;
  for (int i = 0, n = this->_internal_entries_size(); i < n; i++) {
    const auto& s = this->_internal_entries(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.GcsEntry)
  return target;
}

size_t GcsEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.GcsEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes entries = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(entries_.size());
  for (int i = 0, n = entries_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      entries_.Get(i));
  }

  // bytes id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // .mcs.rpc.GcsChangeMode change_mode = 1;
  if (this->_internal_change_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_change_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GcsEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GcsEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GcsEntry::GetClassData() const { return &_class_data_; }

void GcsEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GcsEntry *>(to)->MergeFrom(
      static_cast<const GcsEntry &>(from));
}


void GcsEntry::MergeFrom(const GcsEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.GcsEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_change_mode() != 0) {
    _internal_set_change_mode(from._internal_change_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GcsEntry::CopyFrom(const GcsEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.GcsEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcsEntry::IsInitialized() const {
  return true;
}

void GcsEntry::InternalSwap(GcsEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  swap(change_mode_, other->change_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GcsEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[0]);
}

// ===================================================================

class ObjectTableData::_Internal {
 public:
};

ObjectTableData::ObjectTableData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ObjectTableData)
}
ObjectTableData::ObjectTableData(const ObjectTableData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  manager_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_manager().empty()) {
    manager_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_manager(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ObjectTableData)
}

inline void ObjectTableData::SharedCtor() {
manager_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ObjectTableData::~ObjectTableData() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ObjectTableData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ObjectTableData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  manager_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ObjectTableData::ArenaDtor(void* object) {
  ObjectTableData* _this = reinterpret_cast< ObjectTableData* >(object);
  (void)_this;
}
void ObjectTableData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectTableData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectTableData::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ObjectTableData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manager_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectTableData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes manager = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_manager();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectTableData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ObjectTableData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes manager = 1;
  if (!this->_internal_manager().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_manager(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ObjectTableData)
  return target;
}

size_t ObjectTableData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ObjectTableData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes manager = 1;
  if (!this->_internal_manager().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_manager());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectTableData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObjectTableData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectTableData::GetClassData() const { return &_class_data_; }

void ObjectTableData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ObjectTableData *>(to)->MergeFrom(
      static_cast<const ObjectTableData &>(from));
}


void ObjectTableData::MergeFrom(const ObjectTableData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ObjectTableData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_manager().empty()) {
    _internal_set_manager(from._internal_manager());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectTableData::CopyFrom(const ObjectTableData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ObjectTableData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectTableData::IsInitialized() const {
  return true;
}

void ObjectTableData::InternalSwap(ObjectTableData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &manager_, GetArenaForAllocation(),
      &other->manager_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectTableData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[1]);
}

// ===================================================================

ActorTableData_RequiredResourcesEntry_DoNotUse::ActorTableData_RequiredResourcesEntry_DoNotUse() {}
ActorTableData_RequiredResourcesEntry_DoNotUse::ActorTableData_RequiredResourcesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ActorTableData_RequiredResourcesEntry_DoNotUse::MergeFrom(const ActorTableData_RequiredResourcesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ActorTableData_RequiredResourcesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[2]);
}

// ===================================================================

class ActorTableData::_Internal {
 public:
  using HasBits = decltype(std::declval<ActorTableData>()._has_bits_);
  static const ::mcs::rpc::Address& address(const ActorTableData* msg);
  static const ::mcs::rpc::Address& owner_address(const ActorTableData* msg);
  static const ::mcs::rpc::FunctionDescriptor& function_descriptor(const ActorTableData* msg);
  static const ::mcs::rpc::ActorDeathCause& death_cause(const ActorTableData* msg);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mcs::rpc::Address&
ActorTableData::_Internal::address(const ActorTableData* msg) {
  return *msg->address_;
}
const ::mcs::rpc::Address&
ActorTableData::_Internal::owner_address(const ActorTableData* msg) {
  return *msg->owner_address_;
}
const ::mcs::rpc::FunctionDescriptor&
ActorTableData::_Internal::function_descriptor(const ActorTableData* msg) {
  return *msg->function_descriptor_;
}
const ::mcs::rpc::ActorDeathCause&
ActorTableData::_Internal::death_cause(const ActorTableData* msg) {
  return *msg->death_cause_;
}
void ActorTableData::clear_address() {
  if (GetArenaForAllocation() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
void ActorTableData::clear_owner_address() {
  if (GetArenaForAllocation() == nullptr && owner_address_ != nullptr) {
    delete owner_address_;
  }
  owner_address_ = nullptr;
}
void ActorTableData::clear_resource_mapping() {
  resource_mapping_.Clear();
}
void ActorTableData::clear_function_descriptor() {
  if (GetArenaForAllocation() == nullptr && function_descriptor_ != nullptr) {
    delete function_descriptor_;
  }
  function_descriptor_ = nullptr;
}
void ActorTableData::clear_death_cause() {
  if (GetArenaForAllocation() == nullptr && death_cause_ != nullptr) {
    delete death_cause_;
  }
  death_cause_ = nullptr;
}
ActorTableData::ActorTableData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  resource_mapping_(arena),
  required_resources_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ActorTableData)
}
ActorTableData::ActorTableData(const ActorTableData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      resource_mapping_(from.resource_mapping_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  required_resources_.MergeFrom(from.required_resources_);
  actor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_actor_id().empty()) {
    actor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_actor_id(), 
      GetArenaForAllocation());
  }
  parent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent_id().empty()) {
    parent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent_id(), 
      GetArenaForAllocation());
  }
  actor_creation_dummy_object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_actor_creation_dummy_object_id().empty()) {
    actor_creation_dummy_object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_actor_creation_dummy_object_id(), 
      GetArenaForAllocation());
  }
  job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_job_id().empty()) {
    job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_job_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  mcs_namespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mcs_namespace().empty()) {
    mcs_namespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mcs_namespace(), 
      GetArenaForAllocation());
  }
  serialized_runtime_env_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serialized_runtime_env().empty()) {
    serialized_runtime_env_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serialized_runtime_env(), 
      GetArenaForAllocation());
  }
  class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_class_name().empty()) {
    class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_class_name(), 
      GetArenaForAllocation());
  }
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_node_id()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_address()) {
    address_ = new ::mcs::rpc::Address(*from.address_);
  } else {
    address_ = nullptr;
  }
  if (from._internal_has_owner_address()) {
    owner_address_ = new ::mcs::rpc::Address(*from.owner_address_);
  } else {
    owner_address_ = nullptr;
  }
  if (from._internal_has_function_descriptor()) {
    function_descriptor_ = new ::mcs::rpc::FunctionDescriptor(*from.function_descriptor_);
  } else {
    function_descriptor_ = nullptr;
  }
  if (from._internal_has_death_cause()) {
    death_cause_ = new ::mcs::rpc::ActorDeathCause(*from.death_cause_);
  } else {
    death_cause_ = nullptr;
  }
  ::memcpy(&max_restarts_, &from.max_restarts_,
    static_cast<size_t>(reinterpret_cast<char*>(&pid_) -
    reinterpret_cast<char*>(&max_restarts_)) + sizeof(pid_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ActorTableData)
}

inline void ActorTableData::SharedCtor() {
actor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
parent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
actor_creation_dummy_object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mcs_namespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
serialized_runtime_env_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pid_) -
    reinterpret_cast<char*>(&address_)) + sizeof(pid_));
}

ActorTableData::~ActorTableData() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ActorTableData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActorTableData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  actor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actor_creation_dummy_object_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  job_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mcs_namespace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_runtime_env_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete address_;
  if (this != internal_default_instance()) delete owner_address_;
  if (this != internal_default_instance()) delete function_descriptor_;
  if (this != internal_default_instance()) delete death_cause_;
}

void ActorTableData::ArenaDtor(void* object) {
  ActorTableData* _this = reinterpret_cast< ActorTableData* >(object);
  (void)_this;
  _this->required_resources_. ~MapField();
}
inline void ActorTableData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ActorTableData::ArenaDtor);
  }
}
void ActorTableData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActorTableData::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ActorTableData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_mapping_.Clear();
  required_resources_.Clear();
  actor_id_.ClearToEmpty();
  parent_id_.ClearToEmpty();
  actor_creation_dummy_object_id_.ClearToEmpty();
  job_id_.ClearToEmpty();
  name_.ClearToEmpty();
  mcs_namespace_.ClearToEmpty();
  serialized_runtime_env_.ClearToEmpty();
  class_name_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    node_id_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
  if (GetArenaForAllocation() == nullptr && owner_address_ != nullptr) {
    delete owner_address_;
  }
  owner_address_ = nullptr;
  if (GetArenaForAllocation() == nullptr && function_descriptor_ != nullptr) {
    delete function_descriptor_;
  }
  function_descriptor_ = nullptr;
  if (GetArenaForAllocation() == nullptr && death_cause_ != nullptr) {
    delete death_cause_;
  }
  death_cause_ = nullptr;
  ::memset(&max_restarts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pid_) -
      reinterpret_cast<char*>(&max_restarts_)) + sizeof(pid_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActorTableData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes actor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_actor_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes parent_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_parent_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes actor_creation_dummy_object_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_actor_creation_dummy_object_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes job_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_job_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.ActorTableData.ActorState state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::mcs::rpc::ActorTableData_ActorState>(val));
        } else goto handle_unusual;
        continue;
      // int64 max_restarts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          max_restarts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 num_restarts = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          num_restarts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.Address address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.Address owner_address = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_detached = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          is_detached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ActorTableData.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double timestamp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .mcs.rpc.ResourceMapEntry resource_mapping = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resource_mapping(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 pid = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.FunctionDescriptor function_descriptor = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_function_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mcs_namespace = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_mcs_namespace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ActorTableData.mcs_namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start_time = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 end_time = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serialized_runtime_env = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_serialized_runtime_env();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ActorTableData.serialized_runtime_env"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string class_name = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_class_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ActorTableData.class_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.ActorDeathCause death_cause = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_death_cause(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, double> required_resources = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&required_resources_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bytes node_id = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActorTableData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ActorTableData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes actor_id = 1;
  if (!this->_internal_actor_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_actor_id(), target);
  }

  // bytes parent_id = 2;
  if (!this->_internal_parent_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_parent_id(), target);
  }

  // bytes actor_creation_dummy_object_id = 3;
  if (!this->_internal_actor_creation_dummy_object_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_actor_creation_dummy_object_id(), target);
  }

  // bytes job_id = 4;
  if (!this->_internal_job_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_job_id(), target);
  }

  // .mcs.rpc.ActorTableData.ActorState state = 6;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_state(), target);
  }

  // int64 max_restarts = 7;
  if (this->_internal_max_restarts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_max_restarts(), target);
  }

  // uint64 num_restarts = 8;
  if (this->_internal_num_restarts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_num_restarts(), target);
  }

  // .mcs.rpc.Address address = 9;
  if (this->_internal_has_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::address(this), target, stream);
  }

  // .mcs.rpc.Address owner_address = 10;
  if (this->_internal_has_owner_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::owner_address(this), target, stream);
  }

  // bool is_detached = 11;
  if (this->_internal_is_detached() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_is_detached(), target);
  }

  // string name = 12;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ActorTableData.name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_name(), target);
  }

  // double timestamp = 13;
  if (!(this->_internal_timestamp() <= 0 && this->_internal_timestamp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_timestamp(), target);
  }

  // repeated .mcs.rpc.ResourceMapEntry resource_mapping = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_mapping_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_resource_mapping(i), target, stream);
  }

  // uint32 pid = 16;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_pid(), target);
  }

  // .mcs.rpc.FunctionDescriptor function_descriptor = 17;
  if (this->_internal_has_function_descriptor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::function_descriptor(this), target, stream);
  }

  // string mcs_namespace = 19;
  if (!this->_internal_mcs_namespace().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mcs_namespace().data(), static_cast<int>(this->_internal_mcs_namespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ActorTableData.mcs_namespace");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_mcs_namespace(), target);
  }

  // uint64 start_time = 20;
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(20, this->_internal_start_time(), target);
  }

  // uint64 end_time = 21;
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(21, this->_internal_end_time(), target);
  }

  // string serialized_runtime_env = 22;
  if (!this->_internal_serialized_runtime_env().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serialized_runtime_env().data(), static_cast<int>(this->_internal_serialized_runtime_env().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ActorTableData.serialized_runtime_env");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_serialized_runtime_env(), target);
  }

  // string class_name = 23;
  if (!this->_internal_class_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_name().data(), static_cast<int>(this->_internal_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ActorTableData.class_name");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_class_name(), target);
  }

  // .mcs.rpc.ActorDeathCause death_cause = 24;
  if (this->_internal_has_death_cause()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::death_cause(this), target, stream);
  }

  // map<string, double> required_resources = 28;
  if (!this->_internal_required_resources().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mcs.rpc.ActorTableData.RequiredResourcesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_required_resources().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_required_resources().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_required_resources().begin();
          it != this->_internal_required_resources().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ActorTableData_RequiredResourcesEntry_DoNotUse::Funcs::InternalSerialize(28, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_required_resources().begin();
          it != this->_internal_required_resources().end(); ++it) {
        target = ActorTableData_RequiredResourcesEntry_DoNotUse::Funcs::InternalSerialize(28, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // optional bytes node_id = 29;
  if (_internal_has_node_id()) {
    target = stream->WriteBytesMaybeAliased(
        29, this->_internal_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ActorTableData)
  return target;
}

size_t ActorTableData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ActorTableData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mcs.rpc.ResourceMapEntry resource_mapping = 15;
  total_size += 1UL * this->_internal_resource_mapping_size();
  for (const auto& msg : this->resource_mapping_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, double> required_resources = 28;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_required_resources_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_required_resources().begin();
      it != this->_internal_required_resources().end(); ++it) {
    total_size += ActorTableData_RequiredResourcesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes actor_id = 1;
  if (!this->_internal_actor_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_actor_id());
  }

  // bytes parent_id = 2;
  if (!this->_internal_parent_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_parent_id());
  }

  // bytes actor_creation_dummy_object_id = 3;
  if (!this->_internal_actor_creation_dummy_object_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_actor_creation_dummy_object_id());
  }

  // bytes job_id = 4;
  if (!this->_internal_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_job_id());
  }

  // string name = 12;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string mcs_namespace = 19;
  if (!this->_internal_mcs_namespace().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mcs_namespace());
  }

  // string serialized_runtime_env = 22;
  if (!this->_internal_serialized_runtime_env().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serialized_runtime_env());
  }

  // string class_name = 23;
  if (!this->_internal_class_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_name());
  }

  // optional bytes node_id = 29;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_node_id());
  }

  // .mcs.rpc.Address address = 9;
  if (this->_internal_has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_);
  }

  // .mcs.rpc.Address owner_address = 10;
  if (this->_internal_has_owner_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_address_);
  }

  // .mcs.rpc.FunctionDescriptor function_descriptor = 17;
  if (this->_internal_has_function_descriptor()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *function_descriptor_);
  }

  // .mcs.rpc.ActorDeathCause death_cause = 24;
  if (this->_internal_has_death_cause()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *death_cause_);
  }

  // int64 max_restarts = 7;
  if (this->_internal_max_restarts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_restarts());
  }

  // uint64 num_restarts = 8;
  if (this->_internal_num_restarts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_restarts());
  }

  // .mcs.rpc.ActorTableData.ActorState state = 6;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // bool is_detached = 11;
  if (this->_internal_is_detached() != 0) {
    total_size += 1 + 1;
  }

  // double timestamp = 13;
  if (!(this->_internal_timestamp() <= 0 && this->_internal_timestamp() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 start_time = 20;
  if (this->_internal_start_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start_time());
  }

  // uint64 end_time = 21;
  if (this->_internal_end_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_end_time());
  }

  // uint32 pid = 16;
  if (this->_internal_pid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActorTableData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActorTableData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActorTableData::GetClassData() const { return &_class_data_; }

void ActorTableData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ActorTableData *>(to)->MergeFrom(
      static_cast<const ActorTableData &>(from));
}


void ActorTableData::MergeFrom(const ActorTableData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ActorTableData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resource_mapping_.MergeFrom(from.resource_mapping_);
  required_resources_.MergeFrom(from.required_resources_);
  if (!from._internal_actor_id().empty()) {
    _internal_set_actor_id(from._internal_actor_id());
  }
  if (!from._internal_parent_id().empty()) {
    _internal_set_parent_id(from._internal_parent_id());
  }
  if (!from._internal_actor_creation_dummy_object_id().empty()) {
    _internal_set_actor_creation_dummy_object_id(from._internal_actor_creation_dummy_object_id());
  }
  if (!from._internal_job_id().empty()) {
    _internal_set_job_id(from._internal_job_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_mcs_namespace().empty()) {
    _internal_set_mcs_namespace(from._internal_mcs_namespace());
  }
  if (!from._internal_serialized_runtime_env().empty()) {
    _internal_set_serialized_runtime_env(from._internal_serialized_runtime_env());
  }
  if (!from._internal_class_name().empty()) {
    _internal_set_class_name(from._internal_class_name());
  }
  if (from._internal_has_node_id()) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from._internal_has_address()) {
    _internal_mutable_address()->::mcs::rpc::Address::MergeFrom(from._internal_address());
  }
  if (from._internal_has_owner_address()) {
    _internal_mutable_owner_address()->::mcs::rpc::Address::MergeFrom(from._internal_owner_address());
  }
  if (from._internal_has_function_descriptor()) {
    _internal_mutable_function_descriptor()->::mcs::rpc::FunctionDescriptor::MergeFrom(from._internal_function_descriptor());
  }
  if (from._internal_has_death_cause()) {
    _internal_mutable_death_cause()->::mcs::rpc::ActorDeathCause::MergeFrom(from._internal_death_cause());
  }
  if (from._internal_max_restarts() != 0) {
    _internal_set_max_restarts(from._internal_max_restarts());
  }
  if (from._internal_num_restarts() != 0) {
    _internal_set_num_restarts(from._internal_num_restarts());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from._internal_is_detached() != 0) {
    _internal_set_is_detached(from._internal_is_detached());
  }
  if (!(from._internal_timestamp() <= 0 && from._internal_timestamp() >= 0)) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActorTableData::CopyFrom(const ActorTableData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ActorTableData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorTableData::IsInitialized() const {
  return true;
}

void ActorTableData::InternalSwap(ActorTableData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  resource_mapping_.InternalSwap(&other->resource_mapping_);
  required_resources_.InternalSwap(&other->required_resources_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &actor_id_, GetArenaForAllocation(),
      &other->actor_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &parent_id_, GetArenaForAllocation(),
      &other->parent_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &actor_creation_dummy_object_id_, GetArenaForAllocation(),
      &other->actor_creation_dummy_object_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &job_id_, GetArenaForAllocation(),
      &other->job_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mcs_namespace_, GetArenaForAllocation(),
      &other->mcs_namespace_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serialized_runtime_env_, GetArenaForAllocation(),
      &other->serialized_runtime_env_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &class_name_, GetArenaForAllocation(),
      &other->class_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_id_, GetArenaForAllocation(),
      &other->node_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActorTableData, pid_)
      + sizeof(ActorTableData::pid_)
      - PROTOBUF_FIELD_OFFSET(ActorTableData, address_)>(
          reinterpret_cast<char*>(&address_),
          reinterpret_cast<char*>(&other->address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorTableData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[3]);
}

// ===================================================================

class ErrorTableData::_Internal {
 public:
};

ErrorTableData::ErrorTableData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ErrorTableData)
}
ErrorTableData::ErrorTableData(const ErrorTableData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_job_id().empty()) {
    job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_job_id(), 
      GetArenaForAllocation());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ErrorTableData)
}

inline void ErrorTableData::SharedCtor() {
job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
timestamp_ = 0;
}

ErrorTableData::~ErrorTableData() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ErrorTableData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ErrorTableData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  job_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ErrorTableData::ArenaDtor(void* object) {
  ErrorTableData* _this = reinterpret_cast< ErrorTableData* >(object);
  (void)_this;
}
void ErrorTableData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErrorTableData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ErrorTableData::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ErrorTableData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  job_id_.ClearToEmpty();
  type_.ClearToEmpty();
  error_message_.ClearToEmpty();
  timestamp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorTableData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_job_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ErrorTableData.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ErrorTableData.error_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErrorTableData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ErrorTableData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes job_id = 1;
  if (!this->_internal_job_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_job_id(), target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ErrorTableData.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ErrorTableData.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  // double timestamp = 4;
  if (!(this->_internal_timestamp() <= 0 && this->_internal_timestamp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ErrorTableData)
  return target;
}

size_t ErrorTableData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ErrorTableData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes job_id = 1;
  if (!this->_internal_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_job_id());
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // double timestamp = 4;
  if (!(this->_internal_timestamp() <= 0 && this->_internal_timestamp() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ErrorTableData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ErrorTableData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ErrorTableData::GetClassData() const { return &_class_data_; }

void ErrorTableData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ErrorTableData *>(to)->MergeFrom(
      static_cast<const ErrorTableData &>(from));
}


void ErrorTableData::MergeFrom(const ErrorTableData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ErrorTableData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_job_id().empty()) {
    _internal_set_job_id(from._internal_job_id());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_error_message().empty()) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (!(from._internal_timestamp() <= 0 && from._internal_timestamp() >= 0)) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ErrorTableData::CopyFrom(const ErrorTableData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ErrorTableData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorTableData::IsInitialized() const {
  return true;
}

void ErrorTableData::InternalSwap(ErrorTableData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &job_id_, GetArenaForAllocation(),
      &other->job_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, GetArenaForAllocation(),
      &other->type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, GetArenaForAllocation(),
      &other->error_message_, other->GetArenaForAllocation()
  );
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorTableData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[4]);
}

// ===================================================================

ScheduleData_SchedulePlanEntry_DoNotUse::ScheduleData_SchedulePlanEntry_DoNotUse() {}
ScheduleData_SchedulePlanEntry_DoNotUse::ScheduleData_SchedulePlanEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ScheduleData_SchedulePlanEntry_DoNotUse::MergeFrom(const ScheduleData_SchedulePlanEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ScheduleData_SchedulePlanEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[5]);
}

// ===================================================================

class ScheduleData::_Internal {
 public:
};

ScheduleData::ScheduleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  schedule_plan_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ScheduleData)
}
ScheduleData::ScheduleData(const ScheduleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  schedule_plan_.MergeFrom(from.schedule_plan_);
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ScheduleData)
}

inline void ScheduleData::SharedCtor() {
}

ScheduleData::~ScheduleData() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ScheduleData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ScheduleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScheduleData::ArenaDtor(void* object) {
  ScheduleData* _this = reinterpret_cast< ScheduleData* >(object);
  (void)_this;
  _this->schedule_plan_. ~MapField();
}
inline void ScheduleData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ScheduleData::ArenaDtor);
  }
}
void ScheduleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScheduleData::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ScheduleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  schedule_plan_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScheduleData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, bytes> schedule_plan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&schedule_plan_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScheduleData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ScheduleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, bytes> schedule_plan = 1;
  if (!this->_internal_schedule_plan().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mcs.rpc.ScheduleData.SchedulePlanEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_schedule_plan().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_schedule_plan().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_schedule_plan().begin();
          it != this->_internal_schedule_plan().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ScheduleData_SchedulePlanEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_schedule_plan().begin();
          it != this->_internal_schedule_plan().end(); ++it) {
        target = ScheduleData_SchedulePlanEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ScheduleData)
  return target;
}

size_t ScheduleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ScheduleData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> schedule_plan = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_schedule_plan_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_schedule_plan().begin();
      it != this->_internal_schedule_plan().end(); ++it) {
    total_size += ScheduleData_SchedulePlanEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScheduleData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScheduleData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScheduleData::GetClassData() const { return &_class_data_; }

void ScheduleData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ScheduleData *>(to)->MergeFrom(
      static_cast<const ScheduleData &>(from));
}


void ScheduleData::MergeFrom(const ScheduleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ScheduleData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  schedule_plan_.MergeFrom(from.schedule_plan_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScheduleData::CopyFrom(const ScheduleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ScheduleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleData::IsInitialized() const {
  return true;
}

void ScheduleData::InternalSwap(ScheduleData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  schedule_plan_.InternalSwap(&other->schedule_plan_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScheduleData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[6]);
}

// ===================================================================

class ProfileEventEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfileEventEntry>()._has_bits_);
  static void set_has_extra_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProfileEventEntry::ProfileEventEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ProfileEventEntry)
}
ProfileEventEntry::ProfileEventEntry(const ProfileEventEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_extra_data()) {
    extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extra_data(), 
      GetArenaForAllocation());
  }
  event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_event_name().empty()) {
    event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_event_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ProfileEventEntry)
}

inline void ProfileEventEntry::SharedCtor() {
extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
}

ProfileEventEntry::~ProfileEventEntry() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ProfileEventEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProfileEventEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  extra_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfileEventEntry::ArenaDtor(void* object) {
  ProfileEventEntry* _this = reinterpret_cast< ProfileEventEntry* >(object);
  (void)_this;
}
void ProfileEventEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileEventEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProfileEventEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ProfileEventEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    extra_data_.ClearNonDefaultToEmpty();
  }
  event_name_.ClearToEmpty();
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileEventEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string extra_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_extra_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ProfileEventEntry.extra_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string event_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_event_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ProfileEventEntry.event_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileEventEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ProfileEventEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start_time = 1;
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_start_time(), target);
  }

  // int64 end_time = 2;
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_end_time(), target);
  }

  // optional string extra_data = 3;
  if (_internal_has_extra_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extra_data().data(), static_cast<int>(this->_internal_extra_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ProfileEventEntry.extra_data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_extra_data(), target);
  }

  // string event_name = 4;
  if (!this->_internal_event_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_name().data(), static_cast<int>(this->_internal_event_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ProfileEventEntry.event_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_event_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ProfileEventEntry)
  return target;
}

size_t ProfileEventEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ProfileEventEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string extra_data = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extra_data());
  }

  // string event_name = 4;
  if (!this->_internal_event_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_name());
  }

  // int64 start_time = 1;
  if (this->_internal_start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_start_time());
  }

  // int64 end_time = 2;
  if (this->_internal_end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProfileEventEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProfileEventEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProfileEventEntry::GetClassData() const { return &_class_data_; }

void ProfileEventEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProfileEventEntry *>(to)->MergeFrom(
      static_cast<const ProfileEventEntry &>(from));
}


void ProfileEventEntry::MergeFrom(const ProfileEventEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ProfileEventEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_extra_data()) {
    _internal_set_extra_data(from._internal_extra_data());
  }
  if (!from._internal_event_name().empty()) {
    _internal_set_event_name(from._internal_event_name());
  }
  if (from._internal_start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProfileEventEntry::CopyFrom(const ProfileEventEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ProfileEventEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileEventEntry::IsInitialized() const {
  return true;
}

void ProfileEventEntry::InternalSwap(ProfileEventEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &extra_data_, GetArenaForAllocation(),
      &other->extra_data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &event_name_, GetArenaForAllocation(),
      &other->event_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfileEventEntry, end_time_)
      + sizeof(ProfileEventEntry::end_time_)
      - PROTOBUF_FIELD_OFFSET(ProfileEventEntry, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileEventEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[7]);
}

// ===================================================================

class ProfileEvents::_Internal {
 public:
};

ProfileEvents::ProfileEvents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  events_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ProfileEvents)
}
ProfileEvents::ProfileEvents(const ProfileEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  component_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_component_type().empty()) {
    component_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_component_type(), 
      GetArenaForAllocation());
  }
  component_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_component_id().empty()) {
    component_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_component_id(), 
      GetArenaForAllocation());
  }
  node_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_ip_address().empty()) {
    node_ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_ip_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ProfileEvents)
}

inline void ProfileEvents::SharedCtor() {
component_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
component_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
node_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProfileEvents::~ProfileEvents() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ProfileEvents)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProfileEvents::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  component_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  component_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfileEvents::ArenaDtor(void* object) {
  ProfileEvents* _this = reinterpret_cast< ProfileEvents* >(object);
  (void)_this;
}
void ProfileEvents::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileEvents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProfileEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ProfileEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  component_type_.ClearToEmpty();
  component_id_.ClearToEmpty();
  node_ip_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileEvents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string component_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_component_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ProfileEvents.component_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes component_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_component_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_ip_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_node_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ProfileEvents.node_ip_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mcs.rpc.ProfileEventEntry events = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileEvents::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ProfileEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string component_type = 1;
  if (!this->_internal_component_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_type().data(), static_cast<int>(this->_internal_component_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ProfileEvents.component_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_component_type(), target);
  }

  // bytes component_id = 2;
  if (!this->_internal_component_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_component_id(), target);
  }

  // string node_ip_address = 3;
  if (!this->_internal_node_ip_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_ip_address().data(), static_cast<int>(this->_internal_node_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ProfileEvents.node_ip_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_node_ip_address(), target);
  }

  // repeated .mcs.rpc.ProfileEventEntry events = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ProfileEvents)
  return target;
}

size_t ProfileEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ProfileEvents)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mcs.rpc.ProfileEventEntry events = 4;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string component_type = 1;
  if (!this->_internal_component_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_type());
  }

  // bytes component_id = 2;
  if (!this->_internal_component_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_component_id());
  }

  // string node_ip_address = 3;
  if (!this->_internal_node_ip_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_ip_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProfileEvents::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProfileEvents::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProfileEvents::GetClassData() const { return &_class_data_; }

void ProfileEvents::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProfileEvents *>(to)->MergeFrom(
      static_cast<const ProfileEvents &>(from));
}


void ProfileEvents::MergeFrom(const ProfileEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ProfileEvents)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (!from._internal_component_type().empty()) {
    _internal_set_component_type(from._internal_component_type());
  }
  if (!from._internal_component_id().empty()) {
    _internal_set_component_id(from._internal_component_id());
  }
  if (!from._internal_node_ip_address().empty()) {
    _internal_set_node_ip_address(from._internal_node_ip_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProfileEvents::CopyFrom(const ProfileEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ProfileEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileEvents::IsInitialized() const {
  return true;
}

void ProfileEvents::InternalSwap(ProfileEvents* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &component_type_, GetArenaForAllocation(),
      &other->component_type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &component_id_, GetArenaForAllocation(),
      &other->component_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_ip_address_, GetArenaForAllocation(),
      &other->node_ip_address_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileEvents::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[8]);
}

// ===================================================================

class TaskStateUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<TaskStateUpdate>()._has_bits_);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pending_args_avail_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pending_node_assignment_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_submitted_to_worker_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_running_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_finished_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_failed_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

TaskStateUpdate::TaskStateUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.TaskStateUpdate)
}
TaskStateUpdate::TaskStateUpdate(const TaskStateUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_node_id()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pending_args_avail_ts_, &from.pending_args_avail_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&failed_ts_) -
    reinterpret_cast<char*>(&pending_args_avail_ts_)) + sizeof(failed_ts_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.TaskStateUpdate)
}

inline void TaskStateUpdate::SharedCtor() {
node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pending_args_avail_ts_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&failed_ts_) -
    reinterpret_cast<char*>(&pending_args_avail_ts_)) + sizeof(failed_ts_));
}

TaskStateUpdate::~TaskStateUpdate() {
  // @@protoc_insertion_point(destructor:mcs.rpc.TaskStateUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskStateUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskStateUpdate::ArenaDtor(void* object) {
  TaskStateUpdate* _this = reinterpret_cast< TaskStateUpdate* >(object);
  (void)_this;
}
void TaskStateUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskStateUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskStateUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.TaskStateUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    node_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&pending_args_avail_ts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&failed_ts_) -
        reinterpret_cast<char*>(&pending_args_avail_ts_)) + sizeof(failed_ts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskStateUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 pending_args_avail_ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pending_args_avail_ts(&has_bits);
          pending_args_avail_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 pending_node_assignment_ts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pending_node_assignment_ts(&has_bits);
          pending_node_assignment_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 submitted_to_worker_ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_submitted_to_worker_ts(&has_bits);
          submitted_to_worker_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 running_ts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_running_ts(&has_bits);
          running_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 finished_ts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_finished_ts(&has_bits);
          finished_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 failed_ts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_failed_ts(&has_bits);
          failed_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskStateUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.TaskStateUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bytes node_id = 1;
  if (_internal_has_node_id()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_node_id(), target);
  }

  // optional int64 pending_args_avail_ts = 2;
  if (_internal_has_pending_args_avail_ts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_pending_args_avail_ts(), target);
  }

  // optional int64 pending_node_assignment_ts = 3;
  if (_internal_has_pending_node_assignment_ts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_pending_node_assignment_ts(), target);
  }

  // optional int64 submitted_to_worker_ts = 4;
  if (_internal_has_submitted_to_worker_ts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_submitted_to_worker_ts(), target);
  }

  // optional int64 running_ts = 5;
  if (_internal_has_running_ts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_running_ts(), target);
  }

  // optional int64 finished_ts = 6;
  if (_internal_has_finished_ts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_finished_ts(), target);
  }

  // optional int64 failed_ts = 7;
  if (_internal_has_failed_ts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_failed_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.TaskStateUpdate)
  return target;
}

size_t TaskStateUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.TaskStateUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes node_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_node_id());
    }

    // optional int64 pending_args_avail_ts = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_pending_args_avail_ts());
    }

    // optional int64 pending_node_assignment_ts = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_pending_node_assignment_ts());
    }

    // optional int64 submitted_to_worker_ts = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_submitted_to_worker_ts());
    }

    // optional int64 running_ts = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_running_ts());
    }

    // optional int64 finished_ts = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_finished_ts());
    }

    // optional int64 failed_ts = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_failed_ts());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskStateUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskStateUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskStateUpdate::GetClassData() const { return &_class_data_; }

void TaskStateUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TaskStateUpdate *>(to)->MergeFrom(
      static_cast<const TaskStateUpdate &>(from));
}


void TaskStateUpdate::MergeFrom(const TaskStateUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.TaskStateUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_node_id(from._internal_node_id());
    }
    if (cached_has_bits & 0x00000002u) {
      pending_args_avail_ts_ = from.pending_args_avail_ts_;
    }
    if (cached_has_bits & 0x00000004u) {
      pending_node_assignment_ts_ = from.pending_node_assignment_ts_;
    }
    if (cached_has_bits & 0x00000008u) {
      submitted_to_worker_ts_ = from.submitted_to_worker_ts_;
    }
    if (cached_has_bits & 0x00000010u) {
      running_ts_ = from.running_ts_;
    }
    if (cached_has_bits & 0x00000020u) {
      finished_ts_ = from.finished_ts_;
    }
    if (cached_has_bits & 0x00000040u) {
      failed_ts_ = from.failed_ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskStateUpdate::CopyFrom(const TaskStateUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.TaskStateUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskStateUpdate::IsInitialized() const {
  return true;
}

void TaskStateUpdate::InternalSwap(TaskStateUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_id_, GetArenaForAllocation(),
      &other->node_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskStateUpdate, failed_ts_)
      + sizeof(TaskStateUpdate::failed_ts_)
      - PROTOBUF_FIELD_OFFSET(TaskStateUpdate, pending_args_avail_ts_)>(
          reinterpret_cast<char*>(&pending_args_avail_ts_),
          reinterpret_cast<char*>(&other->pending_args_avail_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskStateUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[9]);
}

// ===================================================================

class TaskEvents::_Internal {
 public:
  using HasBits = decltype(std::declval<TaskEvents>()._has_bits_);
  static const ::mcs::rpc::TaskInfoEntry& task_info(const TaskEvents* msg);
  static void set_has_task_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mcs::rpc::TaskStateUpdate& state_updates(const TaskEvents* msg);
  static void set_has_state_updates(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mcs::rpc::ProfileEvents& profile_events(const TaskEvents* msg);
  static void set_has_profile_events(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mcs::rpc::TaskInfoEntry&
TaskEvents::_Internal::task_info(const TaskEvents* msg) {
  return *msg->task_info_;
}
const ::mcs::rpc::TaskStateUpdate&
TaskEvents::_Internal::state_updates(const TaskEvents* msg) {
  return *msg->state_updates_;
}
const ::mcs::rpc::ProfileEvents&
TaskEvents::_Internal::profile_events(const TaskEvents* msg) {
  return *msg->profile_events_;
}
void TaskEvents::clear_task_info() {
  if (task_info_ != nullptr) task_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TaskEvents::TaskEvents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.TaskEvents)
}
TaskEvents::TaskEvents(const TaskEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_id().empty()) {
    task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_id(), 
      GetArenaForAllocation());
  }
  job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_job_id().empty()) {
    job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_job_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_task_info()) {
    task_info_ = new ::mcs::rpc::TaskInfoEntry(*from.task_info_);
  } else {
    task_info_ = nullptr;
  }
  if (from._internal_has_state_updates()) {
    state_updates_ = new ::mcs::rpc::TaskStateUpdate(*from.state_updates_);
  } else {
    state_updates_ = nullptr;
  }
  if (from._internal_has_profile_events()) {
    profile_events_ = new ::mcs::rpc::ProfileEvents(*from.profile_events_);
  } else {
    profile_events_ = nullptr;
  }
  attempt_number_ = from.attempt_number_;
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.TaskEvents)
}

inline void TaskEvents::SharedCtor() {
task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&task_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attempt_number_) -
    reinterpret_cast<char*>(&task_info_)) + sizeof(attempt_number_));
}

TaskEvents::~TaskEvents() {
  // @@protoc_insertion_point(destructor:mcs.rpc.TaskEvents)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskEvents::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  job_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete task_info_;
  if (this != internal_default_instance()) delete state_updates_;
  if (this != internal_default_instance()) delete profile_events_;
}

void TaskEvents::ArenaDtor(void* object) {
  TaskEvents* _this = reinterpret_cast< TaskEvents* >(object);
  (void)_this;
}
void TaskEvents::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskEvents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.TaskEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_id_.ClearToEmpty();
  job_id_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(task_info_ != nullptr);
      task_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(state_updates_ != nullptr);
      state_updates_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(profile_events_ != nullptr);
      profile_events_->Clear();
    }
  }
  attempt_number_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskEvents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attempt_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          attempt_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mcs.rpc.TaskInfoEntry task_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mcs.rpc.TaskStateUpdate state_updates = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_state_updates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mcs.rpc.ProfileEvents profile_events = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_profile_events(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes job_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_job_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskEvents::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.TaskEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes task_id = 1;
  if (!this->_internal_task_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_task_id(), target);
  }

  // int32 attempt_number = 2;
  if (this->_internal_attempt_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_attempt_number(), target);
  }

  // optional .mcs.rpc.TaskInfoEntry task_info = 3;
  if (_internal_has_task_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::task_info(this), target, stream);
  }

  // optional .mcs.rpc.TaskStateUpdate state_updates = 4;
  if (_internal_has_state_updates()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::state_updates(this), target, stream);
  }

  // optional .mcs.rpc.ProfileEvents profile_events = 5;
  if (_internal_has_profile_events()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::profile_events(this), target, stream);
  }

  // bytes job_id = 6;
  if (!this->_internal_job_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_job_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.TaskEvents)
  return target;
}

size_t TaskEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.TaskEvents)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes task_id = 1;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_task_id());
  }

  // bytes job_id = 6;
  if (!this->_internal_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_job_id());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .mcs.rpc.TaskInfoEntry task_info = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_info_);
    }

    // optional .mcs.rpc.TaskStateUpdate state_updates = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *state_updates_);
    }

    // optional .mcs.rpc.ProfileEvents profile_events = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *profile_events_);
    }

  }
  // int32 attempt_number = 2;
  if (this->_internal_attempt_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attempt_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskEvents::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskEvents::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskEvents::GetClassData() const { return &_class_data_; }

void TaskEvents::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TaskEvents *>(to)->MergeFrom(
      static_cast<const TaskEvents &>(from));
}


void TaskEvents::MergeFrom(const TaskEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.TaskEvents)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_task_id().empty()) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (!from._internal_job_id().empty()) {
    _internal_set_job_id(from._internal_job_id());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_task_info()->::mcs::rpc::TaskInfoEntry::MergeFrom(from._internal_task_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_state_updates()->::mcs::rpc::TaskStateUpdate::MergeFrom(from._internal_state_updates());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_profile_events()->::mcs::rpc::ProfileEvents::MergeFrom(from._internal_profile_events());
    }
  }
  if (from._internal_attempt_number() != 0) {
    _internal_set_attempt_number(from._internal_attempt_number());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskEvents::CopyFrom(const TaskEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.TaskEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskEvents::IsInitialized() const {
  return true;
}

void TaskEvents::InternalSwap(TaskEvents* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &task_id_, GetArenaForAllocation(),
      &other->task_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &job_id_, GetArenaForAllocation(),
      &other->job_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskEvents, attempt_number_)
      + sizeof(TaskEvents::attempt_number_)
      - PROTOBUF_FIELD_OFFSET(TaskEvents, task_info_)>(
          reinterpret_cast<char*>(&task_info_),
          reinterpret_cast<char*>(&other->task_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskEvents::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[10]);
}

// ===================================================================

class TaskEventData::_Internal {
 public:
};

TaskEventData::TaskEventData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  events_by_task_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.TaskEventData)
}
TaskEventData::TaskEventData(const TaskEventData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_by_task_(from.events_by_task_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_profile_task_events_dropped_, &from.num_profile_task_events_dropped_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_status_task_events_dropped_) -
    reinterpret_cast<char*>(&num_profile_task_events_dropped_)) + sizeof(num_status_task_events_dropped_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.TaskEventData)
}

inline void TaskEventData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_profile_task_events_dropped_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_status_task_events_dropped_) -
    reinterpret_cast<char*>(&num_profile_task_events_dropped_)) + sizeof(num_status_task_events_dropped_));
}

TaskEventData::~TaskEventData() {
  // @@protoc_insertion_point(destructor:mcs.rpc.TaskEventData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskEventData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TaskEventData::ArenaDtor(void* object) {
  TaskEventData* _this = reinterpret_cast< TaskEventData* >(object);
  (void)_this;
}
void TaskEventData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskEventData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskEventData::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.TaskEventData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_by_task_.Clear();
  ::memset(&num_profile_task_events_dropped_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_status_task_events_dropped_) -
      reinterpret_cast<char*>(&num_profile_task_events_dropped_)) + sizeof(num_status_task_events_dropped_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskEventData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mcs.rpc.TaskEvents events_by_task = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events_by_task(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 num_profile_task_events_dropped = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_profile_task_events_dropped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_status_task_events_dropped = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_status_task_events_dropped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskEventData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.TaskEventData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mcs.rpc.TaskEvents events_by_task = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_by_task_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_events_by_task(i), target, stream);
  }

  // int32 num_profile_task_events_dropped = 3;
  if (this->_internal_num_profile_task_events_dropped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_profile_task_events_dropped(), target);
  }

  // int32 num_status_task_events_dropped = 4;
  if (this->_internal_num_status_task_events_dropped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_num_status_task_events_dropped(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.TaskEventData)
  return target;
}

size_t TaskEventData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.TaskEventData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mcs.rpc.TaskEvents events_by_task = 1;
  total_size += 1UL * this->_internal_events_by_task_size();
  for (const auto& msg : this->events_by_task_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 num_profile_task_events_dropped = 3;
  if (this->_internal_num_profile_task_events_dropped() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_profile_task_events_dropped());
  }

  // int32 num_status_task_events_dropped = 4;
  if (this->_internal_num_status_task_events_dropped() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_status_task_events_dropped());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskEventData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskEventData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskEventData::GetClassData() const { return &_class_data_; }

void TaskEventData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TaskEventData *>(to)->MergeFrom(
      static_cast<const TaskEventData &>(from));
}


void TaskEventData::MergeFrom(const TaskEventData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.TaskEventData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_by_task_.MergeFrom(from.events_by_task_);
  if (from._internal_num_profile_task_events_dropped() != 0) {
    _internal_set_num_profile_task_events_dropped(from._internal_num_profile_task_events_dropped());
  }
  if (from._internal_num_status_task_events_dropped() != 0) {
    _internal_set_num_status_task_events_dropped(from._internal_num_status_task_events_dropped());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskEventData::CopyFrom(const TaskEventData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.TaskEventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskEventData::IsInitialized() const {
  return true;
}

void TaskEventData::InternalSwap(TaskEventData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  events_by_task_.InternalSwap(&other->events_by_task_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskEventData, num_status_task_events_dropped_)
      + sizeof(TaskEventData::num_status_task_events_dropped_)
      - PROTOBUF_FIELD_OFFSET(TaskEventData, num_profile_task_events_dropped_)>(
          reinterpret_cast<char*>(&num_profile_task_events_dropped_),
          reinterpret_cast<char*>(&other->num_profile_task_events_dropped_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskEventData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[11]);
}

// ===================================================================

class ResourceTableData::_Internal {
 public:
};

ResourceTableData::ResourceTableData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ResourceTableData)
}
ResourceTableData::ResourceTableData(const ResourceTableData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  resource_capacity_ = from.resource_capacity_;
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ResourceTableData)
}

inline void ResourceTableData::SharedCtor() {
resource_capacity_ = 0;
}

ResourceTableData::~ResourceTableData() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ResourceTableData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResourceTableData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResourceTableData::ArenaDtor(void* object) {
  ResourceTableData* _this = reinterpret_cast< ResourceTableData* >(object);
  (void)_this;
}
void ResourceTableData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceTableData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResourceTableData::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ResourceTableData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_capacity_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceTableData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double resource_capacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          resource_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceTableData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ResourceTableData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double resource_capacity = 1;
  if (!(this->_internal_resource_capacity() <= 0 && this->_internal_resource_capacity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_resource_capacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ResourceTableData)
  return target;
}

size_t ResourceTableData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ResourceTableData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double resource_capacity = 1;
  if (!(this->_internal_resource_capacity() <= 0 && this->_internal_resource_capacity() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceTableData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResourceTableData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceTableData::GetClassData() const { return &_class_data_; }

void ResourceTableData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ResourceTableData *>(to)->MergeFrom(
      static_cast<const ResourceTableData &>(from));
}


void ResourceTableData::MergeFrom(const ResourceTableData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ResourceTableData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_resource_capacity() <= 0 && from._internal_resource_capacity() >= 0)) {
    _internal_set_resource_capacity(from._internal_resource_capacity());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceTableData::CopyFrom(const ResourceTableData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ResourceTableData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceTableData::IsInitialized() const {
  return true;
}

void ResourceTableData::InternalSwap(ResourceTableData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(resource_capacity_, other->resource_capacity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceTableData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[12]);
}

// ===================================================================

AvailableResources_ResourcesAvailableEntry_DoNotUse::AvailableResources_ResourcesAvailableEntry_DoNotUse() {}
AvailableResources_ResourcesAvailableEntry_DoNotUse::AvailableResources_ResourcesAvailableEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AvailableResources_ResourcesAvailableEntry_DoNotUse::MergeFrom(const AvailableResources_ResourcesAvailableEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AvailableResources_ResourcesAvailableEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[13]);
}

// ===================================================================

class AvailableResources::_Internal {
 public:
};

AvailableResources::AvailableResources(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  resources_available_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.AvailableResources)
}
AvailableResources::AvailableResources(const AvailableResources& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  resources_available_.MergeFrom(from.resources_available_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.AvailableResources)
}

inline void AvailableResources::SharedCtor() {
node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AvailableResources::~AvailableResources() {
  // @@protoc_insertion_point(destructor:mcs.rpc.AvailableResources)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AvailableResources::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AvailableResources::ArenaDtor(void* object) {
  AvailableResources* _this = reinterpret_cast< AvailableResources* >(object);
  (void)_this;
  _this->resources_available_. ~MapField();
}
inline void AvailableResources::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &AvailableResources::ArenaDtor);
  }
}
void AvailableResources::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AvailableResources::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.AvailableResources)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resources_available_.Clear();
  node_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AvailableResources::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, double> resources_available = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&resources_available_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AvailableResources::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.AvailableResources)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes node_id = 1;
  if (!this->_internal_node_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_node_id(), target);
  }

  // map<string, double> resources_available = 2;
  if (!this->_internal_resources_available().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mcs.rpc.AvailableResources.ResourcesAvailableEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_resources_available().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_resources_available().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_resources_available().begin();
          it != this->_internal_resources_available().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AvailableResources_ResourcesAvailableEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_resources_available().begin();
          it != this->_internal_resources_available().end(); ++it) {
        target = AvailableResources_ResourcesAvailableEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.AvailableResources)
  return target;
}

size_t AvailableResources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.AvailableResources)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, double> resources_available = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_resources_available_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_resources_available().begin();
      it != this->_internal_resources_available().end(); ++it) {
    total_size += AvailableResources_ResourcesAvailableEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes node_id = 1;
  if (!this->_internal_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AvailableResources::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AvailableResources::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AvailableResources::GetClassData() const { return &_class_data_; }

void AvailableResources::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AvailableResources *>(to)->MergeFrom(
      static_cast<const AvailableResources &>(from));
}


void AvailableResources::MergeFrom(const AvailableResources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.AvailableResources)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resources_available_.MergeFrom(from.resources_available_);
  if (!from._internal_node_id().empty()) {
    _internal_set_node_id(from._internal_node_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AvailableResources::CopyFrom(const AvailableResources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.AvailableResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvailableResources::IsInitialized() const {
  return true;
}

void AvailableResources::InternalSwap(AvailableResources* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  resources_available_.InternalSwap(&other->resources_available_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_id_, GetArenaForAllocation(),
      &other->node_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AvailableResources::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[14]);
}

// ===================================================================

GcsNodeInfo_ResourcesTotalEntry_DoNotUse::GcsNodeInfo_ResourcesTotalEntry_DoNotUse() {}
GcsNodeInfo_ResourcesTotalEntry_DoNotUse::GcsNodeInfo_ResourcesTotalEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GcsNodeInfo_ResourcesTotalEntry_DoNotUse::MergeFrom(const GcsNodeInfo_ResourcesTotalEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GcsNodeInfo_ResourcesTotalEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[15]);
}

// ===================================================================

class GcsNodeInfo::_Internal {
 public:
};

GcsNodeInfo::GcsNodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  resources_total_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.GcsNodeInfo)
}
GcsNodeInfo::GcsNodeInfo(const GcsNodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  resources_total_.MergeFrom(from.resources_total_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(), 
      GetArenaForAllocation());
  }
  node_manager_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_manager_address().empty()) {
    node_manager_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_manager_address(), 
      GetArenaForAllocation());
  }
  mcslet_socket_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mcslet_socket_name().empty()) {
    mcslet_socket_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mcslet_socket_name(), 
      GetArenaForAllocation());
  }
  object_store_socket_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_object_store_socket_name().empty()) {
    object_store_socket_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_object_store_socket_name(), 
      GetArenaForAllocation());
  }
  node_manager_hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_manager_hostname().empty()) {
    node_manager_hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_manager_hostname(), 
      GetArenaForAllocation());
  }
  node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_name().empty()) {
    node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&node_manager_port_, &from.node_manager_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&node_manager_port_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.GcsNodeInfo)
}

inline void GcsNodeInfo::SharedCtor() {
node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
node_manager_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mcslet_socket_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
object_store_socket_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
node_manager_hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&node_manager_port_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&node_manager_port_)) + sizeof(timestamp_));
}

GcsNodeInfo::~GcsNodeInfo() {
  // @@protoc_insertion_point(destructor:mcs.rpc.GcsNodeInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GcsNodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_manager_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mcslet_socket_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  object_store_socket_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_manager_hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GcsNodeInfo::ArenaDtor(void* object) {
  GcsNodeInfo* _this = reinterpret_cast< GcsNodeInfo* >(object);
  (void)_this;
  _this->resources_total_. ~MapField();
}
inline void GcsNodeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &GcsNodeInfo::ArenaDtor);
  }
}
void GcsNodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GcsNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.GcsNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resources_total_.Clear();
  node_id_.ClearToEmpty();
  node_manager_address_.ClearToEmpty();
  mcslet_socket_name_.ClearToEmpty();
  object_store_socket_name_.ClearToEmpty();
  node_manager_hostname_.ClearToEmpty();
  node_name_.ClearToEmpty();
  ::memset(&node_manager_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&node_manager_port_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GcsNodeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_manager_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_node_manager_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.GcsNodeInfo.node_manager_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mcslet_socket_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mcslet_socket_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.GcsNodeInfo.mcslet_socket_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string object_store_socket_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_object_store_socket_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.GcsNodeInfo.object_store_socket_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 node_manager_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          node_manager_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 object_manager_port = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          object_manager_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.GcsNodeInfo.GcsNodeState state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::mcs::rpc::GcsNodeInfo_GcsNodeState>(val));
        } else goto handle_unusual;
        continue;
      // string node_manager_hostname = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_node_manager_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.GcsNodeInfo.node_manager_hostname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 metrics_export_port = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          metrics_export_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, double> resources_total = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&resources_total_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // string node_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_node_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.GcsNodeInfo.node_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GcsNodeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.GcsNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes node_id = 1;
  if (!this->_internal_node_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_node_id(), target);
  }

  // string node_manager_address = 2;
  if (!this->_internal_node_manager_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_manager_address().data(), static_cast<int>(this->_internal_node_manager_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.GcsNodeInfo.node_manager_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_manager_address(), target);
  }

  // string mcslet_socket_name = 3;
  if (!this->_internal_mcslet_socket_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mcslet_socket_name().data(), static_cast<int>(this->_internal_mcslet_socket_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.GcsNodeInfo.mcslet_socket_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mcslet_socket_name(), target);
  }

  // string object_store_socket_name = 4;
  if (!this->_internal_object_store_socket_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_object_store_socket_name().data(), static_cast<int>(this->_internal_object_store_socket_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.GcsNodeInfo.object_store_socket_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_object_store_socket_name(), target);
  }

  // int32 node_manager_port = 5;
  if (this->_internal_node_manager_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_node_manager_port(), target);
  }

  // int32 object_manager_port = 6;
  if (this->_internal_object_manager_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_object_manager_port(), target);
  }

  // .mcs.rpc.GcsNodeInfo.GcsNodeState state = 7;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_state(), target);
  }

  // string node_manager_hostname = 8;
  if (!this->_internal_node_manager_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_manager_hostname().data(), static_cast<int>(this->_internal_node_manager_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.GcsNodeInfo.node_manager_hostname");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_node_manager_hostname(), target);
  }

  // int32 metrics_export_port = 9;
  if (this->_internal_metrics_export_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_metrics_export_port(), target);
  }

  // int64 timestamp = 10;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_timestamp(), target);
  }

  // map<string, double> resources_total = 11;
  if (!this->_internal_resources_total().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mcs.rpc.GcsNodeInfo.ResourcesTotalEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_resources_total().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_resources_total().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_resources_total().begin();
          it != this->_internal_resources_total().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GcsNodeInfo_ResourcesTotalEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_resources_total().begin();
          it != this->_internal_resources_total().end(); ++it) {
        target = GcsNodeInfo_ResourcesTotalEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string node_name = 12;
  if (!this->_internal_node_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_name().data(), static_cast<int>(this->_internal_node_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.GcsNodeInfo.node_name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_node_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.GcsNodeInfo)
  return target;
}

size_t GcsNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.GcsNodeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, double> resources_total = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_resources_total_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_resources_total().begin();
      it != this->_internal_resources_total().end(); ++it) {
    total_size += GcsNodeInfo_ResourcesTotalEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes node_id = 1;
  if (!this->_internal_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_node_id());
  }

  // string node_manager_address = 2;
  if (!this->_internal_node_manager_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_manager_address());
  }

  // string mcslet_socket_name = 3;
  if (!this->_internal_mcslet_socket_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mcslet_socket_name());
  }

  // string object_store_socket_name = 4;
  if (!this->_internal_object_store_socket_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_object_store_socket_name());
  }

  // string node_manager_hostname = 8;
  if (!this->_internal_node_manager_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_manager_hostname());
  }

  // string node_name = 12;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_name());
  }

  // int32 node_manager_port = 5;
  if (this->_internal_node_manager_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_manager_port());
  }

  // int32 object_manager_port = 6;
  if (this->_internal_object_manager_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_object_manager_port());
  }

  // .mcs.rpc.GcsNodeInfo.GcsNodeState state = 7;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // int32 metrics_export_port = 9;
  if (this->_internal_metrics_export_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_metrics_export_port());
  }

  // int64 timestamp = 10;
  if (this->_internal_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GcsNodeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GcsNodeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GcsNodeInfo::GetClassData() const { return &_class_data_; }

void GcsNodeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GcsNodeInfo *>(to)->MergeFrom(
      static_cast<const GcsNodeInfo &>(from));
}


void GcsNodeInfo::MergeFrom(const GcsNodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.GcsNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resources_total_.MergeFrom(from.resources_total_);
  if (!from._internal_node_id().empty()) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (!from._internal_node_manager_address().empty()) {
    _internal_set_node_manager_address(from._internal_node_manager_address());
  }
  if (!from._internal_mcslet_socket_name().empty()) {
    _internal_set_mcslet_socket_name(from._internal_mcslet_socket_name());
  }
  if (!from._internal_object_store_socket_name().empty()) {
    _internal_set_object_store_socket_name(from._internal_object_store_socket_name());
  }
  if (!from._internal_node_manager_hostname().empty()) {
    _internal_set_node_manager_hostname(from._internal_node_manager_hostname());
  }
  if (!from._internal_node_name().empty()) {
    _internal_set_node_name(from._internal_node_name());
  }
  if (from._internal_node_manager_port() != 0) {
    _internal_set_node_manager_port(from._internal_node_manager_port());
  }
  if (from._internal_object_manager_port() != 0) {
    _internal_set_object_manager_port(from._internal_object_manager_port());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from._internal_metrics_export_port() != 0) {
    _internal_set_metrics_export_port(from._internal_metrics_export_port());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GcsNodeInfo::CopyFrom(const GcsNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.GcsNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcsNodeInfo::IsInitialized() const {
  return true;
}

void GcsNodeInfo::InternalSwap(GcsNodeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  resources_total_.InternalSwap(&other->resources_total_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_id_, GetArenaForAllocation(),
      &other->node_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_manager_address_, GetArenaForAllocation(),
      &other->node_manager_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mcslet_socket_name_, GetArenaForAllocation(),
      &other->mcslet_socket_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &object_store_socket_name_, GetArenaForAllocation(),
      &other->object_store_socket_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_manager_hostname_, GetArenaForAllocation(),
      &other->node_manager_hostname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_name_, GetArenaForAllocation(),
      &other->node_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GcsNodeInfo, timestamp_)
      + sizeof(GcsNodeInfo::timestamp_)
      - PROTOBUF_FIELD_OFFSET(GcsNodeInfo, node_manager_port_)>(
          reinterpret_cast<char*>(&node_manager_port_),
          reinterpret_cast<char*>(&other->node_manager_port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GcsNodeInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[16]);
}

// ===================================================================

class HeartbeatTableData::_Internal {
 public:
};

HeartbeatTableData::HeartbeatTableData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.HeartbeatTableData)
}
HeartbeatTableData::HeartbeatTableData(const HeartbeatTableData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.HeartbeatTableData)
}

inline void HeartbeatTableData::SharedCtor() {
node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HeartbeatTableData::~HeartbeatTableData() {
  // @@protoc_insertion_point(destructor:mcs.rpc.HeartbeatTableData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HeartbeatTableData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HeartbeatTableData::ArenaDtor(void* object) {
  HeartbeatTableData* _this = reinterpret_cast< HeartbeatTableData* >(object);
  (void)_this;
}
void HeartbeatTableData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeartbeatTableData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeartbeatTableData::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.HeartbeatTableData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatTableData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeartbeatTableData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.HeartbeatTableData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes node_id = 1;
  if (!this->_internal_node_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.HeartbeatTableData)
  return target;
}

size_t HeartbeatTableData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.HeartbeatTableData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes node_id = 1;
  if (!this->_internal_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartbeatTableData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeartbeatTableData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartbeatTableData::GetClassData() const { return &_class_data_; }

void HeartbeatTableData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HeartbeatTableData *>(to)->MergeFrom(
      static_cast<const HeartbeatTableData &>(from));
}


void HeartbeatTableData::MergeFrom(const HeartbeatTableData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.HeartbeatTableData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_id().empty()) {
    _internal_set_node_id(from._internal_node_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartbeatTableData::CopyFrom(const HeartbeatTableData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.HeartbeatTableData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatTableData::IsInitialized() const {
  return true;
}

void HeartbeatTableData::InternalSwap(HeartbeatTableData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_id_, GetArenaForAllocation(),
      &other->node_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatTableData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[17]);
}

// ===================================================================

JobConfig_MetadataEntry_DoNotUse::JobConfig_MetadataEntry_DoNotUse() {}
JobConfig_MetadataEntry_DoNotUse::JobConfig_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void JobConfig_MetadataEntry_DoNotUse::MergeFrom(const JobConfig_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata JobConfig_MetadataEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[18]);
}

// ===================================================================

class JobConfig::_Internal {
 public:
  static const ::mcs::rpc::RuntimeEnvInfo& runtime_env_info(const JobConfig* msg);
};

const ::mcs::rpc::RuntimeEnvInfo&
JobConfig::_Internal::runtime_env_info(const JobConfig* msg) {
  return *msg->runtime_env_info_;
}
void JobConfig::clear_runtime_env_info() {
  if (GetArenaForAllocation() == nullptr && runtime_env_info_ != nullptr) {
    delete runtime_env_info_;
  }
  runtime_env_info_ = nullptr;
}
JobConfig::JobConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  jvm_options_(arena),
  code_search_path_(arena),
  metadata_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.JobConfig)
}
JobConfig::JobConfig(const JobConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      jvm_options_(from.jvm_options_),
      code_search_path_(from.code_search_path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  mcs_namespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mcs_namespace().empty()) {
    mcs_namespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mcs_namespace(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_runtime_env_info()) {
    runtime_env_info_ = new ::mcs::rpc::RuntimeEnvInfo(*from.runtime_env_info_);
  } else {
    runtime_env_info_ = nullptr;
  }
  default_actor_lifetime_ = from.default_actor_lifetime_;
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.JobConfig)
}

inline void JobConfig::SharedCtor() {
mcs_namespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&runtime_env_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&default_actor_lifetime_) -
    reinterpret_cast<char*>(&runtime_env_info_)) + sizeof(default_actor_lifetime_));
}

JobConfig::~JobConfig() {
  // @@protoc_insertion_point(destructor:mcs.rpc.JobConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JobConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mcs_namespace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete runtime_env_info_;
}

void JobConfig::ArenaDtor(void* object) {
  JobConfig* _this = reinterpret_cast< JobConfig* >(object);
  (void)_this;
  _this->metadata_. ~MapField();
}
inline void JobConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &JobConfig::ArenaDtor);
  }
}
void JobConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JobConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.JobConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jvm_options_.Clear();
  code_search_path_.Clear();
  metadata_.Clear();
  mcs_namespace_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && runtime_env_info_ != nullptr) {
    delete runtime_env_info_;
  }
  runtime_env_info_ = nullptr;
  default_actor_lifetime_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JobConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string jvm_options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_jvm_options();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.JobConfig.jvm_options"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string code_search_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_code_search_path();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.JobConfig.code_search_path"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.RuntimeEnvInfo runtime_env_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_runtime_env_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mcs_namespace = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_mcs_namespace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.JobConfig.mcs_namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.JobConfig.ActorLifetime default_actor_lifetime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_default_actor_lifetime(static_cast<::mcs::rpc::JobConfig_ActorLifetime>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JobConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.JobConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string jvm_options = 2;
  for (int i = 0, n = this->_internal_jvm_options_size(); i < n; i++) {
    const auto& s = this->_internal_jvm_options(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.JobConfig.jvm_options");
    target = stream->WriteString(2, s, target);
  }

  // repeated string code_search_path = 3;
  for (int i = 0, n = this->_internal_code_search_path_size(); i < n; i++) {
    const auto& s = this->_internal_code_search_path(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.JobConfig.code_search_path");
    target = stream->WriteString(3, s, target);
  }

  // .mcs.rpc.RuntimeEnvInfo runtime_env_info = 4;
  if (this->_internal_has_runtime_env_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::runtime_env_info(this), target, stream);
  }

  // string mcs_namespace = 5;
  if (!this->_internal_mcs_namespace().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mcs_namespace().data(), static_cast<int>(this->_internal_mcs_namespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.JobConfig.mcs_namespace");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mcs_namespace(), target);
  }

  // map<string, string> metadata = 6;
  if (!this->_internal_metadata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mcs.rpc.JobConfig.MetadataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mcs.rpc.JobConfig.MetadataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metadata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = JobConfig_MetadataEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it) {
        target = JobConfig_MetadataEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .mcs.rpc.JobConfig.ActorLifetime default_actor_lifetime = 7;
  if (this->_internal_default_actor_lifetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_default_actor_lifetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.JobConfig)
  return target;
}

size_t JobConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.JobConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string jvm_options = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(jvm_options_.size());
  for (int i = 0, n = jvm_options_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      jvm_options_.Get(i));
  }

  // repeated string code_search_path = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(code_search_path_.size());
  for (int i = 0, n = code_search_path_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      code_search_path_.Get(i));
  }

  // map<string, string> metadata = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += JobConfig_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string mcs_namespace = 5;
  if (!this->_internal_mcs_namespace().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mcs_namespace());
  }

  // .mcs.rpc.RuntimeEnvInfo runtime_env_info = 4;
  if (this->_internal_has_runtime_env_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *runtime_env_info_);
  }

  // .mcs.rpc.JobConfig.ActorLifetime default_actor_lifetime = 7;
  if (this->_internal_default_actor_lifetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_default_actor_lifetime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JobConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JobConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JobConfig::GetClassData() const { return &_class_data_; }

void JobConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<JobConfig *>(to)->MergeFrom(
      static_cast<const JobConfig &>(from));
}


void JobConfig::MergeFrom(const JobConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.JobConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jvm_options_.MergeFrom(from.jvm_options_);
  code_search_path_.MergeFrom(from.code_search_path_);
  metadata_.MergeFrom(from.metadata_);
  if (!from._internal_mcs_namespace().empty()) {
    _internal_set_mcs_namespace(from._internal_mcs_namespace());
  }
  if (from._internal_has_runtime_env_info()) {
    _internal_mutable_runtime_env_info()->::mcs::rpc::RuntimeEnvInfo::MergeFrom(from._internal_runtime_env_info());
  }
  if (from._internal_default_actor_lifetime() != 0) {
    _internal_set_default_actor_lifetime(from._internal_default_actor_lifetime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JobConfig::CopyFrom(const JobConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.JobConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobConfig::IsInitialized() const {
  return true;
}

void JobConfig::InternalSwap(JobConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  jvm_options_.InternalSwap(&other->jvm_options_);
  code_search_path_.InternalSwap(&other->code_search_path_);
  metadata_.InternalSwap(&other->metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mcs_namespace_, GetArenaForAllocation(),
      &other->mcs_namespace_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JobConfig, default_actor_lifetime_)
      + sizeof(JobConfig::default_actor_lifetime_)
      - PROTOBUF_FIELD_OFFSET(JobConfig, runtime_env_info_)>(
          reinterpret_cast<char*>(&runtime_env_info_),
          reinterpret_cast<char*>(&other->runtime_env_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JobConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[19]);
}

// ===================================================================

class JobTableData::_Internal {
 public:
  static const ::mcs::rpc::JobConfig& config(const JobTableData* msg);
};

const ::mcs::rpc::JobConfig&
JobTableData::_Internal::config(const JobTableData* msg) {
  return *msg->config_;
}
JobTableData::JobTableData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.JobTableData)
}
JobTableData::JobTableData(const JobTableData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_job_id().empty()) {
    job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_job_id(), 
      GetArenaForAllocation());
  }
  driver_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_driver_ip_address().empty()) {
    driver_ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_driver_ip_address(), 
      GetArenaForAllocation());
  }
  entrypoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entrypoint().empty()) {
    entrypoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_entrypoint(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_config()) {
    config_ = new ::mcs::rpc::JobConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_dead_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(is_dead_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.JobTableData)
}

inline void JobTableData::SharedCtor() {
job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
driver_ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
entrypoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_dead_) -
    reinterpret_cast<char*>(&config_)) + sizeof(is_dead_));
}

JobTableData::~JobTableData() {
  // @@protoc_insertion_point(destructor:mcs.rpc.JobTableData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JobTableData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  job_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  driver_ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entrypoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_;
}

void JobTableData::ArenaDtor(void* object) {
  JobTableData* _this = reinterpret_cast< JobTableData* >(object);
  (void)_this;
}
void JobTableData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JobTableData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JobTableData::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.JobTableData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  job_id_.ClearToEmpty();
  driver_ip_address_.ClearToEmpty();
  entrypoint_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_dead_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(is_dead_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JobTableData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_job_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_dead = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_dead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string driver_ip_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_driver_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.JobTableData.driver_ip_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 driver_pid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          driver_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.JobConfig config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 end_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string entrypoint = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_entrypoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.JobTableData.entrypoint"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JobTableData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.JobTableData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes job_id = 1;
  if (!this->_internal_job_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_job_id(), target);
  }

  // bool is_dead = 2;
  if (this->_internal_is_dead() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_dead(), target);
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // string driver_ip_address = 4;
  if (!this->_internal_driver_ip_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_driver_ip_address().data(), static_cast<int>(this->_internal_driver_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.JobTableData.driver_ip_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_driver_ip_address(), target);
  }

  // int64 driver_pid = 5;
  if (this->_internal_driver_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_driver_pid(), target);
  }

  // .mcs.rpc.JobConfig config = 6;
  if (this->_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::config(this), target, stream);
  }

  // uint64 start_time = 7;
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_start_time(), target);
  }

  // uint64 end_time = 8;
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_end_time(), target);
  }

  // string entrypoint = 9;
  if (!this->_internal_entrypoint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entrypoint().data(), static_cast<int>(this->_internal_entrypoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.JobTableData.entrypoint");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_entrypoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.JobTableData)
  return target;
}

size_t JobTableData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.JobTableData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes job_id = 1;
  if (!this->_internal_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_job_id());
  }

  // string driver_ip_address = 4;
  if (!this->_internal_driver_ip_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_driver_ip_address());
  }

  // string entrypoint = 9;
  if (!this->_internal_entrypoint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entrypoint());
  }

  // .mcs.rpc.JobConfig config = 6;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // int64 driver_pid = 5;
  if (this->_internal_driver_pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_driver_pid());
  }

  // uint64 start_time = 7;
  if (this->_internal_start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start_time());
  }

  // uint64 end_time = 8;
  if (this->_internal_end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_end_time());
  }

  // bool is_dead = 2;
  if (this->_internal_is_dead() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JobTableData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JobTableData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JobTableData::GetClassData() const { return &_class_data_; }

void JobTableData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<JobTableData *>(to)->MergeFrom(
      static_cast<const JobTableData &>(from));
}


void JobTableData::MergeFrom(const JobTableData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.JobTableData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_job_id().empty()) {
    _internal_set_job_id(from._internal_job_id());
  }
  if (!from._internal_driver_ip_address().empty()) {
    _internal_set_driver_ip_address(from._internal_driver_ip_address());
  }
  if (!from._internal_entrypoint().empty()) {
    _internal_set_entrypoint(from._internal_entrypoint());
  }
  if (from._internal_has_config()) {
    _internal_mutable_config()->::mcs::rpc::JobConfig::MergeFrom(from._internal_config());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_driver_pid() != 0) {
    _internal_set_driver_pid(from._internal_driver_pid());
  }
  if (from._internal_start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  if (from._internal_is_dead() != 0) {
    _internal_set_is_dead(from._internal_is_dead());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JobTableData::CopyFrom(const JobTableData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.JobTableData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobTableData::IsInitialized() const {
  return true;
}

void JobTableData::InternalSwap(JobTableData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &job_id_, GetArenaForAllocation(),
      &other->job_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &driver_ip_address_, GetArenaForAllocation(),
      &other->driver_ip_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &entrypoint_, GetArenaForAllocation(),
      &other->entrypoint_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JobTableData, is_dead_)
      + sizeof(JobTableData::is_dead_)
      - PROTOBUF_FIELD_OFFSET(JobTableData, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JobTableData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[20]);
}

// ===================================================================

WorkerTableData_WorkerInfoEntry_DoNotUse::WorkerTableData_WorkerInfoEntry_DoNotUse() {}
WorkerTableData_WorkerInfoEntry_DoNotUse::WorkerTableData_WorkerInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void WorkerTableData_WorkerInfoEntry_DoNotUse::MergeFrom(const WorkerTableData_WorkerInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata WorkerTableData_WorkerInfoEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[21]);
}

// ===================================================================

class WorkerTableData::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkerTableData>()._has_bits_);
  static const ::mcs::rpc::Address& worker_address(const WorkerTableData* msg);
  static const ::mcs::rpc::McsException& creation_task_exception(const WorkerTableData* msg);
  static void set_has_exit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_exit_detail(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mcs::rpc::Address&
WorkerTableData::_Internal::worker_address(const WorkerTableData* msg) {
  return *msg->worker_address_;
}
const ::mcs::rpc::McsException&
WorkerTableData::_Internal::creation_task_exception(const WorkerTableData* msg) {
  return *msg->creation_task_exception_;
}
void WorkerTableData::clear_worker_address() {
  if (GetArenaForAllocation() == nullptr && worker_address_ != nullptr) {
    delete worker_address_;
  }
  worker_address_ = nullptr;
}
void WorkerTableData::clear_creation_task_exception() {
  if (GetArenaForAllocation() == nullptr && creation_task_exception_ != nullptr) {
    delete creation_task_exception_;
  }
  creation_task_exception_ = nullptr;
}
WorkerTableData::WorkerTableData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  worker_info_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.WorkerTableData)
}
WorkerTableData::WorkerTableData(const WorkerTableData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  worker_info_.MergeFrom(from.worker_info_);
  exit_detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_exit_detail()) {
    exit_detail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exit_detail(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_worker_address()) {
    worker_address_ = new ::mcs::rpc::Address(*from.worker_address_);
  } else {
    worker_address_ = nullptr;
  }
  if (from._internal_has_creation_task_exception()) {
    creation_task_exception_ = new ::mcs::rpc::McsException(*from.creation_task_exception_);
  } else {
    creation_task_exception_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&pid_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(pid_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.WorkerTableData)
}

inline void WorkerTableData::SharedCtor() {
exit_detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&worker_address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pid_) -
    reinterpret_cast<char*>(&worker_address_)) + sizeof(pid_));
}

WorkerTableData::~WorkerTableData() {
  // @@protoc_insertion_point(destructor:mcs.rpc.WorkerTableData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkerTableData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  exit_detail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete worker_address_;
  if (this != internal_default_instance()) delete creation_task_exception_;
}

void WorkerTableData::ArenaDtor(void* object) {
  WorkerTableData* _this = reinterpret_cast< WorkerTableData* >(object);
  (void)_this;
  _this->worker_info_. ~MapField();
}
inline void WorkerTableData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &WorkerTableData::ArenaDtor);
  }
}
void WorkerTableData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkerTableData::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.WorkerTableData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worker_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    exit_detail_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && worker_address_ != nullptr) {
    delete worker_address_;
  }
  worker_address_ = nullptr;
  if (GetArenaForAllocation() == nullptr && creation_task_exception_ != nullptr) {
    delete creation_task_exception_;
  }
  creation_task_exception_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&worker_type_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(worker_type_));
  exit_type_ = 0;
  pid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerTableData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_alive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_alive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.Address worker_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_worker_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.WorkerType worker_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_worker_type(static_cast<::mcs::rpc::WorkerType>(val));
        } else goto handle_unusual;
        continue;
      // map<string, bytes> worker_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&worker_info_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.McsException creation_task_exception = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_creation_task_exception(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mcs.rpc.WorkerExitType exit_type = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_exit_type(static_cast<::mcs::rpc::WorkerExitType>(val));
        } else goto handle_unusual;
        continue;
      // optional string exit_detail = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_exit_detail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.WorkerTableData.exit_detail"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pid = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkerTableData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.WorkerTableData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_alive = 1;
  if (this->_internal_is_alive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_alive(), target);
  }

  // .mcs.rpc.Address worker_address = 2;
  if (this->_internal_has_worker_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::worker_address(this), target, stream);
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // .mcs.rpc.WorkerType worker_type = 5;
  if (this->_internal_worker_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_worker_type(), target);
  }

  // map<string, bytes> worker_info = 6;
  if (!this->_internal_worker_info().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mcs.rpc.WorkerTableData.WorkerInfoEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_worker_info().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_worker_info().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_worker_info().begin();
          it != this->_internal_worker_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = WorkerTableData_WorkerInfoEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_worker_info().begin();
          it != this->_internal_worker_info().end(); ++it) {
        target = WorkerTableData_WorkerInfoEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .mcs.rpc.McsException creation_task_exception = 18;
  if (this->_internal_has_creation_task_exception()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::creation_task_exception(this), target, stream);
  }

  // optional .mcs.rpc.WorkerExitType exit_type = 19;
  if (_internal_has_exit_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_exit_type(), target);
  }

  // optional string exit_detail = 20;
  if (_internal_has_exit_detail()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exit_detail().data(), static_cast<int>(this->_internal_exit_detail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.WorkerTableData.exit_detail");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_exit_detail(), target);
  }

  // uint32 pid = 21;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.WorkerTableData)
  return target;
}

size_t WorkerTableData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.WorkerTableData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> worker_info = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_worker_info_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_worker_info().begin();
      it != this->_internal_worker_info().end(); ++it) {
    total_size += WorkerTableData_WorkerInfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional string exit_detail = 20;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exit_detail());
  }

  // .mcs.rpc.Address worker_address = 2;
  if (this->_internal_has_worker_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *worker_address_);
  }

  // .mcs.rpc.McsException creation_task_exception = 18;
  if (this->_internal_has_creation_task_exception()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *creation_task_exception_);
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // bool is_alive = 1;
  if (this->_internal_is_alive() != 0) {
    total_size += 1 + 1;
  }

  // .mcs.rpc.WorkerType worker_type = 5;
  if (this->_internal_worker_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_worker_type());
  }

  // optional .mcs.rpc.WorkerExitType exit_type = 19;
  if (cached_has_bits & 0x00000002u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_exit_type());
  }

  // uint32 pid = 21;
  if (this->_internal_pid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkerTableData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WorkerTableData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkerTableData::GetClassData() const { return &_class_data_; }

void WorkerTableData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WorkerTableData *>(to)->MergeFrom(
      static_cast<const WorkerTableData &>(from));
}


void WorkerTableData::MergeFrom(const WorkerTableData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.WorkerTableData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  worker_info_.MergeFrom(from.worker_info_);
  if (from._internal_has_exit_detail()) {
    _internal_set_exit_detail(from._internal_exit_detail());
  }
  if (from._internal_has_worker_address()) {
    _internal_mutable_worker_address()->::mcs::rpc::Address::MergeFrom(from._internal_worker_address());
  }
  if (from._internal_has_creation_task_exception()) {
    _internal_mutable_creation_task_exception()->::mcs::rpc::McsException::MergeFrom(from._internal_creation_task_exception());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_is_alive() != 0) {
    _internal_set_is_alive(from._internal_is_alive());
  }
  if (from._internal_worker_type() != 0) {
    _internal_set_worker_type(from._internal_worker_type());
  }
  if (from._internal_has_exit_type()) {
    _internal_set_exit_type(from._internal_exit_type());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkerTableData::CopyFrom(const WorkerTableData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.WorkerTableData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerTableData::IsInitialized() const {
  return true;
}

void WorkerTableData::InternalSwap(WorkerTableData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  worker_info_.InternalSwap(&other->worker_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &exit_detail_, GetArenaForAllocation(),
      &other->exit_detail_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkerTableData, pid_)
      + sizeof(WorkerTableData::pid_)
      - PROTOBUF_FIELD_OFFSET(WorkerTableData, worker_address_)>(
          reinterpret_cast<char*>(&worker_address_),
          reinterpret_cast<char*>(&other->worker_address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerTableData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[22]);
}

// ===================================================================

class WorkerDeltaData::_Internal {
 public:
};

WorkerDeltaData::WorkerDeltaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.WorkerDeltaData)
}
WorkerDeltaData::WorkerDeltaData(const WorkerDeltaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mcslet_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mcslet_id().empty()) {
    mcslet_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mcslet_id(), 
      GetArenaForAllocation());
  }
  worker_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_worker_id().empty()) {
    worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_worker_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.WorkerDeltaData)
}

inline void WorkerDeltaData::SharedCtor() {
mcslet_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
worker_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WorkerDeltaData::~WorkerDeltaData() {
  // @@protoc_insertion_point(destructor:mcs.rpc.WorkerDeltaData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkerDeltaData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mcslet_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  worker_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorkerDeltaData::ArenaDtor(void* object) {
  WorkerDeltaData* _this = reinterpret_cast< WorkerDeltaData* >(object);
  (void)_this;
}
void WorkerDeltaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkerDeltaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkerDeltaData::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.WorkerDeltaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mcslet_id_.ClearToEmpty();
  worker_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerDeltaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes mcslet_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mcslet_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes worker_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_worker_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkerDeltaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.WorkerDeltaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes mcslet_id = 1;
  if (!this->_internal_mcslet_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_mcslet_id(), target);
  }

  // bytes worker_id = 2;
  if (!this->_internal_worker_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_worker_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.WorkerDeltaData)
  return target;
}

size_t WorkerDeltaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.WorkerDeltaData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes mcslet_id = 1;
  if (!this->_internal_mcslet_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mcslet_id());
  }

  // bytes worker_id = 2;
  if (!this->_internal_worker_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_worker_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkerDeltaData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WorkerDeltaData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkerDeltaData::GetClassData() const { return &_class_data_; }

void WorkerDeltaData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WorkerDeltaData *>(to)->MergeFrom(
      static_cast<const WorkerDeltaData &>(from));
}


void WorkerDeltaData::MergeFrom(const WorkerDeltaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.WorkerDeltaData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mcslet_id().empty()) {
    _internal_set_mcslet_id(from._internal_mcslet_id());
  }
  if (!from._internal_worker_id().empty()) {
    _internal_set_worker_id(from._internal_worker_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkerDeltaData::CopyFrom(const WorkerDeltaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.WorkerDeltaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerDeltaData::IsInitialized() const {
  return true;
}

void WorkerDeltaData::InternalSwap(WorkerDeltaData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mcslet_id_, GetArenaForAllocation(),
      &other->mcslet_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &worker_id_, GetArenaForAllocation(),
      &other->worker_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerDeltaData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[23]);
}

// ===================================================================

ResourceMap_ItemsEntry_DoNotUse::ResourceMap_ItemsEntry_DoNotUse() {}
ResourceMap_ItemsEntry_DoNotUse::ResourceMap_ItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ResourceMap_ItemsEntry_DoNotUse::MergeFrom(const ResourceMap_ItemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ResourceMap_ItemsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[24]);
}

// ===================================================================

class ResourceMap::_Internal {
 public:
};

ResourceMap::ResourceMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ResourceMap)
}
ResourceMap::ResourceMap(const ResourceMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  items_.MergeFrom(from.items_);
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ResourceMap)
}

inline void ResourceMap::SharedCtor() {
}

ResourceMap::~ResourceMap() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ResourceMap)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResourceMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResourceMap::ArenaDtor(void* object) {
  ResourceMap* _this = reinterpret_cast< ResourceMap* >(object);
  (void)_this;
  _this->items_. ~MapField();
}
inline void ResourceMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ResourceMap::ArenaDtor);
  }
}
void ResourceMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResourceMap::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ResourceMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .mcs.rpc.ResourceTableData> items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&items_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ResourceMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .mcs.rpc.ResourceTableData> items = 1;
  if (!this->_internal_items().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mcs::rpc::ResourceTableData >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mcs.rpc.ResourceMap.ItemsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_items().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_items().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mcs::rpc::ResourceTableData >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mcs::rpc::ResourceTableData >::const_iterator
          it = this->_internal_items().begin();
          it != this->_internal_items().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ResourceMap_ItemsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mcs::rpc::ResourceTableData >::const_iterator
          it = this->_internal_items().begin();
          it != this->_internal_items().end(); ++it) {
        target = ResourceMap_ItemsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ResourceMap)
  return target;
}

size_t ResourceMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ResourceMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .mcs.rpc.ResourceTableData> items = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_items_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mcs::rpc::ResourceTableData >::const_iterator
      it = this->_internal_items().begin();
      it != this->_internal_items().end(); ++it) {
    total_size += ResourceMap_ItemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResourceMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceMap::GetClassData() const { return &_class_data_; }

void ResourceMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ResourceMap *>(to)->MergeFrom(
      static_cast<const ResourceMap &>(from));
}


void ResourceMap::MergeFrom(const ResourceMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ResourceMap)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceMap::CopyFrom(const ResourceMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ResourceMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceMap::IsInitialized() const {
  return true;
}

void ResourceMap::InternalSwap(ResourceMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceMap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[25]);
}

// ===================================================================

class StoredConfig::_Internal {
 public:
};

StoredConfig::StoredConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.StoredConfig)
}
StoredConfig::StoredConfig(const StoredConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config().empty()) {
    config_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_config(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.StoredConfig)
}

inline void StoredConfig::SharedCtor() {
config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StoredConfig::~StoredConfig() {
  // @@protoc_insertion_point(destructor:mcs.rpc.StoredConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StoredConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  config_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StoredConfig::ArenaDtor(void* object) {
  StoredConfig* _this = reinterpret_cast< StoredConfig* >(object);
  (void)_this;
}
void StoredConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StoredConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StoredConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.StoredConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoredConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_config();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.StoredConfig.config"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StoredConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.StoredConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string config = 1;
  if (!this->_internal_config().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_config().data(), static_cast<int>(this->_internal_config().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.StoredConfig.config");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_config(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.StoredConfig)
  return target;
}

size_t StoredConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.StoredConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string config = 1;
  if (!this->_internal_config().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_config());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StoredConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StoredConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StoredConfig::GetClassData() const { return &_class_data_; }

void StoredConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StoredConfig *>(to)->MergeFrom(
      static_cast<const StoredConfig &>(from));
}


void StoredConfig::MergeFrom(const StoredConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.StoredConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_config().empty()) {
    _internal_set_config(from._internal_config());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StoredConfig::CopyFrom(const StoredConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.StoredConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoredConfig::IsInitialized() const {
  return true;
}

void StoredConfig::InternalSwap(StoredConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &config_, GetArenaForAllocation(),
      &other->config_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StoredConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[26]);
}

// ===================================================================

NodeResourceChange_UpdatedResourcesEntry_DoNotUse::NodeResourceChange_UpdatedResourcesEntry_DoNotUse() {}
NodeResourceChange_UpdatedResourcesEntry_DoNotUse::NodeResourceChange_UpdatedResourcesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void NodeResourceChange_UpdatedResourcesEntry_DoNotUse::MergeFrom(const NodeResourceChange_UpdatedResourcesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata NodeResourceChange_UpdatedResourcesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[27]);
}

// ===================================================================

class NodeResourceChange::_Internal {
 public:
};

NodeResourceChange::NodeResourceChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  updated_resources_(arena),
  deleted_resources_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.NodeResourceChange)
}
NodeResourceChange::NodeResourceChange(const NodeResourceChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      deleted_resources_(from.deleted_resources_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  updated_resources_.MergeFrom(from.updated_resources_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.NodeResourceChange)
}

inline void NodeResourceChange::SharedCtor() {
node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NodeResourceChange::~NodeResourceChange() {
  // @@protoc_insertion_point(destructor:mcs.rpc.NodeResourceChange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeResourceChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeResourceChange::ArenaDtor(void* object) {
  NodeResourceChange* _this = reinterpret_cast< NodeResourceChange* >(object);
  (void)_this;
  _this->updated_resources_. ~MapField();
}
inline void NodeResourceChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &NodeResourceChange::ArenaDtor);
  }
}
void NodeResourceChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeResourceChange::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.NodeResourceChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updated_resources_.Clear();
  deleted_resources_.Clear();
  node_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeResourceChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, double> updated_resources = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&updated_resources_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string deleted_resources = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_deleted_resources();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.NodeResourceChange.deleted_resources"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeResourceChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.NodeResourceChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes node_id = 1;
  if (!this->_internal_node_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_node_id(), target);
  }

  // map<string, double> updated_resources = 2;
  if (!this->_internal_updated_resources().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mcs.rpc.NodeResourceChange.UpdatedResourcesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_updated_resources().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_updated_resources().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_updated_resources().begin();
          it != this->_internal_updated_resources().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = NodeResourceChange_UpdatedResourcesEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_updated_resources().begin();
          it != this->_internal_updated_resources().end(); ++it) {
        target = NodeResourceChange_UpdatedResourcesEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string deleted_resources = 3;
  for (int i = 0, n = this->_internal_deleted_resources_size(); i < n; i++) {
    const auto& s = this->_internal_deleted_resources(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.NodeResourceChange.deleted_resources");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.NodeResourceChange)
  return target;
}

size_t NodeResourceChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.NodeResourceChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, double> updated_resources = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_updated_resources_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_updated_resources().begin();
      it != this->_internal_updated_resources().end(); ++it) {
    total_size += NodeResourceChange_UpdatedResourcesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string deleted_resources = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(deleted_resources_.size());
  for (int i = 0, n = deleted_resources_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      deleted_resources_.Get(i));
  }

  // bytes node_id = 1;
  if (!this->_internal_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeResourceChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NodeResourceChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeResourceChange::GetClassData() const { return &_class_data_; }

void NodeResourceChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NodeResourceChange *>(to)->MergeFrom(
      static_cast<const NodeResourceChange &>(from));
}


void NodeResourceChange::MergeFrom(const NodeResourceChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.NodeResourceChange)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updated_resources_.MergeFrom(from.updated_resources_);
  deleted_resources_.MergeFrom(from.deleted_resources_);
  if (!from._internal_node_id().empty()) {
    _internal_set_node_id(from._internal_node_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeResourceChange::CopyFrom(const NodeResourceChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.NodeResourceChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeResourceChange::IsInitialized() const {
  return true;
}

void NodeResourceChange::InternalSwap(NodeResourceChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  updated_resources_.InternalSwap(&other->updated_resources_);
  deleted_resources_.InternalSwap(&other->deleted_resources_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_id_, GetArenaForAllocation(),
      &other->node_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeResourceChange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[28]);
}

// ===================================================================

class PubSubMessage::_Internal {
 public:
};

PubSubMessage::PubSubMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.PubSubMessage)
}
PubSubMessage::PubSubMessage(const PubSubMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.PubSubMessage)
}

inline void PubSubMessage::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PubSubMessage::~PubSubMessage() {
  // @@protoc_insertion_point(destructor:mcs.rpc.PubSubMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PubSubMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PubSubMessage::ArenaDtor(void* object) {
  PubSubMessage* _this = reinterpret_cast< PubSubMessage* >(object);
  (void)_this;
}
void PubSubMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PubSubMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PubSubMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.PubSubMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PubSubMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PubSubMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.PubSubMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.PubSubMessage)
  return target;
}

size_t PubSubMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.PubSubMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PubSubMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PubSubMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PubSubMessage::GetClassData() const { return &_class_data_; }

void PubSubMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PubSubMessage *>(to)->MergeFrom(
      static_cast<const PubSubMessage &>(from));
}


void PubSubMessage::MergeFrom(const PubSubMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.PubSubMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PubSubMessage::CopyFrom(const PubSubMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.PubSubMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PubSubMessage::IsInitialized() const {
  return true;
}

void PubSubMessage::InternalSwap(PubSubMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, GetArenaForAllocation(),
      &other->data_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PubSubMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[29]);
}

// ===================================================================

class ResourceUpdate::_Internal {
 public:
  static const ::mcs::rpc::NodeResourceChange& change(const ResourceUpdate* msg);
  static const ::mcs::rpc::ResourcesData& data(const ResourceUpdate* msg);
};

const ::mcs::rpc::NodeResourceChange&
ResourceUpdate::_Internal::change(const ResourceUpdate* msg) {
  return *msg->resource_change_or_data_.change_;
}
const ::mcs::rpc::ResourcesData&
ResourceUpdate::_Internal::data(const ResourceUpdate* msg) {
  return *msg->resource_change_or_data_.data_;
}
void ResourceUpdate::set_allocated_change(::mcs::rpc::NodeResourceChange* change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_resource_change_or_data();
  if (change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mcs::rpc::NodeResourceChange>::GetOwningArena(change);
    if (message_arena != submessage_arena) {
      change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change, submessage_arena);
    }
    set_has_change();
    resource_change_or_data_.change_ = change;
  }
  // @@protoc_insertion_point(field_set_allocated:mcs.rpc.ResourceUpdate.change)
}
void ResourceUpdate::set_allocated_data(::mcs::rpc::ResourcesData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_resource_change_or_data();
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mcs::rpc::ResourcesData>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    resource_change_or_data_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:mcs.rpc.ResourceUpdate.data)
}
ResourceUpdate::ResourceUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ResourceUpdate)
}
ResourceUpdate::ResourceUpdate(const ResourceUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_resource_change_or_data();
  switch (from.resource_change_or_data_case()) {
    case kChange: {
      _internal_mutable_change()->::mcs::rpc::NodeResourceChange::MergeFrom(from._internal_change());
      break;
    }
    case kData: {
      _internal_mutable_data()->::mcs::rpc::ResourcesData::MergeFrom(from._internal_data());
      break;
    }
    case RESOURCE_CHANGE_OR_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ResourceUpdate)
}

inline void ResourceUpdate::SharedCtor() {
clear_has_resource_change_or_data();
}

ResourceUpdate::~ResourceUpdate() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ResourceUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResourceUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_resource_change_or_data()) {
    clear_resource_change_or_data();
  }
}

void ResourceUpdate::ArenaDtor(void* object) {
  ResourceUpdate* _this = reinterpret_cast< ResourceUpdate* >(object);
  (void)_this;
}
void ResourceUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResourceUpdate::clear_resource_change_or_data() {
// @@protoc_insertion_point(one_of_clear_start:mcs.rpc.ResourceUpdate)
  switch (resource_change_or_data_case()) {
    case kChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete resource_change_or_data_.change_;
      }
      break;
    }
    case kData: {
      if (GetArenaForAllocation() == nullptr) {
        delete resource_change_or_data_.data_;
      }
      break;
    }
    case RESOURCE_CHANGE_OR_DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESOURCE_CHANGE_OR_DATA_NOT_SET;
}


void ResourceUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ResourceUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_resource_change_or_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mcs.rpc.NodeResourceChange change = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.ResourcesData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ResourceUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mcs.rpc.NodeResourceChange change = 1;
  if (_internal_has_change()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::change(this), target, stream);
  }

  // .mcs.rpc.ResourcesData data = 2;
  if (_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ResourceUpdate)
  return target;
}

size_t ResourceUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ResourceUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (resource_change_or_data_case()) {
    // .mcs.rpc.NodeResourceChange change = 1;
    case kChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_change_or_data_.change_);
      break;
    }
    // .mcs.rpc.ResourcesData data = 2;
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_change_or_data_.data_);
      break;
    }
    case RESOURCE_CHANGE_OR_DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResourceUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceUpdate::GetClassData() const { return &_class_data_; }

void ResourceUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ResourceUpdate *>(to)->MergeFrom(
      static_cast<const ResourceUpdate &>(from));
}


void ResourceUpdate::MergeFrom(const ResourceUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ResourceUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.resource_change_or_data_case()) {
    case kChange: {
      _internal_mutable_change()->::mcs::rpc::NodeResourceChange::MergeFrom(from._internal_change());
      break;
    }
    case kData: {
      _internal_mutable_data()->::mcs::rpc::ResourcesData::MergeFrom(from._internal_data());
      break;
    }
    case RESOURCE_CHANGE_OR_DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceUpdate::CopyFrom(const ResourceUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ResourceUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceUpdate::IsInitialized() const {
  return true;
}

void ResourceUpdate::InternalSwap(ResourceUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(resource_change_or_data_, other->resource_change_or_data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[30]);
}

// ===================================================================

class ResourceUsageBroadcastData::_Internal {
 public:
};

ResourceUsageBroadcastData::ResourceUsageBroadcastData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  batch_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ResourceUsageBroadcastData)
}
ResourceUsageBroadcastData::ResourceUsageBroadcastData(const ResourceUsageBroadcastData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      batch_(from.batch_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seq_no_ = from.seq_no_;
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ResourceUsageBroadcastData)
}

inline void ResourceUsageBroadcastData::SharedCtor() {
seq_no_ = int64_t{0};
}

ResourceUsageBroadcastData::~ResourceUsageBroadcastData() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ResourceUsageBroadcastData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResourceUsageBroadcastData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResourceUsageBroadcastData::ArenaDtor(void* object) {
  ResourceUsageBroadcastData* _this = reinterpret_cast< ResourceUsageBroadcastData* >(object);
  (void)_this;
}
void ResourceUsageBroadcastData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceUsageBroadcastData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResourceUsageBroadcastData::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ResourceUsageBroadcastData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  batch_.Clear();
  seq_no_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceUsageBroadcastData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 seq_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seq_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mcs.rpc.ResourceUpdate batch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_batch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceUsageBroadcastData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ResourceUsageBroadcastData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq_no = 1;
  if (this->_internal_seq_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq_no(), target);
  }

  // repeated .mcs.rpc.ResourceUpdate batch = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_batch_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_batch(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ResourceUsageBroadcastData)
  return target;
}

size_t ResourceUsageBroadcastData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ResourceUsageBroadcastData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mcs.rpc.ResourceUpdate batch = 2;
  total_size += 1UL * this->_internal_batch_size();
  for (const auto& msg : this->batch_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 seq_no = 1;
  if (this->_internal_seq_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seq_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceUsageBroadcastData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResourceUsageBroadcastData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceUsageBroadcastData::GetClassData() const { return &_class_data_; }

void ResourceUsageBroadcastData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ResourceUsageBroadcastData *>(to)->MergeFrom(
      static_cast<const ResourceUsageBroadcastData &>(from));
}


void ResourceUsageBroadcastData::MergeFrom(const ResourceUsageBroadcastData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ResourceUsageBroadcastData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  batch_.MergeFrom(from.batch_);
  if (from._internal_seq_no() != 0) {
    _internal_set_seq_no(from._internal_seq_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceUsageBroadcastData::CopyFrom(const ResourceUsageBroadcastData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ResourceUsageBroadcastData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceUsageBroadcastData::IsInitialized() const {
  return true;
}

void ResourceUsageBroadcastData::InternalSwap(ResourceUsageBroadcastData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  batch_.InternalSwap(&other->batch_);
  swap(seq_no_, other->seq_no_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceUsageBroadcastData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[31]);
}

// ===================================================================

ResourceDemand_ShapeEntry_DoNotUse::ResourceDemand_ShapeEntry_DoNotUse() {}
ResourceDemand_ShapeEntry_DoNotUse::ResourceDemand_ShapeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ResourceDemand_ShapeEntry_DoNotUse::MergeFrom(const ResourceDemand_ShapeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ResourceDemand_ShapeEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[32]);
}

// ===================================================================

class ResourceDemand::_Internal {
 public:
};

ResourceDemand::ResourceDemand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  shape_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ResourceDemand)
}
ResourceDemand::ResourceDemand(const ResourceDemand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shape_.MergeFrom(from.shape_);
  ::memcpy(&num_ready_requests_queued_, &from.num_ready_requests_queued_,
    static_cast<size_t>(reinterpret_cast<char*>(&backlog_size_) -
    reinterpret_cast<char*>(&num_ready_requests_queued_)) + sizeof(backlog_size_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ResourceDemand)
}

inline void ResourceDemand::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_ready_requests_queued_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&backlog_size_) -
    reinterpret_cast<char*>(&num_ready_requests_queued_)) + sizeof(backlog_size_));
}

ResourceDemand::~ResourceDemand() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ResourceDemand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResourceDemand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResourceDemand::ArenaDtor(void* object) {
  ResourceDemand* _this = reinterpret_cast< ResourceDemand* >(object);
  (void)_this;
  _this->shape_. ~MapField();
}
inline void ResourceDemand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ResourceDemand::ArenaDtor);
  }
}
void ResourceDemand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResourceDemand::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ResourceDemand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  ::memset(&num_ready_requests_queued_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&backlog_size_) -
      reinterpret_cast<char*>(&num_ready_requests_queued_)) + sizeof(backlog_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceDemand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, double> shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&shape_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 num_ready_requests_queued = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ready_requests_queued_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 num_infeasible_requests_queued = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_infeasible_requests_queued_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 backlog_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          backlog_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceDemand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ResourceDemand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, double> shape = 1;
  if (!this->_internal_shape().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mcs.rpc.ResourceDemand.ShapeEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_shape().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_shape().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_shape().begin();
          it != this->_internal_shape().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ResourceDemand_ShapeEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_shape().begin();
          it != this->_internal_shape().end(); ++it) {
        target = ResourceDemand_ShapeEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // uint64 num_ready_requests_queued = 2;
  if (this->_internal_num_ready_requests_queued() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_num_ready_requests_queued(), target);
  }

  // uint64 num_infeasible_requests_queued = 3;
  if (this->_internal_num_infeasible_requests_queued() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_num_infeasible_requests_queued(), target);
  }

  // int64 backlog_size = 4;
  if (this->_internal_backlog_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_backlog_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ResourceDemand)
  return target;
}

size_t ResourceDemand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ResourceDemand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, double> shape = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_shape_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_shape().begin();
      it != this->_internal_shape().end(); ++it) {
    total_size += ResourceDemand_ShapeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint64 num_ready_requests_queued = 2;
  if (this->_internal_num_ready_requests_queued() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_ready_requests_queued());
  }

  // uint64 num_infeasible_requests_queued = 3;
  if (this->_internal_num_infeasible_requests_queued() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_infeasible_requests_queued());
  }

  // int64 backlog_size = 4;
  if (this->_internal_backlog_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_backlog_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceDemand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResourceDemand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceDemand::GetClassData() const { return &_class_data_; }

void ResourceDemand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ResourceDemand *>(to)->MergeFrom(
      static_cast<const ResourceDemand &>(from));
}


void ResourceDemand::MergeFrom(const ResourceDemand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ResourceDemand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  if (from._internal_num_ready_requests_queued() != 0) {
    _internal_set_num_ready_requests_queued(from._internal_num_ready_requests_queued());
  }
  if (from._internal_num_infeasible_requests_queued() != 0) {
    _internal_set_num_infeasible_requests_queued(from._internal_num_infeasible_requests_queued());
  }
  if (from._internal_backlog_size() != 0) {
    _internal_set_backlog_size(from._internal_backlog_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceDemand::CopyFrom(const ResourceDemand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ResourceDemand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceDemand::IsInitialized() const {
  return true;
}

void ResourceDemand::InternalSwap(ResourceDemand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  shape_.InternalSwap(&other->shape_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceDemand, backlog_size_)
      + sizeof(ResourceDemand::backlog_size_)
      - PROTOBUF_FIELD_OFFSET(ResourceDemand, num_ready_requests_queued_)>(
          reinterpret_cast<char*>(&num_ready_requests_queued_),
          reinterpret_cast<char*>(&other->num_ready_requests_queued_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceDemand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[33]);
}

// ===================================================================

class ResourceLoad::_Internal {
 public:
};

ResourceLoad::ResourceLoad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  resource_demands_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ResourceLoad)
}
ResourceLoad::ResourceLoad(const ResourceLoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      resource_demands_(from.resource_demands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ResourceLoad)
}

inline void ResourceLoad::SharedCtor() {
}

ResourceLoad::~ResourceLoad() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ResourceLoad)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResourceLoad::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResourceLoad::ArenaDtor(void* object) {
  ResourceLoad* _this = reinterpret_cast< ResourceLoad* >(object);
  (void)_this;
}
void ResourceLoad::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceLoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResourceLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ResourceLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_demands_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceLoad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mcs.rpc.ResourceDemand resource_demands = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resource_demands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceLoad::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ResourceLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mcs.rpc.ResourceDemand resource_demands = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_demands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_resource_demands(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ResourceLoad)
  return target;
}

size_t ResourceLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ResourceLoad)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mcs.rpc.ResourceDemand resource_demands = 1;
  total_size += 1UL * this->_internal_resource_demands_size();
  for (const auto& msg : this->resource_demands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceLoad::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResourceLoad::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceLoad::GetClassData() const { return &_class_data_; }

void ResourceLoad::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ResourceLoad *>(to)->MergeFrom(
      static_cast<const ResourceLoad &>(from));
}


void ResourceLoad::MergeFrom(const ResourceLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ResourceLoad)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resource_demands_.MergeFrom(from.resource_demands_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceLoad::CopyFrom(const ResourceLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ResourceLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceLoad::IsInitialized() const {
  return true;
}

void ResourceLoad::InternalSwap(ResourceLoad* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  resource_demands_.InternalSwap(&other->resource_demands_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceLoad::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[34]);
}

// ===================================================================

ResourcesData_ResourcesAvailableEntry_DoNotUse::ResourcesData_ResourcesAvailableEntry_DoNotUse() {}
ResourcesData_ResourcesAvailableEntry_DoNotUse::ResourcesData_ResourcesAvailableEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ResourcesData_ResourcesAvailableEntry_DoNotUse::MergeFrom(const ResourcesData_ResourcesAvailableEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ResourcesData_ResourcesAvailableEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[35]);
}

// ===================================================================

ResourcesData_ResourcesTotalEntry_DoNotUse::ResourcesData_ResourcesTotalEntry_DoNotUse() {}
ResourcesData_ResourcesTotalEntry_DoNotUse::ResourcesData_ResourcesTotalEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ResourcesData_ResourcesTotalEntry_DoNotUse::MergeFrom(const ResourcesData_ResourcesTotalEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ResourcesData_ResourcesTotalEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[36]);
}

// ===================================================================

ResourcesData_ResourceLoadEntry_DoNotUse::ResourcesData_ResourceLoadEntry_DoNotUse() {}
ResourcesData_ResourceLoadEntry_DoNotUse::ResourcesData_ResourceLoadEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ResourcesData_ResourceLoadEntry_DoNotUse::MergeFrom(const ResourcesData_ResourceLoadEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ResourcesData_ResourceLoadEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[37]);
}

// ===================================================================

ResourcesData_ResourcesNormalTaskEntry_DoNotUse::ResourcesData_ResourcesNormalTaskEntry_DoNotUse() {}
ResourcesData_ResourcesNormalTaskEntry_DoNotUse::ResourcesData_ResourcesNormalTaskEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ResourcesData_ResourcesNormalTaskEntry_DoNotUse::MergeFrom(const ResourcesData_ResourcesNormalTaskEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ResourcesData_ResourcesNormalTaskEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[38]);
}

// ===================================================================

class ResourcesData::_Internal {
 public:
  static const ::mcs::rpc::ResourceLoad& resource_load_by_shape(const ResourcesData* msg);
};

const ::mcs::rpc::ResourceLoad&
ResourcesData::_Internal::resource_load_by_shape(const ResourcesData* msg) {
  return *msg->resource_load_by_shape_;
}
ResourcesData::ResourcesData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  resources_available_(arena),
  resources_total_(arena),
  resource_load_(arena),
  resources_normal_task_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ResourcesData)
}
ResourcesData::ResourcesData(const ResourcesData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  resources_available_.MergeFrom(from.resources_available_);
  resources_total_.MergeFrom(from.resources_total_);
  resource_load_.MergeFrom(from.resource_load_);
  resources_normal_task_.MergeFrom(from.resources_normal_task_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(), 
      GetArenaForAllocation());
  }
  node_manager_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_manager_address().empty()) {
    node_manager_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_manager_address(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_resource_load_by_shape()) {
    resource_load_by_shape_ = new ::mcs::rpc::ResourceLoad(*from.resource_load_by_shape_);
  } else {
    resource_load_by_shape_ = nullptr;
  }
  ::memcpy(&resources_available_changed_, &from.resources_available_changed_,
    static_cast<size_t>(reinterpret_cast<char*>(&resources_normal_task_timestamp_) -
    reinterpret_cast<char*>(&resources_available_changed_)) + sizeof(resources_normal_task_timestamp_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ResourcesData)
}

inline void ResourcesData::SharedCtor() {
node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
node_manager_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&resource_load_by_shape_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&resources_normal_task_timestamp_) -
    reinterpret_cast<char*>(&resource_load_by_shape_)) + sizeof(resources_normal_task_timestamp_));
}

ResourcesData::~ResourcesData() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ResourcesData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResourcesData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_manager_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete resource_load_by_shape_;
}

void ResourcesData::ArenaDtor(void* object) {
  ResourcesData* _this = reinterpret_cast< ResourcesData* >(object);
  (void)_this;
  _this->resources_available_. ~MapField();
  _this->resources_total_. ~MapField();
  _this->resource_load_. ~MapField();
  _this->resources_normal_task_. ~MapField();
}
inline void ResourcesData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ResourcesData::ArenaDtor);
  }
}
void ResourcesData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResourcesData::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ResourcesData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resources_available_.Clear();
  resources_total_.Clear();
  resource_load_.Clear();
  resources_normal_task_.Clear();
  node_id_.ClearToEmpty();
  node_manager_address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && resource_load_by_shape_ != nullptr) {
    delete resource_load_by_shape_;
  }
  resource_load_by_shape_ = nullptr;
  ::memset(&resources_available_changed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resources_normal_task_timestamp_) -
      reinterpret_cast<char*>(&resources_available_changed_)) + sizeof(resources_normal_task_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourcesData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, double> resources_available = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&resources_available_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool resources_available_changed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          resources_available_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, double> resources_total = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&resources_total_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, double> resource_load = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&resource_load_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bool resource_load_changed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          resource_load_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.ResourceLoad resource_load_by_shape = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_load_by_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool should_global_gc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          should_global_gc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_manager_address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_node_manager_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.ResourcesData.node_manager_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool object_pulls_queued = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          object_pulls_queued_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, double> resources_normal_task = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&resources_normal_task_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // bool resources_normal_task_changed = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          resources_normal_task_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 resources_normal_task_timestamp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          resources_normal_task_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cluster_full_of_actors_detected = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          cluster_full_of_actors_detected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourcesData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ResourcesData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes node_id = 1;
  if (!this->_internal_node_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_node_id(), target);
  }

  // map<string, double> resources_available = 2;
  if (!this->_internal_resources_available().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mcs.rpc.ResourcesData.ResourcesAvailableEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_resources_available().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_resources_available().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_resources_available().begin();
          it != this->_internal_resources_available().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ResourcesData_ResourcesAvailableEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_resources_available().begin();
          it != this->_internal_resources_available().end(); ++it) {
        target = ResourcesData_ResourcesAvailableEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool resources_available_changed = 3;
  if (this->_internal_resources_available_changed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_resources_available_changed(), target);
  }

  // map<string, double> resources_total = 4;
  if (!this->_internal_resources_total().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mcs.rpc.ResourcesData.ResourcesTotalEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_resources_total().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_resources_total().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_resources_total().begin();
          it != this->_internal_resources_total().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ResourcesData_ResourcesTotalEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_resources_total().begin();
          it != this->_internal_resources_total().end(); ++it) {
        target = ResourcesData_ResourcesTotalEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, double> resource_load = 5;
  if (!this->_internal_resource_load().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mcs.rpc.ResourcesData.ResourceLoadEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_resource_load().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_resource_load().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_resource_load().begin();
          it != this->_internal_resource_load().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ResourcesData_ResourceLoadEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_resource_load().begin();
          it != this->_internal_resource_load().end(); ++it) {
        target = ResourcesData_ResourceLoadEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool resource_load_changed = 6;
  if (this->_internal_resource_load_changed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_resource_load_changed(), target);
  }

  // .mcs.rpc.ResourceLoad resource_load_by_shape = 7;
  if (this->_internal_has_resource_load_by_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::resource_load_by_shape(this), target, stream);
  }

  // bool should_global_gc = 8;
  if (this->_internal_should_global_gc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_should_global_gc(), target);
  }

  // string node_manager_address = 9;
  if (!this->_internal_node_manager_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_manager_address().data(), static_cast<int>(this->_internal_node_manager_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.ResourcesData.node_manager_address");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_node_manager_address(), target);
  }

  // bool object_pulls_queued = 10;
  if (this->_internal_object_pulls_queued() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_object_pulls_queued(), target);
  }

  // map<string, double> resources_normal_task = 11;
  if (!this->_internal_resources_normal_task().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mcs.rpc.ResourcesData.ResourcesNormalTaskEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_resources_normal_task().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_resources_normal_task().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_resources_normal_task().begin();
          it != this->_internal_resources_normal_task().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ResourcesData_ResourcesNormalTaskEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_resources_normal_task().begin();
          it != this->_internal_resources_normal_task().end(); ++it) {
        target = ResourcesData_ResourcesNormalTaskEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool resources_normal_task_changed = 12;
  if (this->_internal_resources_normal_task_changed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_resources_normal_task_changed(), target);
  }

  // int64 resources_normal_task_timestamp = 13;
  if (this->_internal_resources_normal_task_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_resources_normal_task_timestamp(), target);
  }

  // bool cluster_full_of_actors_detected = 14;
  if (this->_internal_cluster_full_of_actors_detected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_cluster_full_of_actors_detected(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ResourcesData)
  return target;
}

size_t ResourcesData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ResourcesData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, double> resources_available = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_resources_available_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_resources_available().begin();
      it != this->_internal_resources_available().end(); ++it) {
    total_size += ResourcesData_ResourcesAvailableEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, double> resources_total = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_resources_total_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_resources_total().begin();
      it != this->_internal_resources_total().end(); ++it) {
    total_size += ResourcesData_ResourcesTotalEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, double> resource_load = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_resource_load_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_resource_load().begin();
      it != this->_internal_resource_load().end(); ++it) {
    total_size += ResourcesData_ResourceLoadEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, double> resources_normal_task = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_resources_normal_task_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_resources_normal_task().begin();
      it != this->_internal_resources_normal_task().end(); ++it) {
    total_size += ResourcesData_ResourcesNormalTaskEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes node_id = 1;
  if (!this->_internal_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_node_id());
  }

  // string node_manager_address = 9;
  if (!this->_internal_node_manager_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_manager_address());
  }

  // .mcs.rpc.ResourceLoad resource_load_by_shape = 7;
  if (this->_internal_has_resource_load_by_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resource_load_by_shape_);
  }

  // bool resources_available_changed = 3;
  if (this->_internal_resources_available_changed() != 0) {
    total_size += 1 + 1;
  }

  // bool resource_load_changed = 6;
  if (this->_internal_resource_load_changed() != 0) {
    total_size += 1 + 1;
  }

  // bool should_global_gc = 8;
  if (this->_internal_should_global_gc() != 0) {
    total_size += 1 + 1;
  }

  // bool object_pulls_queued = 10;
  if (this->_internal_object_pulls_queued() != 0) {
    total_size += 1 + 1;
  }

  // bool resources_normal_task_changed = 12;
  if (this->_internal_resources_normal_task_changed() != 0) {
    total_size += 1 + 1;
  }

  // bool cluster_full_of_actors_detected = 14;
  if (this->_internal_cluster_full_of_actors_detected() != 0) {
    total_size += 1 + 1;
  }

  // int64 resources_normal_task_timestamp = 13;
  if (this->_internal_resources_normal_task_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_resources_normal_task_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourcesData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResourcesData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourcesData::GetClassData() const { return &_class_data_; }

void ResourcesData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ResourcesData *>(to)->MergeFrom(
      static_cast<const ResourcesData &>(from));
}


void ResourcesData::MergeFrom(const ResourcesData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ResourcesData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resources_available_.MergeFrom(from.resources_available_);
  resources_total_.MergeFrom(from.resources_total_);
  resource_load_.MergeFrom(from.resource_load_);
  resources_normal_task_.MergeFrom(from.resources_normal_task_);
  if (!from._internal_node_id().empty()) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (!from._internal_node_manager_address().empty()) {
    _internal_set_node_manager_address(from._internal_node_manager_address());
  }
  if (from._internal_has_resource_load_by_shape()) {
    _internal_mutable_resource_load_by_shape()->::mcs::rpc::ResourceLoad::MergeFrom(from._internal_resource_load_by_shape());
  }
  if (from._internal_resources_available_changed() != 0) {
    _internal_set_resources_available_changed(from._internal_resources_available_changed());
  }
  if (from._internal_resource_load_changed() != 0) {
    _internal_set_resource_load_changed(from._internal_resource_load_changed());
  }
  if (from._internal_should_global_gc() != 0) {
    _internal_set_should_global_gc(from._internal_should_global_gc());
  }
  if (from._internal_object_pulls_queued() != 0) {
    _internal_set_object_pulls_queued(from._internal_object_pulls_queued());
  }
  if (from._internal_resources_normal_task_changed() != 0) {
    _internal_set_resources_normal_task_changed(from._internal_resources_normal_task_changed());
  }
  if (from._internal_cluster_full_of_actors_detected() != 0) {
    _internal_set_cluster_full_of_actors_detected(from._internal_cluster_full_of_actors_detected());
  }
  if (from._internal_resources_normal_task_timestamp() != 0) {
    _internal_set_resources_normal_task_timestamp(from._internal_resources_normal_task_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourcesData::CopyFrom(const ResourcesData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ResourcesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourcesData::IsInitialized() const {
  return true;
}

void ResourcesData::InternalSwap(ResourcesData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  resources_available_.InternalSwap(&other->resources_available_);
  resources_total_.InternalSwap(&other->resources_total_);
  resource_load_.InternalSwap(&other->resource_load_);
  resources_normal_task_.InternalSwap(&other->resources_normal_task_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_id_, GetArenaForAllocation(),
      &other->node_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_manager_address_, GetArenaForAllocation(),
      &other->node_manager_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourcesData, resources_normal_task_timestamp_)
      + sizeof(ResourcesData::resources_normal_task_timestamp_)
      - PROTOBUF_FIELD_OFFSET(ResourcesData, resource_load_by_shape_)>(
          reinterpret_cast<char*>(&resource_load_by_shape_),
          reinterpret_cast<char*>(&other->resource_load_by_shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourcesData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[39]);
}

// ===================================================================

class ResourceUsageBatchData::_Internal {
 public:
  static const ::mcs::rpc::ResourceLoad& resource_load_by_shape(const ResourceUsageBatchData* msg);
  static const ::mcs::rpc::PlacementGroupLoad& placement_group_load(const ResourceUsageBatchData* msg);
};

const ::mcs::rpc::ResourceLoad&
ResourceUsageBatchData::_Internal::resource_load_by_shape(const ResourceUsageBatchData* msg) {
  return *msg->resource_load_by_shape_;
}
const ::mcs::rpc::PlacementGroupLoad&
ResourceUsageBatchData::_Internal::placement_group_load(const ResourceUsageBatchData* msg) {
  return *msg->placement_group_load_;
}
ResourceUsageBatchData::ResourceUsageBatchData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  batch_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.ResourceUsageBatchData)
}
ResourceUsageBatchData::ResourceUsageBatchData(const ResourceUsageBatchData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      batch_(from.batch_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_resource_load_by_shape()) {
    resource_load_by_shape_ = new ::mcs::rpc::ResourceLoad(*from.resource_load_by_shape_);
  } else {
    resource_load_by_shape_ = nullptr;
  }
  if (from._internal_has_placement_group_load()) {
    placement_group_load_ = new ::mcs::rpc::PlacementGroupLoad(*from.placement_group_load_);
  } else {
    placement_group_load_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.ResourceUsageBatchData)
}

inline void ResourceUsageBatchData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&resource_load_by_shape_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&placement_group_load_) -
    reinterpret_cast<char*>(&resource_load_by_shape_)) + sizeof(placement_group_load_));
}

ResourceUsageBatchData::~ResourceUsageBatchData() {
  // @@protoc_insertion_point(destructor:mcs.rpc.ResourceUsageBatchData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResourceUsageBatchData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete resource_load_by_shape_;
  if (this != internal_default_instance()) delete placement_group_load_;
}

void ResourceUsageBatchData::ArenaDtor(void* object) {
  ResourceUsageBatchData* _this = reinterpret_cast< ResourceUsageBatchData* >(object);
  (void)_this;
}
void ResourceUsageBatchData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceUsageBatchData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResourceUsageBatchData::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.ResourceUsageBatchData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  batch_.Clear();
  if (GetArenaForAllocation() == nullptr && resource_load_by_shape_ != nullptr) {
    delete resource_load_by_shape_;
  }
  resource_load_by_shape_ = nullptr;
  if (GetArenaForAllocation() == nullptr && placement_group_load_ != nullptr) {
    delete placement_group_load_;
  }
  placement_group_load_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceUsageBatchData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mcs.rpc.ResourcesData batch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_batch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.ResourceLoad resource_load_by_shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_load_by_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.PlacementGroupLoad placement_group_load = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_placement_group_load(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceUsageBatchData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.ResourceUsageBatchData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mcs.rpc.ResourcesData batch = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_batch_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_batch(i), target, stream);
  }

  // .mcs.rpc.ResourceLoad resource_load_by_shape = 2;
  if (this->_internal_has_resource_load_by_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::resource_load_by_shape(this), target, stream);
  }

  // .mcs.rpc.PlacementGroupLoad placement_group_load = 3;
  if (this->_internal_has_placement_group_load()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::placement_group_load(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.ResourceUsageBatchData)
  return target;
}

size_t ResourceUsageBatchData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.ResourceUsageBatchData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mcs.rpc.ResourcesData batch = 1;
  total_size += 1UL * this->_internal_batch_size();
  for (const auto& msg : this->batch_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .mcs.rpc.ResourceLoad resource_load_by_shape = 2;
  if (this->_internal_has_resource_load_by_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resource_load_by_shape_);
  }

  // .mcs.rpc.PlacementGroupLoad placement_group_load = 3;
  if (this->_internal_has_placement_group_load()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *placement_group_load_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceUsageBatchData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResourceUsageBatchData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceUsageBatchData::GetClassData() const { return &_class_data_; }

void ResourceUsageBatchData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ResourceUsageBatchData *>(to)->MergeFrom(
      static_cast<const ResourceUsageBatchData &>(from));
}


void ResourceUsageBatchData::MergeFrom(const ResourceUsageBatchData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.ResourceUsageBatchData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  batch_.MergeFrom(from.batch_);
  if (from._internal_has_resource_load_by_shape()) {
    _internal_mutable_resource_load_by_shape()->::mcs::rpc::ResourceLoad::MergeFrom(from._internal_resource_load_by_shape());
  }
  if (from._internal_has_placement_group_load()) {
    _internal_mutable_placement_group_load()->::mcs::rpc::PlacementGroupLoad::MergeFrom(from._internal_placement_group_load());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceUsageBatchData::CopyFrom(const ResourceUsageBatchData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.ResourceUsageBatchData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceUsageBatchData::IsInitialized() const {
  return true;
}

void ResourceUsageBatchData::InternalSwap(ResourceUsageBatchData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  batch_.InternalSwap(&other->batch_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceUsageBatchData, placement_group_load_)
      + sizeof(ResourceUsageBatchData::placement_group_load_)
      - PROTOBUF_FIELD_OFFSET(ResourceUsageBatchData, resource_load_by_shape_)>(
          reinterpret_cast<char*>(&resource_load_by_shape_),
          reinterpret_cast<char*>(&other->resource_load_by_shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceUsageBatchData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[40]);
}

// ===================================================================

class PlacementGroupLoad::_Internal {
 public:
};

PlacementGroupLoad::PlacementGroupLoad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  placement_group_data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.PlacementGroupLoad)
}
PlacementGroupLoad::PlacementGroupLoad(const PlacementGroupLoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      placement_group_data_(from.placement_group_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.PlacementGroupLoad)
}

inline void PlacementGroupLoad::SharedCtor() {
}

PlacementGroupLoad::~PlacementGroupLoad() {
  // @@protoc_insertion_point(destructor:mcs.rpc.PlacementGroupLoad)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlacementGroupLoad::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlacementGroupLoad::ArenaDtor(void* object) {
  PlacementGroupLoad* _this = reinterpret_cast< PlacementGroupLoad* >(object);
  (void)_this;
}
void PlacementGroupLoad::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlacementGroupLoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlacementGroupLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.PlacementGroupLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  placement_group_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlacementGroupLoad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mcs.rpc.PlacementGroupTableData placement_group_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_placement_group_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlacementGroupLoad::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.PlacementGroupLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mcs.rpc.PlacementGroupTableData placement_group_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_placement_group_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_placement_group_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.PlacementGroupLoad)
  return target;
}

size_t PlacementGroupLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.PlacementGroupLoad)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mcs.rpc.PlacementGroupTableData placement_group_data = 1;
  total_size += 1UL * this->_internal_placement_group_data_size();
  for (const auto& msg : this->placement_group_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlacementGroupLoad::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlacementGroupLoad::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlacementGroupLoad::GetClassData() const { return &_class_data_; }

void PlacementGroupLoad::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PlacementGroupLoad *>(to)->MergeFrom(
      static_cast<const PlacementGroupLoad &>(from));
}


void PlacementGroupLoad::MergeFrom(const PlacementGroupLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.PlacementGroupLoad)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  placement_group_data_.MergeFrom(from.placement_group_data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlacementGroupLoad::CopyFrom(const PlacementGroupLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.PlacementGroupLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlacementGroupLoad::IsInitialized() const {
  return true;
}

void PlacementGroupLoad::InternalSwap(PlacementGroupLoad* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  placement_group_data_.InternalSwap(&other->placement_group_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlacementGroupLoad::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[41]);
}

// ===================================================================

class PlacementGroupStats::_Internal {
 public:
};

PlacementGroupStats::PlacementGroupStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.PlacementGroupStats)
}
PlacementGroupStats::PlacementGroupStats(const PlacementGroupStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&creation_request_received_ns_, &from.creation_request_received_ns_,
    static_cast<size_t>(reinterpret_cast<char*>(&scheduling_state_) -
    reinterpret_cast<char*>(&creation_request_received_ns_)) + sizeof(scheduling_state_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.PlacementGroupStats)
}

inline void PlacementGroupStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&creation_request_received_ns_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scheduling_state_) -
    reinterpret_cast<char*>(&creation_request_received_ns_)) + sizeof(scheduling_state_));
}

PlacementGroupStats::~PlacementGroupStats() {
  // @@protoc_insertion_point(destructor:mcs.rpc.PlacementGroupStats)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlacementGroupStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlacementGroupStats::ArenaDtor(void* object) {
  PlacementGroupStats* _this = reinterpret_cast< PlacementGroupStats* >(object);
  (void)_this;
}
void PlacementGroupStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlacementGroupStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlacementGroupStats::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.PlacementGroupStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&creation_request_received_ns_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scheduling_state_) -
      reinterpret_cast<char*>(&creation_request_received_ns_)) + sizeof(scheduling_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlacementGroupStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 creation_request_received_ns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          creation_request_received_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 scheduling_started_time_ns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          scheduling_started_time_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 scheduling_latency_us = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          scheduling_latency_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end_to_end_creation_latency_us = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          end_to_end_creation_latency_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 scheduling_attempt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          scheduling_attempt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double highest_retry_delay_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          highest_retry_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.PlacementGroupStats.SchedulingState scheduling_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scheduling_state(static_cast<::mcs::rpc::PlacementGroupStats_SchedulingState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlacementGroupStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.PlacementGroupStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 creation_request_received_ns = 2;
  if (this->_internal_creation_request_received_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_creation_request_received_ns(), target);
  }

  // int64 scheduling_started_time_ns = 3;
  if (this->_internal_scheduling_started_time_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_scheduling_started_time_ns(), target);
  }

  // int64 scheduling_latency_us = 4;
  if (this->_internal_scheduling_latency_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_scheduling_latency_us(), target);
  }

  // int64 end_to_end_creation_latency_us = 5;
  if (this->_internal_end_to_end_creation_latency_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_end_to_end_creation_latency_us(), target);
  }

  // uint32 scheduling_attempt = 6;
  if (this->_internal_scheduling_attempt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_scheduling_attempt(), target);
  }

  // double highest_retry_delay_ms = 7;
  if (!(this->_internal_highest_retry_delay_ms() <= 0 && this->_internal_highest_retry_delay_ms() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_highest_retry_delay_ms(), target);
  }

  // .mcs.rpc.PlacementGroupStats.SchedulingState scheduling_state = 8;
  if (this->_internal_scheduling_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_scheduling_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.PlacementGroupStats)
  return target;
}

size_t PlacementGroupStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.PlacementGroupStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 creation_request_received_ns = 2;
  if (this->_internal_creation_request_received_ns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_creation_request_received_ns());
  }

  // int64 scheduling_started_time_ns = 3;
  if (this->_internal_scheduling_started_time_ns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_scheduling_started_time_ns());
  }

  // int64 scheduling_latency_us = 4;
  if (this->_internal_scheduling_latency_us() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_scheduling_latency_us());
  }

  // int64 end_to_end_creation_latency_us = 5;
  if (this->_internal_end_to_end_creation_latency_us() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_to_end_creation_latency_us());
  }

  // double highest_retry_delay_ms = 7;
  if (!(this->_internal_highest_retry_delay_ms() <= 0 && this->_internal_highest_retry_delay_ms() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 scheduling_attempt = 6;
  if (this->_internal_scheduling_attempt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_scheduling_attempt());
  }

  // .mcs.rpc.PlacementGroupStats.SchedulingState scheduling_state = 8;
  if (this->_internal_scheduling_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scheduling_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlacementGroupStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlacementGroupStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlacementGroupStats::GetClassData() const { return &_class_data_; }

void PlacementGroupStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PlacementGroupStats *>(to)->MergeFrom(
      static_cast<const PlacementGroupStats &>(from));
}


void PlacementGroupStats::MergeFrom(const PlacementGroupStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.PlacementGroupStats)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_creation_request_received_ns() != 0) {
    _internal_set_creation_request_received_ns(from._internal_creation_request_received_ns());
  }
  if (from._internal_scheduling_started_time_ns() != 0) {
    _internal_set_scheduling_started_time_ns(from._internal_scheduling_started_time_ns());
  }
  if (from._internal_scheduling_latency_us() != 0) {
    _internal_set_scheduling_latency_us(from._internal_scheduling_latency_us());
  }
  if (from._internal_end_to_end_creation_latency_us() != 0) {
    _internal_set_end_to_end_creation_latency_us(from._internal_end_to_end_creation_latency_us());
  }
  if (!(from._internal_highest_retry_delay_ms() <= 0 && from._internal_highest_retry_delay_ms() >= 0)) {
    _internal_set_highest_retry_delay_ms(from._internal_highest_retry_delay_ms());
  }
  if (from._internal_scheduling_attempt() != 0) {
    _internal_set_scheduling_attempt(from._internal_scheduling_attempt());
  }
  if (from._internal_scheduling_state() != 0) {
    _internal_set_scheduling_state(from._internal_scheduling_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlacementGroupStats::CopyFrom(const PlacementGroupStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.PlacementGroupStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlacementGroupStats::IsInitialized() const {
  return true;
}

void PlacementGroupStats::InternalSwap(PlacementGroupStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlacementGroupStats, scheduling_state_)
      + sizeof(PlacementGroupStats::scheduling_state_)
      - PROTOBUF_FIELD_OFFSET(PlacementGroupStats, creation_request_received_ns_)>(
          reinterpret_cast<char*>(&creation_request_received_ns_),
          reinterpret_cast<char*>(&other->creation_request_received_ns_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlacementGroupStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[42]);
}

// ===================================================================

class PlacementGroupTableData::_Internal {
 public:
  static const ::mcs::rpc::PlacementGroupStats& stats(const PlacementGroupTableData* msg);
};

const ::mcs::rpc::PlacementGroupStats&
PlacementGroupTableData::_Internal::stats(const PlacementGroupTableData* msg) {
  return *msg->stats_;
}
void PlacementGroupTableData::clear_bundles() {
  bundles_.Clear();
}
PlacementGroupTableData::PlacementGroupTableData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bundles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mcs.rpc.PlacementGroupTableData)
}
PlacementGroupTableData::PlacementGroupTableData(const PlacementGroupTableData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bundles_(from.bundles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  placement_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_placement_group_id().empty()) {
    placement_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_placement_group_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  creator_job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_creator_job_id().empty()) {
    creator_job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_creator_job_id(), 
      GetArenaForAllocation());
  }
  creator_actor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_creator_actor_id().empty()) {
    creator_actor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_creator_actor_id(), 
      GetArenaForAllocation());
  }
  mcs_namespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mcs_namespace().empty()) {
    mcs_namespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mcs_namespace(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_stats()) {
    stats_ = new ::mcs::rpc::PlacementGroupStats(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  ::memcpy(&strategy_, &from.strategy_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_detached_) -
    reinterpret_cast<char*>(&strategy_)) + sizeof(is_detached_));
  // @@protoc_insertion_point(copy_constructor:mcs.rpc.PlacementGroupTableData)
}

inline void PlacementGroupTableData::SharedCtor() {
placement_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
creator_job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
creator_actor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mcs_namespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stats_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_detached_) -
    reinterpret_cast<char*>(&stats_)) + sizeof(is_detached_));
}

PlacementGroupTableData::~PlacementGroupTableData() {
  // @@protoc_insertion_point(destructor:mcs.rpc.PlacementGroupTableData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlacementGroupTableData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  placement_group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creator_job_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creator_actor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mcs_namespace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stats_;
}

void PlacementGroupTableData::ArenaDtor(void* object) {
  PlacementGroupTableData* _this = reinterpret_cast< PlacementGroupTableData* >(object);
  (void)_this;
}
void PlacementGroupTableData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlacementGroupTableData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlacementGroupTableData::Clear() {
// @@protoc_insertion_point(message_clear_start:mcs.rpc.PlacementGroupTableData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bundles_.Clear();
  placement_group_id_.ClearToEmpty();
  name_.ClearToEmpty();
  creator_job_id_.ClearToEmpty();
  creator_actor_id_.ClearToEmpty();
  mcs_namespace_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
  ::memset(&strategy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_detached_) -
      reinterpret_cast<char*>(&strategy_)) + sizeof(is_detached_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlacementGroupTableData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes placement_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_placement_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.PlacementGroupTableData.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mcs.rpc.Bundle bundles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bundles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.PlacementStrategy strategy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_strategy(static_cast<::mcs::rpc::PlacementStrategy>(val));
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.PlacementGroupTableData.PlacementGroupState state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::mcs::rpc::PlacementGroupTableData_PlacementGroupState>(val));
        } else goto handle_unusual;
        continue;
      // bytes creator_job_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_creator_job_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes creator_actor_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_creator_actor_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool creator_job_dead = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          creator_job_dead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool creator_actor_dead = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          creator_actor_dead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_detached = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          is_detached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mcs_namespace = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_mcs_namespace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mcs.rpc.PlacementGroupTableData.mcs_namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mcs.rpc.PlacementGroupStats stats = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double max_cpu_fraction_per_node = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          max_cpu_fraction_per_node_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlacementGroupTableData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mcs.rpc.PlacementGroupTableData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes placement_group_id = 1;
  if (!this->_internal_placement_group_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_placement_group_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.PlacementGroupTableData.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .mcs.rpc.Bundle bundles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bundles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_bundles(i), target, stream);
  }

  // .mcs.rpc.PlacementStrategy strategy = 4;
  if (this->_internal_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_strategy(), target);
  }

  // .mcs.rpc.PlacementGroupTableData.PlacementGroupState state = 5;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_state(), target);
  }

  // bytes creator_job_id = 6;
  if (!this->_internal_creator_job_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_creator_job_id(), target);
  }

  // bytes creator_actor_id = 7;
  if (!this->_internal_creator_actor_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_creator_actor_id(), target);
  }

  // bool creator_job_dead = 8;
  if (this->_internal_creator_job_dead() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_creator_job_dead(), target);
  }

  // bool creator_actor_dead = 9;
  if (this->_internal_creator_actor_dead() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_creator_actor_dead(), target);
  }

  // bool is_detached = 10;
  if (this->_internal_is_detached() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_detached(), target);
  }

  // string mcs_namespace = 11;
  if (!this->_internal_mcs_namespace().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mcs_namespace().data(), static_cast<int>(this->_internal_mcs_namespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mcs.rpc.PlacementGroupTableData.mcs_namespace");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_mcs_namespace(), target);
  }

  // .mcs.rpc.PlacementGroupStats stats = 12;
  if (this->_internal_has_stats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::stats(this), target, stream);
  }

  // double max_cpu_fraction_per_node = 13;
  if (!(this->_internal_max_cpu_fraction_per_node() <= 0 && this->_internal_max_cpu_fraction_per_node() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_max_cpu_fraction_per_node(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mcs.rpc.PlacementGroupTableData)
  return target;
}

size_t PlacementGroupTableData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mcs.rpc.PlacementGroupTableData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mcs.rpc.Bundle bundles = 3;
  total_size += 1UL * this->_internal_bundles_size();
  for (const auto& msg : this->bundles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes placement_group_id = 1;
  if (!this->_internal_placement_group_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_placement_group_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes creator_job_id = 6;
  if (!this->_internal_creator_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_creator_job_id());
  }

  // bytes creator_actor_id = 7;
  if (!this->_internal_creator_actor_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_creator_actor_id());
  }

  // string mcs_namespace = 11;
  if (!this->_internal_mcs_namespace().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mcs_namespace());
  }

  // .mcs.rpc.PlacementGroupStats stats = 12;
  if (this->_internal_has_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stats_);
  }

  // .mcs.rpc.PlacementStrategy strategy = 4;
  if (this->_internal_strategy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_strategy());
  }

  // .mcs.rpc.PlacementGroupTableData.PlacementGroupState state = 5;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // double max_cpu_fraction_per_node = 13;
  if (!(this->_internal_max_cpu_fraction_per_node() <= 0 && this->_internal_max_cpu_fraction_per_node() >= 0)) {
    total_size += 1 + 8;
  }

  // bool creator_job_dead = 8;
  if (this->_internal_creator_job_dead() != 0) {
    total_size += 1 + 1;
  }

  // bool creator_actor_dead = 9;
  if (this->_internal_creator_actor_dead() != 0) {
    total_size += 1 + 1;
  }

  // bool is_detached = 10;
  if (this->_internal_is_detached() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlacementGroupTableData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlacementGroupTableData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlacementGroupTableData::GetClassData() const { return &_class_data_; }

void PlacementGroupTableData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PlacementGroupTableData *>(to)->MergeFrom(
      static_cast<const PlacementGroupTableData &>(from));
}


void PlacementGroupTableData::MergeFrom(const PlacementGroupTableData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mcs.rpc.PlacementGroupTableData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bundles_.MergeFrom(from.bundles_);
  if (!from._internal_placement_group_id().empty()) {
    _internal_set_placement_group_id(from._internal_placement_group_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_creator_job_id().empty()) {
    _internal_set_creator_job_id(from._internal_creator_job_id());
  }
  if (!from._internal_creator_actor_id().empty()) {
    _internal_set_creator_actor_id(from._internal_creator_actor_id());
  }
  if (!from._internal_mcs_namespace().empty()) {
    _internal_set_mcs_namespace(from._internal_mcs_namespace());
  }
  if (from._internal_has_stats()) {
    _internal_mutable_stats()->::mcs::rpc::PlacementGroupStats::MergeFrom(from._internal_stats());
  }
  if (from._internal_strategy() != 0) {
    _internal_set_strategy(from._internal_strategy());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (!(from._internal_max_cpu_fraction_per_node() <= 0 && from._internal_max_cpu_fraction_per_node() >= 0)) {
    _internal_set_max_cpu_fraction_per_node(from._internal_max_cpu_fraction_per_node());
  }
  if (from._internal_creator_job_dead() != 0) {
    _internal_set_creator_job_dead(from._internal_creator_job_dead());
  }
  if (from._internal_creator_actor_dead() != 0) {
    _internal_set_creator_actor_dead(from._internal_creator_actor_dead());
  }
  if (from._internal_is_detached() != 0) {
    _internal_set_is_detached(from._internal_is_detached());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlacementGroupTableData::CopyFrom(const PlacementGroupTableData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mcs.rpc.PlacementGroupTableData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlacementGroupTableData::IsInitialized() const {
  return true;
}

void PlacementGroupTableData::InternalSwap(PlacementGroupTableData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bundles_.InternalSwap(&other->bundles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &placement_group_id_, GetArenaForAllocation(),
      &other->placement_group_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &creator_job_id_, GetArenaForAllocation(),
      &other->creator_job_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &creator_actor_id_, GetArenaForAllocation(),
      &other->creator_actor_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mcs_namespace_, GetArenaForAllocation(),
      &other->mcs_namespace_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlacementGroupTableData, is_detached_)
      + sizeof(PlacementGroupTableData::is_detached_)
      - PROTOBUF_FIELD_OFFSET(PlacementGroupTableData, stats_)>(
          reinterpret_cast<char*>(&stats_),
          reinterpret_cast<char*>(&other->stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlacementGroupTableData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcs_2eproto_getter, &descriptor_table_gcs_2eproto_once,
      file_level_metadata_gcs_2eproto[43]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc
}  // namespace mcs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mcs::rpc::GcsEntry* Arena::CreateMaybeMessage< ::mcs::rpc::GcsEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::GcsEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ObjectTableData* Arena::CreateMaybeMessage< ::mcs::rpc::ObjectTableData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ObjectTableData >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ActorTableData_RequiredResourcesEntry_DoNotUse* Arena::CreateMaybeMessage< ::mcs::rpc::ActorTableData_RequiredResourcesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ActorTableData_RequiredResourcesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ActorTableData* Arena::CreateMaybeMessage< ::mcs::rpc::ActorTableData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ActorTableData >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ErrorTableData* Arena::CreateMaybeMessage< ::mcs::rpc::ErrorTableData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ErrorTableData >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ScheduleData_SchedulePlanEntry_DoNotUse* Arena::CreateMaybeMessage< ::mcs::rpc::ScheduleData_SchedulePlanEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ScheduleData_SchedulePlanEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ScheduleData* Arena::CreateMaybeMessage< ::mcs::rpc::ScheduleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ScheduleData >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ProfileEventEntry* Arena::CreateMaybeMessage< ::mcs::rpc::ProfileEventEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ProfileEventEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ProfileEvents* Arena::CreateMaybeMessage< ::mcs::rpc::ProfileEvents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ProfileEvents >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::TaskStateUpdate* Arena::CreateMaybeMessage< ::mcs::rpc::TaskStateUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::TaskStateUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::TaskEvents* Arena::CreateMaybeMessage< ::mcs::rpc::TaskEvents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::TaskEvents >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::TaskEventData* Arena::CreateMaybeMessage< ::mcs::rpc::TaskEventData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::TaskEventData >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ResourceTableData* Arena::CreateMaybeMessage< ::mcs::rpc::ResourceTableData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ResourceTableData >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::AvailableResources_ResourcesAvailableEntry_DoNotUse* Arena::CreateMaybeMessage< ::mcs::rpc::AvailableResources_ResourcesAvailableEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::AvailableResources_ResourcesAvailableEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::AvailableResources* Arena::CreateMaybeMessage< ::mcs::rpc::AvailableResources >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::AvailableResources >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::GcsNodeInfo_ResourcesTotalEntry_DoNotUse* Arena::CreateMaybeMessage< ::mcs::rpc::GcsNodeInfo_ResourcesTotalEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::GcsNodeInfo_ResourcesTotalEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::GcsNodeInfo* Arena::CreateMaybeMessage< ::mcs::rpc::GcsNodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::GcsNodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::HeartbeatTableData* Arena::CreateMaybeMessage< ::mcs::rpc::HeartbeatTableData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::HeartbeatTableData >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::JobConfig_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::mcs::rpc::JobConfig_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::JobConfig_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::JobConfig* Arena::CreateMaybeMessage< ::mcs::rpc::JobConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::JobConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::JobTableData* Arena::CreateMaybeMessage< ::mcs::rpc::JobTableData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::JobTableData >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::WorkerTableData_WorkerInfoEntry_DoNotUse* Arena::CreateMaybeMessage< ::mcs::rpc::WorkerTableData_WorkerInfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::WorkerTableData_WorkerInfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::WorkerTableData* Arena::CreateMaybeMessage< ::mcs::rpc::WorkerTableData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::WorkerTableData >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::WorkerDeltaData* Arena::CreateMaybeMessage< ::mcs::rpc::WorkerDeltaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::WorkerDeltaData >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ResourceMap_ItemsEntry_DoNotUse* Arena::CreateMaybeMessage< ::mcs::rpc::ResourceMap_ItemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ResourceMap_ItemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ResourceMap* Arena::CreateMaybeMessage< ::mcs::rpc::ResourceMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ResourceMap >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::StoredConfig* Arena::CreateMaybeMessage< ::mcs::rpc::StoredConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::StoredConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::NodeResourceChange_UpdatedResourcesEntry_DoNotUse* Arena::CreateMaybeMessage< ::mcs::rpc::NodeResourceChange_UpdatedResourcesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::NodeResourceChange_UpdatedResourcesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::NodeResourceChange* Arena::CreateMaybeMessage< ::mcs::rpc::NodeResourceChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::NodeResourceChange >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::PubSubMessage* Arena::CreateMaybeMessage< ::mcs::rpc::PubSubMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::PubSubMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ResourceUpdate* Arena::CreateMaybeMessage< ::mcs::rpc::ResourceUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ResourceUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ResourceUsageBroadcastData* Arena::CreateMaybeMessage< ::mcs::rpc::ResourceUsageBroadcastData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ResourceUsageBroadcastData >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ResourceDemand_ShapeEntry_DoNotUse* Arena::CreateMaybeMessage< ::mcs::rpc::ResourceDemand_ShapeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ResourceDemand_ShapeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ResourceDemand* Arena::CreateMaybeMessage< ::mcs::rpc::ResourceDemand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ResourceDemand >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ResourceLoad* Arena::CreateMaybeMessage< ::mcs::rpc::ResourceLoad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ResourceLoad >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ResourcesData_ResourcesAvailableEntry_DoNotUse* Arena::CreateMaybeMessage< ::mcs::rpc::ResourcesData_ResourcesAvailableEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ResourcesData_ResourcesAvailableEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ResourcesData_ResourcesTotalEntry_DoNotUse* Arena::CreateMaybeMessage< ::mcs::rpc::ResourcesData_ResourcesTotalEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ResourcesData_ResourcesTotalEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ResourcesData_ResourceLoadEntry_DoNotUse* Arena::CreateMaybeMessage< ::mcs::rpc::ResourcesData_ResourceLoadEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ResourcesData_ResourceLoadEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ResourcesData_ResourcesNormalTaskEntry_DoNotUse* Arena::CreateMaybeMessage< ::mcs::rpc::ResourcesData_ResourcesNormalTaskEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ResourcesData_ResourcesNormalTaskEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ResourcesData* Arena::CreateMaybeMessage< ::mcs::rpc::ResourcesData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ResourcesData >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::ResourceUsageBatchData* Arena::CreateMaybeMessage< ::mcs::rpc::ResourceUsageBatchData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::ResourceUsageBatchData >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::PlacementGroupLoad* Arena::CreateMaybeMessage< ::mcs::rpc::PlacementGroupLoad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::PlacementGroupLoad >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::PlacementGroupStats* Arena::CreateMaybeMessage< ::mcs::rpc::PlacementGroupStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::PlacementGroupStats >(arena);
}
template<> PROTOBUF_NOINLINE ::mcs::rpc::PlacementGroupTableData* Arena::CreateMaybeMessage< ::mcs::rpc::PlacementGroupTableData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mcs::rpc::PlacementGroupTableData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
