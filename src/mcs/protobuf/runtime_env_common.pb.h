// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: runtime_env_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_runtime_5fenv_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_runtime_5fenv_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_runtime_5fenv_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_runtime_5fenv_5fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_runtime_5fenv_5fcommon_2eproto;
namespace mcs {
namespace rpc {
class RuntimeEnvConfig;
struct RuntimeEnvConfigDefaultTypeInternal;
extern RuntimeEnvConfigDefaultTypeInternal _RuntimeEnvConfig_default_instance_;
class RuntimeEnvInfo;
struct RuntimeEnvInfoDefaultTypeInternal;
extern RuntimeEnvInfoDefaultTypeInternal _RuntimeEnvInfo_default_instance_;
class RuntimeEnvState;
struct RuntimeEnvStateDefaultTypeInternal;
extern RuntimeEnvStateDefaultTypeInternal _RuntimeEnvState_default_instance_;
class RuntimeEnvUris;
struct RuntimeEnvUrisDefaultTypeInternal;
extern RuntimeEnvUrisDefaultTypeInternal _RuntimeEnvUris_default_instance_;
}  // namespace rpc
}  // namespace mcs
PROTOBUF_NAMESPACE_OPEN
template<> ::mcs::rpc::RuntimeEnvConfig* Arena::CreateMaybeMessage<::mcs::rpc::RuntimeEnvConfig>(Arena*);
template<> ::mcs::rpc::RuntimeEnvInfo* Arena::CreateMaybeMessage<::mcs::rpc::RuntimeEnvInfo>(Arena*);
template<> ::mcs::rpc::RuntimeEnvState* Arena::CreateMaybeMessage<::mcs::rpc::RuntimeEnvState>(Arena*);
template<> ::mcs::rpc::RuntimeEnvUris* Arena::CreateMaybeMessage<::mcs::rpc::RuntimeEnvUris>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mcs {
namespace rpc {

// ===================================================================

class RuntimeEnvUris final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mcs.rpc.RuntimeEnvUris) */ {
 public:
  inline RuntimeEnvUris() : RuntimeEnvUris(nullptr) {}
  ~RuntimeEnvUris() override;
  explicit constexpr RuntimeEnvUris(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RuntimeEnvUris(const RuntimeEnvUris& from);
  RuntimeEnvUris(RuntimeEnvUris&& from) noexcept
    : RuntimeEnvUris() {
    *this = ::std::move(from);
  }

  inline RuntimeEnvUris& operator=(const RuntimeEnvUris& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeEnvUris& operator=(RuntimeEnvUris&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RuntimeEnvUris& default_instance() {
    return *internal_default_instance();
  }
  static inline const RuntimeEnvUris* internal_default_instance() {
    return reinterpret_cast<const RuntimeEnvUris*>(
               &_RuntimeEnvUris_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RuntimeEnvUris& a, RuntimeEnvUris& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeEnvUris* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuntimeEnvUris* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuntimeEnvUris* New() const final {
    return new RuntimeEnvUris();
  }

  RuntimeEnvUris* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuntimeEnvUris>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RuntimeEnvUris& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RuntimeEnvUris& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeEnvUris* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mcs.rpc.RuntimeEnvUris";
  }
  protected:
  explicit RuntimeEnvUris(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPyModulesUrisFieldNumber = 2,
    kWorkingDirUriFieldNumber = 1,
  };
  // repeated string py_modules_uris = 2;
  int py_modules_uris_size() const;
  private:
  int _internal_py_modules_uris_size() const;
  public:
  void clear_py_modules_uris();
  const std::string& py_modules_uris(int index) const;
  std::string* mutable_py_modules_uris(int index);
  void set_py_modules_uris(int index, const std::string& value);
  void set_py_modules_uris(int index, std::string&& value);
  void set_py_modules_uris(int index, const char* value);
  void set_py_modules_uris(int index, const char* value, size_t size);
  std::string* add_py_modules_uris();
  void add_py_modules_uris(const std::string& value);
  void add_py_modules_uris(std::string&& value);
  void add_py_modules_uris(const char* value);
  void add_py_modules_uris(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& py_modules_uris() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_py_modules_uris();
  private:
  const std::string& _internal_py_modules_uris(int index) const;
  std::string* _internal_add_py_modules_uris();
  public:

  // string working_dir_uri = 1;
  void clear_working_dir_uri();
  const std::string& working_dir_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_working_dir_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_working_dir_uri();
  PROTOBUF_MUST_USE_RESULT std::string* release_working_dir_uri();
  void set_allocated_working_dir_uri(std::string* working_dir_uri);
  private:
  const std::string& _internal_working_dir_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_working_dir_uri(const std::string& value);
  std::string* _internal_mutable_working_dir_uri();
  public:

  // @@protoc_insertion_point(class_scope:mcs.rpc.RuntimeEnvUris)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> py_modules_uris_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr working_dir_uri_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_5fenv_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class RuntimeEnvConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mcs.rpc.RuntimeEnvConfig) */ {
 public:
  inline RuntimeEnvConfig() : RuntimeEnvConfig(nullptr) {}
  ~RuntimeEnvConfig() override;
  explicit constexpr RuntimeEnvConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RuntimeEnvConfig(const RuntimeEnvConfig& from);
  RuntimeEnvConfig(RuntimeEnvConfig&& from) noexcept
    : RuntimeEnvConfig() {
    *this = ::std::move(from);
  }

  inline RuntimeEnvConfig& operator=(const RuntimeEnvConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeEnvConfig& operator=(RuntimeEnvConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RuntimeEnvConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const RuntimeEnvConfig* internal_default_instance() {
    return reinterpret_cast<const RuntimeEnvConfig*>(
               &_RuntimeEnvConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RuntimeEnvConfig& a, RuntimeEnvConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeEnvConfig* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuntimeEnvConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuntimeEnvConfig* New() const final {
    return new RuntimeEnvConfig();
  }

  RuntimeEnvConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuntimeEnvConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RuntimeEnvConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RuntimeEnvConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeEnvConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mcs.rpc.RuntimeEnvConfig";
  }
  protected:
  explicit RuntimeEnvConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetupTimeoutSecondsFieldNumber = 1,
    kEagerInstallFieldNumber = 2,
  };
  // int32 setup_timeout_seconds = 1;
  void clear_setup_timeout_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 setup_timeout_seconds() const;
  void set_setup_timeout_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_setup_timeout_seconds() const;
  void _internal_set_setup_timeout_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool eager_install = 2;
  void clear_eager_install();
  bool eager_install() const;
  void set_eager_install(bool value);
  private:
  bool _internal_eager_install() const;
  void _internal_set_eager_install(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mcs.rpc.RuntimeEnvConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 setup_timeout_seconds_;
  bool eager_install_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_5fenv_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class RuntimeEnvInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mcs.rpc.RuntimeEnvInfo) */ {
 public:
  inline RuntimeEnvInfo() : RuntimeEnvInfo(nullptr) {}
  ~RuntimeEnvInfo() override;
  explicit constexpr RuntimeEnvInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RuntimeEnvInfo(const RuntimeEnvInfo& from);
  RuntimeEnvInfo(RuntimeEnvInfo&& from) noexcept
    : RuntimeEnvInfo() {
    *this = ::std::move(from);
  }

  inline RuntimeEnvInfo& operator=(const RuntimeEnvInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeEnvInfo& operator=(RuntimeEnvInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RuntimeEnvInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RuntimeEnvInfo* internal_default_instance() {
    return reinterpret_cast<const RuntimeEnvInfo*>(
               &_RuntimeEnvInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RuntimeEnvInfo& a, RuntimeEnvInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeEnvInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuntimeEnvInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuntimeEnvInfo* New() const final {
    return new RuntimeEnvInfo();
  }

  RuntimeEnvInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuntimeEnvInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RuntimeEnvInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RuntimeEnvInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeEnvInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mcs.rpc.RuntimeEnvInfo";
  }
  protected:
  explicit RuntimeEnvInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerializedRuntimeEnvFieldNumber = 1,
    kUrisFieldNumber = 2,
    kRuntimeEnvConfigFieldNumber = 3,
  };
  // string serialized_runtime_env = 1;
  void clear_serialized_runtime_env();
  const std::string& serialized_runtime_env() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serialized_runtime_env(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serialized_runtime_env();
  PROTOBUF_MUST_USE_RESULT std::string* release_serialized_runtime_env();
  void set_allocated_serialized_runtime_env(std::string* serialized_runtime_env);
  private:
  const std::string& _internal_serialized_runtime_env() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serialized_runtime_env(const std::string& value);
  std::string* _internal_mutable_serialized_runtime_env();
  public:

  // .mcs.rpc.RuntimeEnvUris uris = 2;
  bool has_uris() const;
  private:
  bool _internal_has_uris() const;
  public:
  void clear_uris();
  const ::mcs::rpc::RuntimeEnvUris& uris() const;
  PROTOBUF_MUST_USE_RESULT ::mcs::rpc::RuntimeEnvUris* release_uris();
  ::mcs::rpc::RuntimeEnvUris* mutable_uris();
  void set_allocated_uris(::mcs::rpc::RuntimeEnvUris* uris);
  private:
  const ::mcs::rpc::RuntimeEnvUris& _internal_uris() const;
  ::mcs::rpc::RuntimeEnvUris* _internal_mutable_uris();
  public:
  void unsafe_arena_set_allocated_uris(
      ::mcs::rpc::RuntimeEnvUris* uris);
  ::mcs::rpc::RuntimeEnvUris* unsafe_arena_release_uris();

  // .mcs.rpc.RuntimeEnvConfig runtime_env_config = 3;
  bool has_runtime_env_config() const;
  private:
  bool _internal_has_runtime_env_config() const;
  public:
  void clear_runtime_env_config();
  const ::mcs::rpc::RuntimeEnvConfig& runtime_env_config() const;
  PROTOBUF_MUST_USE_RESULT ::mcs::rpc::RuntimeEnvConfig* release_runtime_env_config();
  ::mcs::rpc::RuntimeEnvConfig* mutable_runtime_env_config();
  void set_allocated_runtime_env_config(::mcs::rpc::RuntimeEnvConfig* runtime_env_config);
  private:
  const ::mcs::rpc::RuntimeEnvConfig& _internal_runtime_env_config() const;
  ::mcs::rpc::RuntimeEnvConfig* _internal_mutable_runtime_env_config();
  public:
  void unsafe_arena_set_allocated_runtime_env_config(
      ::mcs::rpc::RuntimeEnvConfig* runtime_env_config);
  ::mcs::rpc::RuntimeEnvConfig* unsafe_arena_release_runtime_env_config();

  // @@protoc_insertion_point(class_scope:mcs.rpc.RuntimeEnvInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_runtime_env_;
  ::mcs::rpc::RuntimeEnvUris* uris_;
  ::mcs::rpc::RuntimeEnvConfig* runtime_env_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_5fenv_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class RuntimeEnvState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mcs.rpc.RuntimeEnvState) */ {
 public:
  inline RuntimeEnvState() : RuntimeEnvState(nullptr) {}
  ~RuntimeEnvState() override;
  explicit constexpr RuntimeEnvState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RuntimeEnvState(const RuntimeEnvState& from);
  RuntimeEnvState(RuntimeEnvState&& from) noexcept
    : RuntimeEnvState() {
    *this = ::std::move(from);
  }

  inline RuntimeEnvState& operator=(const RuntimeEnvState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeEnvState& operator=(RuntimeEnvState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RuntimeEnvState& default_instance() {
    return *internal_default_instance();
  }
  static inline const RuntimeEnvState* internal_default_instance() {
    return reinterpret_cast<const RuntimeEnvState*>(
               &_RuntimeEnvState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RuntimeEnvState& a, RuntimeEnvState& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeEnvState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuntimeEnvState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuntimeEnvState* New() const final {
    return new RuntimeEnvState();
  }

  RuntimeEnvState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuntimeEnvState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RuntimeEnvState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RuntimeEnvState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeEnvState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mcs.rpc.RuntimeEnvState";
  }
  protected:
  explicit RuntimeEnvState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuntimeEnvFieldNumber = 1,
    kErrorFieldNumber = 4,
    kRefCntFieldNumber = 2,
    kCreationTimeMsFieldNumber = 5,
    kSuccessFieldNumber = 3,
  };
  // string runtime_env = 1;
  void clear_runtime_env();
  const std::string& runtime_env() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_runtime_env(ArgT0&& arg0, ArgT... args);
  std::string* mutable_runtime_env();
  PROTOBUF_MUST_USE_RESULT std::string* release_runtime_env();
  void set_allocated_runtime_env(std::string* runtime_env);
  private:
  const std::string& _internal_runtime_env() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_runtime_env(const std::string& value);
  std::string* _internal_mutable_runtime_env();
  public:

  // optional string error = 4;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // int64 ref_cnt = 2;
  void clear_ref_cnt();
  ::PROTOBUF_NAMESPACE_ID::int64 ref_cnt() const;
  void set_ref_cnt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ref_cnt() const;
  void _internal_set_ref_cnt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 creation_time_ms = 5;
  bool has_creation_time_ms() const;
  private:
  bool _internal_has_creation_time_ms() const;
  public:
  void clear_creation_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 creation_time_ms() const;
  void set_creation_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_creation_time_ms() const;
  void _internal_set_creation_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool success = 3;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mcs.rpc.RuntimeEnvState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_env_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::PROTOBUF_NAMESPACE_ID::int64 ref_cnt_;
  ::PROTOBUF_NAMESPACE_ID::int64 creation_time_ms_;
  bool success_;
  friend struct ::TableStruct_runtime_5fenv_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RuntimeEnvUris

// string working_dir_uri = 1;
inline void RuntimeEnvUris::clear_working_dir_uri() {
  working_dir_uri_.ClearToEmpty();
}
inline const std::string& RuntimeEnvUris::working_dir_uri() const {
  // @@protoc_insertion_point(field_get:mcs.rpc.RuntimeEnvUris.working_dir_uri)
  return _internal_working_dir_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RuntimeEnvUris::set_working_dir_uri(ArgT0&& arg0, ArgT... args) {
 
 working_dir_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mcs.rpc.RuntimeEnvUris.working_dir_uri)
}
inline std::string* RuntimeEnvUris::mutable_working_dir_uri() {
  std::string* _s = _internal_mutable_working_dir_uri();
  // @@protoc_insertion_point(field_mutable:mcs.rpc.RuntimeEnvUris.working_dir_uri)
  return _s;
}
inline const std::string& RuntimeEnvUris::_internal_working_dir_uri() const {
  return working_dir_uri_.Get();
}
inline void RuntimeEnvUris::_internal_set_working_dir_uri(const std::string& value) {
  
  working_dir_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RuntimeEnvUris::_internal_mutable_working_dir_uri() {
  
  return working_dir_uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RuntimeEnvUris::release_working_dir_uri() {
  // @@protoc_insertion_point(field_release:mcs.rpc.RuntimeEnvUris.working_dir_uri)
  return working_dir_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RuntimeEnvUris::set_allocated_working_dir_uri(std::string* working_dir_uri) {
  if (working_dir_uri != nullptr) {
    
  } else {
    
  }
  working_dir_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), working_dir_uri,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mcs.rpc.RuntimeEnvUris.working_dir_uri)
}

// repeated string py_modules_uris = 2;
inline int RuntimeEnvUris::_internal_py_modules_uris_size() const {
  return py_modules_uris_.size();
}
inline int RuntimeEnvUris::py_modules_uris_size() const {
  return _internal_py_modules_uris_size();
}
inline void RuntimeEnvUris::clear_py_modules_uris() {
  py_modules_uris_.Clear();
}
inline std::string* RuntimeEnvUris::add_py_modules_uris() {
  std::string* _s = _internal_add_py_modules_uris();
  // @@protoc_insertion_point(field_add_mutable:mcs.rpc.RuntimeEnvUris.py_modules_uris)
  return _s;
}
inline const std::string& RuntimeEnvUris::_internal_py_modules_uris(int index) const {
  return py_modules_uris_.Get(index);
}
inline const std::string& RuntimeEnvUris::py_modules_uris(int index) const {
  // @@protoc_insertion_point(field_get:mcs.rpc.RuntimeEnvUris.py_modules_uris)
  return _internal_py_modules_uris(index);
}
inline std::string* RuntimeEnvUris::mutable_py_modules_uris(int index) {
  // @@protoc_insertion_point(field_mutable:mcs.rpc.RuntimeEnvUris.py_modules_uris)
  return py_modules_uris_.Mutable(index);
}
inline void RuntimeEnvUris::set_py_modules_uris(int index, const std::string& value) {
  py_modules_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mcs.rpc.RuntimeEnvUris.py_modules_uris)
}
inline void RuntimeEnvUris::set_py_modules_uris(int index, std::string&& value) {
  py_modules_uris_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mcs.rpc.RuntimeEnvUris.py_modules_uris)
}
inline void RuntimeEnvUris::set_py_modules_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  py_modules_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mcs.rpc.RuntimeEnvUris.py_modules_uris)
}
inline void RuntimeEnvUris::set_py_modules_uris(int index, const char* value, size_t size) {
  py_modules_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mcs.rpc.RuntimeEnvUris.py_modules_uris)
}
inline std::string* RuntimeEnvUris::_internal_add_py_modules_uris() {
  return py_modules_uris_.Add();
}
inline void RuntimeEnvUris::add_py_modules_uris(const std::string& value) {
  py_modules_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mcs.rpc.RuntimeEnvUris.py_modules_uris)
}
inline void RuntimeEnvUris::add_py_modules_uris(std::string&& value) {
  py_modules_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mcs.rpc.RuntimeEnvUris.py_modules_uris)
}
inline void RuntimeEnvUris::add_py_modules_uris(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  py_modules_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mcs.rpc.RuntimeEnvUris.py_modules_uris)
}
inline void RuntimeEnvUris::add_py_modules_uris(const char* value, size_t size) {
  py_modules_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mcs.rpc.RuntimeEnvUris.py_modules_uris)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RuntimeEnvUris::py_modules_uris() const {
  // @@protoc_insertion_point(field_list:mcs.rpc.RuntimeEnvUris.py_modules_uris)
  return py_modules_uris_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RuntimeEnvUris::mutable_py_modules_uris() {
  // @@protoc_insertion_point(field_mutable_list:mcs.rpc.RuntimeEnvUris.py_modules_uris)
  return &py_modules_uris_;
}

// -------------------------------------------------------------------

// RuntimeEnvConfig

// int32 setup_timeout_seconds = 1;
inline void RuntimeEnvConfig::clear_setup_timeout_seconds() {
  setup_timeout_seconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RuntimeEnvConfig::_internal_setup_timeout_seconds() const {
  return setup_timeout_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RuntimeEnvConfig::setup_timeout_seconds() const {
  // @@protoc_insertion_point(field_get:mcs.rpc.RuntimeEnvConfig.setup_timeout_seconds)
  return _internal_setup_timeout_seconds();
}
inline void RuntimeEnvConfig::_internal_set_setup_timeout_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  setup_timeout_seconds_ = value;
}
inline void RuntimeEnvConfig::set_setup_timeout_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_setup_timeout_seconds(value);
  // @@protoc_insertion_point(field_set:mcs.rpc.RuntimeEnvConfig.setup_timeout_seconds)
}

// bool eager_install = 2;
inline void RuntimeEnvConfig::clear_eager_install() {
  eager_install_ = false;
}
inline bool RuntimeEnvConfig::_internal_eager_install() const {
  return eager_install_;
}
inline bool RuntimeEnvConfig::eager_install() const {
  // @@protoc_insertion_point(field_get:mcs.rpc.RuntimeEnvConfig.eager_install)
  return _internal_eager_install();
}
inline void RuntimeEnvConfig::_internal_set_eager_install(bool value) {
  
  eager_install_ = value;
}
inline void RuntimeEnvConfig::set_eager_install(bool value) {
  _internal_set_eager_install(value);
  // @@protoc_insertion_point(field_set:mcs.rpc.RuntimeEnvConfig.eager_install)
}

// -------------------------------------------------------------------

// RuntimeEnvInfo

// string serialized_runtime_env = 1;
inline void RuntimeEnvInfo::clear_serialized_runtime_env() {
  serialized_runtime_env_.ClearToEmpty();
}
inline const std::string& RuntimeEnvInfo::serialized_runtime_env() const {
  // @@protoc_insertion_point(field_get:mcs.rpc.RuntimeEnvInfo.serialized_runtime_env)
  return _internal_serialized_runtime_env();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RuntimeEnvInfo::set_serialized_runtime_env(ArgT0&& arg0, ArgT... args) {
 
 serialized_runtime_env_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mcs.rpc.RuntimeEnvInfo.serialized_runtime_env)
}
inline std::string* RuntimeEnvInfo::mutable_serialized_runtime_env() {
  std::string* _s = _internal_mutable_serialized_runtime_env();
  // @@protoc_insertion_point(field_mutable:mcs.rpc.RuntimeEnvInfo.serialized_runtime_env)
  return _s;
}
inline const std::string& RuntimeEnvInfo::_internal_serialized_runtime_env() const {
  return serialized_runtime_env_.Get();
}
inline void RuntimeEnvInfo::_internal_set_serialized_runtime_env(const std::string& value) {
  
  serialized_runtime_env_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RuntimeEnvInfo::_internal_mutable_serialized_runtime_env() {
  
  return serialized_runtime_env_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RuntimeEnvInfo::release_serialized_runtime_env() {
  // @@protoc_insertion_point(field_release:mcs.rpc.RuntimeEnvInfo.serialized_runtime_env)
  return serialized_runtime_env_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RuntimeEnvInfo::set_allocated_serialized_runtime_env(std::string* serialized_runtime_env) {
  if (serialized_runtime_env != nullptr) {
    
  } else {
    
  }
  serialized_runtime_env_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialized_runtime_env,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mcs.rpc.RuntimeEnvInfo.serialized_runtime_env)
}

// .mcs.rpc.RuntimeEnvUris uris = 2;
inline bool RuntimeEnvInfo::_internal_has_uris() const {
  return this != internal_default_instance() && uris_ != nullptr;
}
inline bool RuntimeEnvInfo::has_uris() const {
  return _internal_has_uris();
}
inline void RuntimeEnvInfo::clear_uris() {
  if (GetArenaForAllocation() == nullptr && uris_ != nullptr) {
    delete uris_;
  }
  uris_ = nullptr;
}
inline const ::mcs::rpc::RuntimeEnvUris& RuntimeEnvInfo::_internal_uris() const {
  const ::mcs::rpc::RuntimeEnvUris* p = uris_;
  return p != nullptr ? *p : reinterpret_cast<const ::mcs::rpc::RuntimeEnvUris&>(
      ::mcs::rpc::_RuntimeEnvUris_default_instance_);
}
inline const ::mcs::rpc::RuntimeEnvUris& RuntimeEnvInfo::uris() const {
  // @@protoc_insertion_point(field_get:mcs.rpc.RuntimeEnvInfo.uris)
  return _internal_uris();
}
inline void RuntimeEnvInfo::unsafe_arena_set_allocated_uris(
    ::mcs::rpc::RuntimeEnvUris* uris) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uris_);
  }
  uris_ = uris;
  if (uris) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mcs.rpc.RuntimeEnvInfo.uris)
}
inline ::mcs::rpc::RuntimeEnvUris* RuntimeEnvInfo::release_uris() {
  
  ::mcs::rpc::RuntimeEnvUris* temp = uris_;
  uris_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mcs::rpc::RuntimeEnvUris* RuntimeEnvInfo::unsafe_arena_release_uris() {
  // @@protoc_insertion_point(field_release:mcs.rpc.RuntimeEnvInfo.uris)
  
  ::mcs::rpc::RuntimeEnvUris* temp = uris_;
  uris_ = nullptr;
  return temp;
}
inline ::mcs::rpc::RuntimeEnvUris* RuntimeEnvInfo::_internal_mutable_uris() {
  
  if (uris_ == nullptr) {
    auto* p = CreateMaybeMessage<::mcs::rpc::RuntimeEnvUris>(GetArenaForAllocation());
    uris_ = p;
  }
  return uris_;
}
inline ::mcs::rpc::RuntimeEnvUris* RuntimeEnvInfo::mutable_uris() {
  ::mcs::rpc::RuntimeEnvUris* _msg = _internal_mutable_uris();
  // @@protoc_insertion_point(field_mutable:mcs.rpc.RuntimeEnvInfo.uris)
  return _msg;
}
inline void RuntimeEnvInfo::set_allocated_uris(::mcs::rpc::RuntimeEnvUris* uris) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete uris_;
  }
  if (uris) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mcs::rpc::RuntimeEnvUris>::GetOwningArena(uris);
    if (message_arena != submessage_arena) {
      uris = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uris, submessage_arena);
    }
    
  } else {
    
  }
  uris_ = uris;
  // @@protoc_insertion_point(field_set_allocated:mcs.rpc.RuntimeEnvInfo.uris)
}

// .mcs.rpc.RuntimeEnvConfig runtime_env_config = 3;
inline bool RuntimeEnvInfo::_internal_has_runtime_env_config() const {
  return this != internal_default_instance() && runtime_env_config_ != nullptr;
}
inline bool RuntimeEnvInfo::has_runtime_env_config() const {
  return _internal_has_runtime_env_config();
}
inline void RuntimeEnvInfo::clear_runtime_env_config() {
  if (GetArenaForAllocation() == nullptr && runtime_env_config_ != nullptr) {
    delete runtime_env_config_;
  }
  runtime_env_config_ = nullptr;
}
inline const ::mcs::rpc::RuntimeEnvConfig& RuntimeEnvInfo::_internal_runtime_env_config() const {
  const ::mcs::rpc::RuntimeEnvConfig* p = runtime_env_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::mcs::rpc::RuntimeEnvConfig&>(
      ::mcs::rpc::_RuntimeEnvConfig_default_instance_);
}
inline const ::mcs::rpc::RuntimeEnvConfig& RuntimeEnvInfo::runtime_env_config() const {
  // @@protoc_insertion_point(field_get:mcs.rpc.RuntimeEnvInfo.runtime_env_config)
  return _internal_runtime_env_config();
}
inline void RuntimeEnvInfo::unsafe_arena_set_allocated_runtime_env_config(
    ::mcs::rpc::RuntimeEnvConfig* runtime_env_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_env_config_);
  }
  runtime_env_config_ = runtime_env_config;
  if (runtime_env_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mcs.rpc.RuntimeEnvInfo.runtime_env_config)
}
inline ::mcs::rpc::RuntimeEnvConfig* RuntimeEnvInfo::release_runtime_env_config() {
  
  ::mcs::rpc::RuntimeEnvConfig* temp = runtime_env_config_;
  runtime_env_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mcs::rpc::RuntimeEnvConfig* RuntimeEnvInfo::unsafe_arena_release_runtime_env_config() {
  // @@protoc_insertion_point(field_release:mcs.rpc.RuntimeEnvInfo.runtime_env_config)
  
  ::mcs::rpc::RuntimeEnvConfig* temp = runtime_env_config_;
  runtime_env_config_ = nullptr;
  return temp;
}
inline ::mcs::rpc::RuntimeEnvConfig* RuntimeEnvInfo::_internal_mutable_runtime_env_config() {
  
  if (runtime_env_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::mcs::rpc::RuntimeEnvConfig>(GetArenaForAllocation());
    runtime_env_config_ = p;
  }
  return runtime_env_config_;
}
inline ::mcs::rpc::RuntimeEnvConfig* RuntimeEnvInfo::mutable_runtime_env_config() {
  ::mcs::rpc::RuntimeEnvConfig* _msg = _internal_mutable_runtime_env_config();
  // @@protoc_insertion_point(field_mutable:mcs.rpc.RuntimeEnvInfo.runtime_env_config)
  return _msg;
}
inline void RuntimeEnvInfo::set_allocated_runtime_env_config(::mcs::rpc::RuntimeEnvConfig* runtime_env_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete runtime_env_config_;
  }
  if (runtime_env_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mcs::rpc::RuntimeEnvConfig>::GetOwningArena(runtime_env_config);
    if (message_arena != submessage_arena) {
      runtime_env_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime_env_config, submessage_arena);
    }
    
  } else {
    
  }
  runtime_env_config_ = runtime_env_config;
  // @@protoc_insertion_point(field_set_allocated:mcs.rpc.RuntimeEnvInfo.runtime_env_config)
}

// -------------------------------------------------------------------

// RuntimeEnvState

// string runtime_env = 1;
inline void RuntimeEnvState::clear_runtime_env() {
  runtime_env_.ClearToEmpty();
}
inline const std::string& RuntimeEnvState::runtime_env() const {
  // @@protoc_insertion_point(field_get:mcs.rpc.RuntimeEnvState.runtime_env)
  return _internal_runtime_env();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RuntimeEnvState::set_runtime_env(ArgT0&& arg0, ArgT... args) {
 
 runtime_env_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mcs.rpc.RuntimeEnvState.runtime_env)
}
inline std::string* RuntimeEnvState::mutable_runtime_env() {
  std::string* _s = _internal_mutable_runtime_env();
  // @@protoc_insertion_point(field_mutable:mcs.rpc.RuntimeEnvState.runtime_env)
  return _s;
}
inline const std::string& RuntimeEnvState::_internal_runtime_env() const {
  return runtime_env_.Get();
}
inline void RuntimeEnvState::_internal_set_runtime_env(const std::string& value) {
  
  runtime_env_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RuntimeEnvState::_internal_mutable_runtime_env() {
  
  return runtime_env_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RuntimeEnvState::release_runtime_env() {
  // @@protoc_insertion_point(field_release:mcs.rpc.RuntimeEnvState.runtime_env)
  return runtime_env_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RuntimeEnvState::set_allocated_runtime_env(std::string* runtime_env) {
  if (runtime_env != nullptr) {
    
  } else {
    
  }
  runtime_env_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runtime_env,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mcs.rpc.RuntimeEnvState.runtime_env)
}

// int64 ref_cnt = 2;
inline void RuntimeEnvState::clear_ref_cnt() {
  ref_cnt_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RuntimeEnvState::_internal_ref_cnt() const {
  return ref_cnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RuntimeEnvState::ref_cnt() const {
  // @@protoc_insertion_point(field_get:mcs.rpc.RuntimeEnvState.ref_cnt)
  return _internal_ref_cnt();
}
inline void RuntimeEnvState::_internal_set_ref_cnt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ref_cnt_ = value;
}
inline void RuntimeEnvState::set_ref_cnt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ref_cnt(value);
  // @@protoc_insertion_point(field_set:mcs.rpc.RuntimeEnvState.ref_cnt)
}

// optional bool success = 3;
inline bool RuntimeEnvState::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RuntimeEnvState::has_success() const {
  return _internal_has_success();
}
inline void RuntimeEnvState::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool RuntimeEnvState::_internal_success() const {
  return success_;
}
inline bool RuntimeEnvState::success() const {
  // @@protoc_insertion_point(field_get:mcs.rpc.RuntimeEnvState.success)
  return _internal_success();
}
inline void RuntimeEnvState::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000004u;
  success_ = value;
}
inline void RuntimeEnvState::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:mcs.rpc.RuntimeEnvState.success)
}

// optional string error = 4;
inline bool RuntimeEnvState::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RuntimeEnvState::has_error() const {
  return _internal_has_error();
}
inline void RuntimeEnvState::clear_error() {
  error_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RuntimeEnvState::error() const {
  // @@protoc_insertion_point(field_get:mcs.rpc.RuntimeEnvState.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RuntimeEnvState::set_error(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mcs.rpc.RuntimeEnvState.error)
}
inline std::string* RuntimeEnvState::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:mcs.rpc.RuntimeEnvState.error)
  return _s;
}
inline const std::string& RuntimeEnvState::_internal_error() const {
  return error_.Get();
}
inline void RuntimeEnvState::_internal_set_error(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RuntimeEnvState::_internal_mutable_error() {
  _has_bits_[0] |= 0x00000001u;
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RuntimeEnvState::release_error() {
  // @@protoc_insertion_point(field_release:mcs.rpc.RuntimeEnvState.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return error_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RuntimeEnvState::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mcs.rpc.RuntimeEnvState.error)
}

// optional int64 creation_time_ms = 5;
inline bool RuntimeEnvState::_internal_has_creation_time_ms() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RuntimeEnvState::has_creation_time_ms() const {
  return _internal_has_creation_time_ms();
}
inline void RuntimeEnvState::clear_creation_time_ms() {
  creation_time_ms_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RuntimeEnvState::_internal_creation_time_ms() const {
  return creation_time_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RuntimeEnvState::creation_time_ms() const {
  // @@protoc_insertion_point(field_get:mcs.rpc.RuntimeEnvState.creation_time_ms)
  return _internal_creation_time_ms();
}
inline void RuntimeEnvState::_internal_set_creation_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  creation_time_ms_ = value;
}
inline void RuntimeEnvState::set_creation_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_creation_time_ms(value);
  // @@protoc_insertion_point(field_set:mcs.rpc.RuntimeEnvState.creation_time_ms)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace mcs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_runtime_5fenv_5fcommon_2eproto
